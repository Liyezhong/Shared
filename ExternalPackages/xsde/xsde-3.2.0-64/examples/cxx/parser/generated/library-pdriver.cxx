// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD/e,
// an XML Schema to C++ data binding compiler for embedded systems. You
// may use it in your programs without any restrictions.
//

#include "library-pimpl.hxx"

#include <iostream>

int
main (int argc, char* argv[])
{
  const char* input;

  if (argc < 2)
  {
    input = "STDIN";
    std::cerr << "XML file not specified, reading from STDIN" << std::endl;
  }
  else
    input = argv[1];

  int r = 0;

  // Instantiate individual parsers.
  //
  ::library::catalog_pimpl catalog_p;
  ::library::book_pimpl book_p;
  ::xml_schema::boolean_pimpl boolean_p;
  ::xml_schema::id_pimpl id_p;
  ::library::isbn_pimpl isbn_p;
  ::library::title_pimpl title_p;
  ::xml_schema::string_pimpl string_p;
  ::library::genre_pimpl genre_p;
  ::library::author_pimpl author_p;
  ::xml_schema::idref_pimpl idref_p;

  // Connect the parsers together.
  //
  catalog_p.parsers (book_p);

  book_p.parsers (boolean_p,
                  id_p,
                  isbn_p,
                  title_p,
                  genre_p,
                  author_p);

  title_p.parsers (string_p);

  author_p.parsers (string_p,
                    string_p,
                    string_p,
                    idref_p);

  // Parse the XML document.
  //
  ::xml_schema::parser_error e;

  do
  {
    ::xml_schema::document_pimpl doc_p (
      catalog_p,
      "http://www.codesynthesis.com/library",
      "catalog");

    if (e = doc_p._error ())
      break;

    catalog_p.pre ();

    if (e = catalog_p._error ())
      break;

    if (argc < 2)
      doc_p.parse (std::cin);
    else
      doc_p.parse (argv[1]);

    if (e = doc_p._error ())
      break;

    catalog_p.post_catalog ();
    e = catalog_p._error ();
  }
  while (false);

  // Handle errors.
  //
  if (e)
  {
    switch (e.type ())
    {
      case ::xml_schema::parser_error::sys:
      {
        std::cerr << input << ": " << e.sys_text () << std::endl;
        break;
      }
      case ::xml_schema::parser_error::xml:
      {
        std::cerr << input << ':' << e.line () << ':'
          << e.column () << ": " << e.xml_text () << std::endl;
        break;
      }
      case ::xml_schema::parser_error::schema:
      {
        std::cerr << input << ':' << e.line () << ':'
          << e.column () << ": " << e.schema_text () << std::endl;
        break;
      }
      case ::xml_schema::parser_error::app:
      {
        std::cerr << input << ':' << e.line () << ':'
          << e.column () << ": application error "
          << e.app_code () << std::endl;
        break;
      }
      default:
      {
        break;
      }
    }

    r = 1;
  }

  return r;
}

