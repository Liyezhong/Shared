// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

// anchor_pskel
//

inline
void anchor_pskel::
href_parser (::xml_schema::string_pskel& p)
{
  this->href_parser_ = &p;
}

inline
void anchor_pskel::
parsers (::xml_schema::string_pskel& href)
{
  this->href_parser_ = &href;
}

inline
anchor_pskel::
anchor_pskel (::xml_schema::string_pskel* tiein)
: ::xml_schema::string_pskel (tiein, 0),
  anchor_impl_ (0),
  href_parser_ (0),
  v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
{
}

inline
anchor_pskel::
anchor_pskel (anchor_pskel* impl, void*)
: ::xml_schema::string_pskel (impl, 0),
  anchor_impl_ (impl),
  href_parser_ (0),
  v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
{
}

// text_pskel
//

inline
void text_pskel::
a_parser (::anchor_pskel& p)
{
  this->a_parser_ = &p;
}

inline
void text_pskel::
parsers (::anchor_pskel& a)
{
  this->a_parser_ = &a;
}

inline
text_pskel::
text_pskel ()
: text_impl_ (0),
  a_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

inline
text_pskel::
text_pskel (text_pskel* impl, void*)
: ::xsde::cxx::parser::validating::complex_content (impl, 0),
  text_impl_ (impl),
  a_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// Begin epilogue.
//
//
// End epilogue.

