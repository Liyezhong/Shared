// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "hello-sskel.hxx"

#include <assert.h>

// hello_sskel
//

void hello_sskel::
pre ()
{
  if (this->hello_impl_)
    this->hello_impl_->pre ();
}

void hello_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  this->resetting_ = true;

  if (this->greeting_serializer_)
    this->greeting_serializer_->_reset ();

  if (this->name_serializer_)
    this->name_serializer_->_reset ();

  this->resetting_ = false;
}

// Element validation and serialization for hello_sskel.
//
void hello_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // greeting
  //
  {
    const ::std::string& r = this->greeting ();

    if (this->greeting_serializer_)
    {
      this->greeting_serializer_->pre (r);
      this->_start_element ("greeting");
      this->greeting_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->greeting_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->greeting_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->greeting_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->greeting_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }

  // name
  //
  {
    size_t i = 0;
    for (; this->name_next (); ++i)
    {
      const ::std::string& r = this->name ();

      if (this->name_serializer_)
      {
        this->name_serializer_->pre (r);
        this->_start_element ("name");
        this->name_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->name_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->name_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->name_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->name_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    if (i < 1UL)
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

