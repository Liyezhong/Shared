// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "email-pskel.hxx"

#include <assert.h>

namespace email
{
  // binary_pskel
  //

  void binary_pskel::
  name (const ::std::string& x)
  {
    if (this->binary_impl_)
      this->binary_impl_->name (x);
  }

  void binary_pskel::
  mime (const ::std::string& x)
  {
    if (this->binary_impl_)
      this->binary_impl_->mime (x);
  }

  void binary_pskel::
  _reset ()
  {
    typedef ::xml_schema::base64_binary_pskel base;
    base::_reset ();

    this->v_state_attr_stack_.clear ();

    if (this->name_parser_)
      this->name_parser_->_reset ();

    if (this->mime_parser_)
      this->mime_parser_->_reset ();
  }

  ::xml_schema::buffer* binary_pskel::
  post_base64_binary ()
  {
    assert (this->base64_binary_impl_);
    return this->base64_binary_impl_->post_base64_binary ();
  }

  // envelope_pskel
  //

  void envelope_pskel::
  to (const ::std::string& x)
  {
    if (this->envelope_impl_)
      this->envelope_impl_->to (x);
  }

  void envelope_pskel::
  from (const ::std::string& x)
  {
    if (this->envelope_impl_)
      this->envelope_impl_->from (x);
  }

  void envelope_pskel::
  subject (const ::std::string& x)
  {
    if (this->envelope_impl_)
      this->envelope_impl_->subject (x);
  }

  void envelope_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->to_parser_)
      this->to_parser_->_reset ();

    if (this->from_parser_)
      this->from_parser_->_reset ();

    if (this->subject_parser_)
      this->subject_parser_->_reset ();

    this->resetting_ = false;
  }
}

#include <assert.h>

namespace email
{
  // Element validation and dispatch functions for envelope_pskel.
  //
  bool envelope_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "to" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &envelope_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool envelope_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void envelope_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void envelope_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void envelope_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "to" && ns.empty ())
        {
          if (start)
          {
            if (this->to_parser_)
            {
              this->to_parser_->pre ();
              ctx.nested_parser (this->to_parser_);
            }
          }
          else
          {
            if (this->to_parser_ != 0)
            {
              const ::std::string& tmp = this->to_parser_->post_string ();
              this->to (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "from" && ns.empty ())
        {
          if (start)
          {
            if (this->from_parser_)
            {
              this->from_parser_->pre ();
              ctx.nested_parser (this->from_parser_);
            }
          }
          else
          {
            if (this->from_parser_ != 0)
            {
              const ::std::string& tmp = this->from_parser_->post_string ();
              this->from (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "subject" && ns.empty ())
        {
          if (start)
          {
            if (this->subject_parser_)
            {
              this->subject_parser_->pre ();
              ctx.nested_parser (this->subject_parser_);
            }
          }
          else
          {
            if (this->subject_parser_ != 0)
            {
              const ::std::string& tmp = this->subject_parser_->post_string ();
              this->subject (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (ns == "http://www.codesynthesis.com/email")
        {
          if (start)
          {
            ctx.start_wildcard_content ();
            this->_start_any_element (ns, n);
          }
          else
          {
            this->_end_any_element (ns, n);
            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace email
{
  // Attribute validation and dispatch functions for binary_pskel.
  //
  bool binary_pskel::
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                             const ::xsde::cxx::ro_string& n,
                             const ::xsde::cxx::ro_string& s)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();

        this->name_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->name_parser_->_characters (s);

        if (!ctx.error_type ())
          this->name_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->name_parser_->post_string ();

          this->name (tmp);
        }
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
      return true;
    }

    if (n == "mime" && ns.empty ())
    {
      if (this->mime_parser_)
      {
        this->mime_parser_->pre ();

        this->mime_parser_->_pre_impl (ctx);

        if (!ctx.error_type ())
          this->mime_parser_->_characters (s);

        if (!ctx.error_type ())
          this->mime_parser_->_post_impl ();

        if (!ctx.error_type ())
        {
          const ::std::string& tmp = this->mime_parser_->post_string ();

          this->mime (tmp);
        }
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->mime = true;
      return true;
    }

    typedef ::xml_schema::base64_binary_pskel base;
    return base::_attribute_impl_phase_one (ns, n, s);
  }

  void binary_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.name = false;
    as.mime = false;
    typedef ::xml_schema::base64_binary_pskel base;
    base::_pre_a_validate ();
  }

  void binary_pskel::
  _post_a_validate ()
  {
    typedef ::xml_schema::base64_binary_pskel base;
    base::_post_a_validate ();

    if (this->_context ().error_type ())
      return;

    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.name)
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }

    if (!as.mime)
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }


    this->v_state_attr_stack_.pop ();
  }
}

namespace email
{
}

// Begin epilogue.
//
//
// End epilogue.

