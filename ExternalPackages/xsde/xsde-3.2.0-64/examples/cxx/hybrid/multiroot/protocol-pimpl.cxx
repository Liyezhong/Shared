// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "protocol-pimpl.hxx"

#include <xsde/cxx/parser/validating/string-common.hxx>

namespace protocol
{
  // request_pimpl
  //

  void request_pimpl::
  pre ()
  {
    this->request_pimpl_state_.request_ = ::protocol::request ();
  }

  void request_pimpl::
  account (unsigned int x)
  {
    this->request_pimpl_state_.request_.account (x);
  }

  ::protocol::request request_pimpl::
  post_request ()
  {
    return this->request_pimpl_state_.request_;
  }

  // balance_pimpl
  //

  balance_pimpl::
  balance_pimpl ()
  : balance_pskel (&base_impl_)
  {
  }

  void balance_pimpl::
  pre ()
  {
    this->base_impl_.pre ();
    this->balance_pimpl_state_.balance_ = ::protocol::balance ();
  }

  ::protocol::balance balance_pimpl::
  post_balance ()
  {
    static_cast< ::protocol::request& > (this->balance_pimpl_state_.balance_) = 
    this->base_impl_.post_request ();
    return this->balance_pimpl_state_.balance_;
  }

  // withdraw_pimpl
  //

  withdraw_pimpl::
  withdraw_pimpl ()
  : withdraw_pskel (&base_impl_)
  {
  }

  void withdraw_pimpl::
  pre ()
  {
    this->base_impl_.pre ();
    this->withdraw_pimpl_state_.withdraw_ = ::protocol::withdraw ();
  }

  void withdraw_pimpl::
  amount (unsigned int x)
  {
    this->withdraw_pimpl_state_.withdraw_.amount (x);
  }

  ::protocol::withdraw withdraw_pimpl::
  post_withdraw ()
  {
    static_cast< ::protocol::request& > (this->withdraw_pimpl_state_.withdraw_) = 
    this->base_impl_.post_request ();
    return this->withdraw_pimpl_state_.withdraw_;
  }

  // deposit_pimpl
  //

  deposit_pimpl::
  deposit_pimpl ()
  : deposit_pskel (&base_impl_)
  {
  }

  void deposit_pimpl::
  pre ()
  {
    this->base_impl_.pre ();
    this->deposit_pimpl_state_.deposit_ = ::protocol::deposit ();
  }

  void deposit_pimpl::
  amount (unsigned int x)
  {
    this->deposit_pimpl_state_.deposit_.amount (x);
  }

  ::protocol::deposit deposit_pimpl::
  post_deposit ()
  {
    static_cast< ::protocol::request& > (this->deposit_pimpl_state_.deposit_) = 
    this->base_impl_.post_request ();
    return this->deposit_pimpl_state_.deposit_;
  }
}

namespace protocol
{
  // balance_paggr
  //

  balance_paggr::
  balance_paggr ()
  {
    this->balance_p_.parsers (this->unsigned_int_p_);
  }

  const char* balance_paggr::
  root_name ()
  {
    return "balance";
  }

  const char* balance_paggr::
  root_namespace ()
  {
    return "http://www.codesynthesis.com/protocol";
  }

  // withdraw_paggr
  //

  withdraw_paggr::
  withdraw_paggr ()
  {
    this->withdraw_p_.parsers (this->unsigned_int_p_,
                               this->unsigned_int_p_);
  }

  const char* withdraw_paggr::
  root_name ()
  {
    return "withdraw";
  }

  const char* withdraw_paggr::
  root_namespace ()
  {
    return "http://www.codesynthesis.com/protocol";
  }

  // deposit_paggr
  //

  deposit_paggr::
  deposit_paggr ()
  {
    this->deposit_p_.parsers (this->unsigned_int_p_,
                              this->unsigned_int_p_);
  }

  const char* deposit_paggr::
  root_name ()
  {
    return "deposit";
  }

  const char* deposit_paggr::
  root_namespace ()
  {
    return "http://www.codesynthesis.com/protocol";
  }
}

// Begin epilogue.
//
//
// End epilogue.

