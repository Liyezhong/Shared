// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "people-sskel.hxx"

#include <assert.h>

// gender_sskel
//

void gender_sskel::
pre (const ::std::string& x)
{
  assert (this->string_impl_);
  this->string_impl_->pre (x);
}

const char* const gender_sskel::_xsde_gender_sskel_enums_[2UL] = 
{
  "female",
  "male"
};

// person_sskel
//

void person_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  this->resetting_ = true;

  if (this->first_name_serializer_)
    this->first_name_serializer_->_reset ();

  if (this->last_name_serializer_)
    this->last_name_serializer_->_reset ();

  if (this->gender_serializer_)
    this->gender_serializer_->_reset ();

  if (this->age_serializer_)
    this->age_serializer_->_reset ();

  this->resetting_ = false;
}

// people_sskel
//

void people_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  this->resetting_ = true;

  if (this->person_serializer_)
    this->person_serializer_->_reset ();

  this->resetting_ = false;
}

// Element validation and serialization for person_sskel.
//
void person_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // first_name
  //
  {
    const ::std::string& r = this->first_name ();

    if (this->first_name_serializer_)
    {
      this->first_name_serializer_->pre (r);
      this->_start_element ("first-name");
      this->first_name_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->first_name_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->first_name_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->first_name_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->first_name_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }

  // last_name
  //
  {
    const ::std::string& r = this->last_name ();

    if (this->last_name_serializer_)
    {
      this->last_name_serializer_->pre (r);
      this->_start_element ("last-name");
      this->last_name_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->last_name_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->last_name_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->last_name_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->last_name_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }

  // gender
  //
  {
    const ::gender& r = this->gender ();

    if (this->gender_serializer_)
    {
      this->gender_serializer_->pre (r);
      this->_start_element ("gender");
      this->gender_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->gender_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->gender_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->gender_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->gender_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }

  // age
  //
  {
    unsigned short r = this->age ();

    if (this->age_serializer_)
    {
      this->age_serializer_->pre (r);
      this->_start_element ("age");
      this->age_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->age_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->age_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->age_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->age_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }
}

// Element validation and serialization for people_sskel.
//
void people_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // person
  //
  {
    size_t i = 0;
    for (; this->person_next (); ++i)
    {
      const ::person& r = this->person ();

      if (this->person_serializer_)
      {
        this->person_serializer_->pre (r);
        this->_start_element ("person");
        this->person_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->person_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->person_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->person_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->person_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    if (i < 1UL)
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

