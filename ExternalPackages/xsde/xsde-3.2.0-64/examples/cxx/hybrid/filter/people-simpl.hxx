// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef PEOPLE_SIMPL_HXX
#define PEOPLE_SIMPL_HXX

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_SAGGR
#  define XSDE_OMIT_SAGGR
#  define PEOPLE_SIMPL_HXX_CLEAR_OMIT_SAGGR
#endif

#include "people-sskel.hxx"

#include <xsde/cxx/stack.hxx>

class gender_simpl: public gender_sskel
{
  public:
  gender_simpl ();

  virtual void
  pre (const ::gender&);

  virtual void
  _serialize_content ();

  public:
  const ::gender* gender_simpl_state_;
};

class person_simpl: public person_sskel
{
  public:
  virtual void
  pre (const ::person&);

  // Elements.
  //
  virtual ::std::string
  first_name ();

  virtual ::std::string
  last_name ();

  virtual const ::gender&
  gender ();

  virtual unsigned short
  age ();

  public:
  struct person_simpl_state
  {
    const ::person* person_;
  };

  person_simpl_state person_simpl_state_;
};

class people_base_simpl: public people_sskel
{
  public:
  virtual void
  pre (const ::people&);

  // Elements.
  //
  virtual bool
  person_next ();

  virtual const ::person&
  person ();

  public:
  struct people_base_simpl_state
  {
    const ::people* people_;
    ::people::person_const_iterator person_;
    ::people::person_const_iterator person_end_;
  };

  people_base_simpl_state people_base_simpl_state_;
};

#include "people-custom-simpl.hxx"

#ifdef PEOPLE_SIMPL_HXX_CLEAR_OMIT_SAGGR
#  undef XSDE_OMIT_SAGGR
#endif

#ifndef XSDE_OMIT_SAGGR

// Serializer aggregate for the people element.
//
class people_saggr
{
  public:
  people_saggr ();

  void
  pre (const ::people& x)
  {
    this->people_s_.pre (x);
  }

  void
  post ()
  {
    this->people_s_.post ();
  }

  ::people_simpl&
  root_serializer ()
  {
    return this->people_s_;
  }

  static const char*
  root_name ();

  static const char*
  root_namespace ();

  void
  reset ()
  {
    this->people_s_._reset ();
  }

  public:
  ::xml_schema::string_simpl string_s_;
  ::person_simpl person_s_;
  ::gender_simpl gender_s_;
  ::xml_schema::unsigned_short_simpl unsigned_short_s_;
  ::people_simpl people_s_;
};

#endif // XSDE_OMIT_SAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // PEOPLE_SIMPL_HXX
