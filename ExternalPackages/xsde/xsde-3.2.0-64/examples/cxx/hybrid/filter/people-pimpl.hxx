// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef PEOPLE_PIMPL_HXX
#define PEOPLE_PIMPL_HXX

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_PAGGR
#  define XSDE_OMIT_PAGGR
#  define PEOPLE_PIMPL_HXX_CLEAR_OMIT_PAGGR
#endif

#include "people-pskel.hxx"

#include <xsde/cxx/stack.hxx>

class gender_pimpl: public gender_pskel
{
  public:
  gender_pimpl ();

  virtual void
  pre ();

  virtual void
  _characters (const ::xsde::cxx::ro_string&);

  virtual void
  _post ();

  virtual ::gender
  post_gender ();

  public:
  struct gender_pimpl_state
  {
    ::std::string str_;
  };

  gender_pimpl_state gender_pimpl_state_;
};

class person_pimpl: public person_pskel
{
  public:
  virtual void
  pre ();

  // Elements.
  //
  virtual void
  first_name (const ::std::string&);

  virtual void
  last_name (const ::std::string&);

  virtual void
  gender (const ::gender&);

  virtual void
  age (unsigned short);

  virtual ::person
  post_person ();

  public:
  struct person_pimpl_state
  {
    ::person person_;
  };

  person_pimpl_state person_pimpl_state_;
};

class people_base_pimpl: public people_pskel
{
  public:
  people_base_pimpl (bool = false);

  ~people_base_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Elements.
  //
  virtual void
  person (const ::person&);

  virtual ::people*
  post_people ();

  public:
  void
  pre_impl (::people*);

  public:
  struct people_base_pimpl_state
  {
    ::people* people_;
  };

  people_base_pimpl_state people_base_pimpl_state_;
  bool people_base_pimpl_base_;
};

#include "people-custom-pimpl.hxx"

#ifdef PEOPLE_PIMPL_HXX_CLEAR_OMIT_PAGGR
#  undef XSDE_OMIT_PAGGR
#endif

#ifndef XSDE_OMIT_PAGGR

// Parser aggregate for the people element.
//
class people_paggr
{
  public:
  people_paggr ();

  void
  pre ()
  {
    this->people_p_.pre ();
  }

  ::people*
  post ()
  {
    return this->people_p_.post_people ();
  }

  ::people_pimpl&
  root_parser ()
  {
    return this->people_p_;
  }

  static const char*
  root_name ();

  static const char*
  root_namespace ();

  void
  reset ()
  {
    this->people_p_._reset ();
  }

  public:
  ::xml_schema::string_pimpl string_p_;
  ::person_pimpl person_p_;
  ::gender_pimpl gender_p_;
  ::xml_schema::unsigned_short_pimpl unsigned_short_p_;
  ::people_pimpl people_p_;
};

#endif // XSDE_OMIT_PAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // PEOPLE_PIMPL_HXX
