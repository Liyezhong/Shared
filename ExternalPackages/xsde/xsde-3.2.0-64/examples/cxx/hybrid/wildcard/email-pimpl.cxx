// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "email-pimpl.hxx"

#include <xsde/cxx/parser/validating/string-common.hxx>

namespace email
{
  // binary_pimpl
  //

  binary_pimpl::
  binary_pimpl (bool b)
  : binary_pskel (&base_impl_),
    base_impl_ (true)
  {
    this->binary_pimpl_base_ = b;
    this->binary_pimpl_state_.binary_ = 0;
  }

  binary_pimpl::
  ~binary_pimpl ()
  {
    if (!this->binary_pimpl_base_ && this->binary_pimpl_state_.binary_)
      delete this->binary_pimpl_state_.binary_;
  }

  void binary_pimpl::
  _reset ()
  {
    binary_pskel::_reset ();

    if (!this->binary_pimpl_base_ && this->binary_pimpl_state_.binary_)
    {
      delete this->binary_pimpl_state_.binary_;
      this->binary_pimpl_state_.binary_ = 0;
    }
  }

  void binary_pimpl::
  pre_impl (::email::binary* x)
  {
    this->binary_pimpl_state_.binary_ = x;
    this->base_impl_.pre_impl (x);
  }

  void binary_pimpl::
  pre ()
  {
    ::email::binary* x = new ::email::binary;
    this->pre_impl (x);
  }

  void binary_pimpl::
  name (const ::std::string& x)
  {
    this->binary_pimpl_state_.binary_->name (x);
  }

  void binary_pimpl::
  mime (const ::std::string& x)
  {
    this->binary_pimpl_state_.binary_->mime (x);
  }

  ::email::binary* binary_pimpl::
  post_binary ()
  {
    this->base_impl_.post_base64_binary ();
    ::email::binary* r = this->binary_pimpl_state_.binary_;
    this->binary_pimpl_state_.binary_ = 0;
    return r;
  }

  // envelope_base_pimpl
  //

  envelope_base_pimpl::
  envelope_base_pimpl (bool b)
  {
    this->envelope_base_pimpl_base_ = b;
    this->envelope_base_pimpl_state_.envelope_ = 0;
  }

  envelope_base_pimpl::
  ~envelope_base_pimpl ()
  {
    if (!this->envelope_base_pimpl_base_ && this->envelope_base_pimpl_state_.envelope_)
      delete this->envelope_base_pimpl_state_.envelope_;
  }

  void envelope_base_pimpl::
  _reset ()
  {
    envelope_pskel::_reset ();

    if (!this->envelope_base_pimpl_base_ && this->envelope_base_pimpl_state_.envelope_)
    {
      delete this->envelope_base_pimpl_state_.envelope_;
      this->envelope_base_pimpl_state_.envelope_ = 0;
    }
  }

  void envelope_base_pimpl::
  pre_impl (::email::envelope* x)
  {
    this->envelope_base_pimpl_state_.envelope_ = x;
  }

  void envelope_base_pimpl::
  pre ()
  {
    ::email::envelope* x = new ::email::envelope;
    this->pre_impl (x);
  }

  void envelope_base_pimpl::
  to (const ::std::string& x)
  {
    this->envelope_base_pimpl_state_.envelope_->to (x);
  }

  void envelope_base_pimpl::
  from (const ::std::string& x)
  {
    this->envelope_base_pimpl_state_.envelope_->from (x);
  }

  void envelope_base_pimpl::
  subject (const ::std::string& x)
  {
    this->envelope_base_pimpl_state_.envelope_->subject (x);
  }

  ::email::envelope* envelope_base_pimpl::
  post_envelope ()
  {
    ::email::envelope* r = this->envelope_base_pimpl_state_.envelope_;
    this->envelope_base_pimpl_state_.envelope_ = 0;
    return r;
  }
}

namespace email
{
  // text_paggr
  //

  text_paggr::
  text_paggr ()
  {
  }

  const char* text_paggr::
  root_name ()
  {
    return "text";
  }

  const char* text_paggr::
  root_namespace ()
  {
    return "http://www.codesynthesis.com/email";
  }

  // binary_paggr
  //

  binary_paggr::
  binary_paggr ()
  {
    this->binary_p_.parsers (this->string_p_,
                             this->string_p_);
  }

  const char* binary_paggr::
  root_name ()
  {
    return "binary";
  }

  const char* binary_paggr::
  root_namespace ()
  {
    return "http://www.codesynthesis.com/email";
  }

  // message_paggr
  //

  message_paggr::
  message_paggr ()
  {
    this->envelope_p_.parsers (this->string_p_,
                               this->string_p_,
                               this->string_p_);
  }

  const char* message_paggr::
  root_name ()
  {
    return "message";
  }

  const char* message_paggr::
  root_namespace ()
  {
    return "http://www.codesynthesis.com/email";
  }
}

// Begin epilogue.
//
//
// End epilogue.

