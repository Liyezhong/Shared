// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "position-sskel.hxx"

#include <assert.h>

// position_sskel
//

void position_sskel::
_reset ()
{
  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  if (this->lat_serializer_)
    this->lat_serializer_->_reset ();

  if (this->lon_serializer_)
    this->lon_serializer_->_reset ();
}

// object_sskel
//

void object_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  if (this->id_serializer_)
    this->id_serializer_->_reset ();

  this->resetting_ = true;

  if (this->position_serializer_)
    this->position_serializer_->_reset ();

  this->resetting_ = false;
}

// Element validation and serialization for object_sskel.
//
void object_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // position
  //
  {
    size_t i = 0;
    for (; this->position_next (); ++i)
    {
      const ::position& r = this->position ();

      if (this->position_serializer_)
      {
        this->position_serializer_->pre (r);
        this->_start_element ("position");
        this->position_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->position_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->position_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->position_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->position_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    if (i < 1UL)
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }
}

// Attribute validation and serialization for position_sskel.
//
void position_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // lat
  //
  {
    float r = this->lat ();

    if (this->lat_serializer_)
    {
      this->lat_serializer_->pre (r);
      this->_start_attribute ("lat");
      this->lat_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->lat_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->lat_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->lat_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }

  // lon
  //
  {
    float r = this->lon ();

    if (this->lon_serializer_)
    {
      this->lon_serializer_->pre (r);
      this->_start_attribute ("lon");
      this->lon_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->lon_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->lon_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->lon_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }
}

// Attribute validation and serialization for object_sskel.
//
void object_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // id
  //
  {
    unsigned int r = this->id ();

    if (this->id_serializer_)
    {
      this->id_serializer_->pre (r);
      this->_start_attribute ("id");
      this->id_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->id_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->id_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->id_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

