// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "text-pskel.hxx"

#include <assert.h>

// anchor_pskel
//

void anchor_pskel::
href (const ::std::string& x)
{
  if (this->anchor_impl_)
    this->anchor_impl_->href (x);
}

void anchor_pskel::
_reset ()
{
  typedef ::xml_schema::string_pskel base;
  base::_reset ();

  this->v_state_attr_stack_.clear ();

  if (this->href_parser_)
    this->href_parser_->_reset ();
}

::std::string anchor_pskel::
post_string ()
{
  assert (this->string_impl_);
  return this->string_impl_->post_string ();
}

// text_pskel
//

void text_pskel::
a (const anchor& x)
{
  if (this->text_impl_)
    this->text_impl_->a (x);
}

void text_pskel::
post_text ()
{
  if (this->text_impl_)
    this->text_impl_->post_text ();
}

void text_pskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::parser::validating::complex_content base;
  base::_reset ();

  this->v_state_stack_.clear ();

  this->resetting_ = true;

  if (this->a_parser_)
    this->a_parser_->_reset ();

  this->resetting_ = false;
}

#include <assert.h>

// Element validation and dispatch functions for text_pskel.
//
bool text_pskel::
_start_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
{
  ::xsde::cxx::parser::context& ctx = this->_context ();

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    typedef ::xsde::cxx::parser::validating::complex_content base;
    if (base::_start_element_impl (ns, n))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL && !ctx.error_type ())
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "a" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &text_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, true);
      }
      else
      {
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool text_pskel::
_end_element_impl (const ::xsde::cxx::ro_string& ns,
                   const ::xsde::cxx::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    typedef ::xsde::cxx::parser::validating::complex_content base;
    if (!base::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void text_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void text_pskel::
_post_e_validate ()
{
  ::xsde::cxx::parser::context& ctx = this->_context ();

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xsde::cxx::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, true);

    if (ctx.error_type ())
      return;

    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }


  this->v_state_stack_.pop ();
}

void text_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xsde::cxx::ro_string& ns,
            const ::xsde::cxx::ro_string& n,
            bool start)
{
  ::xsde::cxx::parser::context& ctx = this->_context ();

  XSDE_UNUSED (ctx);

  switch (state)
  {
    case 0UL:
    {
      if (n == "a" && ns.empty ())
      {
        if (start)
        {
          if (this->a_parser_)
          {
            this->a_parser_->pre ();
            ctx.nested_parser (this->a_parser_);
          }
        }
        else
        {
          if (this->a_parser_ != 0)
          {
            const anchor& tmp = this->a_parser_->post_anchor ();
            this->a (tmp);
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    case ~0UL:
      break;
  }
}

// Attribute validation and dispatch functions for anchor_pskel.
//
bool anchor_pskel::
_attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                           const ::xsde::cxx::ro_string& n,
                           const ::xsde::cxx::ro_string& s)
{
  ::xsde::cxx::parser::context& ctx = this->_context ();

  if (n == "href" && ns.empty ())
  {
    if (this->href_parser_)
    {
      this->href_parser_->pre ();

      this->href_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->href_parser_->_characters (s);

      if (!ctx.error_type ())
        this->href_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        const ::std::string& tmp = this->href_parser_->post_string ();

        this->href (tmp);
      }
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->href = true;
    return true;
  }

  typedef ::xml_schema::string_pskel base;
  return base::_attribute_impl_phase_one (ns, n, s);
}

void anchor_pskel::
_pre_a_validate ()
{
  this->v_state_attr_stack_.push ();
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  as.href = false;
  typedef ::xml_schema::string_pskel base;
  base::_pre_a_validate ();
}

void anchor_pskel::
_post_a_validate ()
{
  typedef ::xml_schema::string_pskel base;
  base::_post_a_validate ();

  if (this->_context ().error_type ())
    return;

  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  if (!as.href)
  {
    this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
    return;
  }


  this->v_state_attr_stack_.pop ();
}

// Character validation functions for text_pskel.
//
bool text_pskel::
_characters_impl (const ::xsde::cxx::ro_string& s)
{
  this->_any_characters (s);
  return true;
}

// Begin epilogue.
//
//
// End epilogue.

