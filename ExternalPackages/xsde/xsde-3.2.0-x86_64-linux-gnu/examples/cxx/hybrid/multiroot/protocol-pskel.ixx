// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

namespace protocol
{
  // request_pskel
  //

  inline
  void request_pskel::
  account_parser (::xml_schema::unsigned_int_pskel& p)
  {
    this->account_parser_ = &p;
  }

  inline
  void request_pskel::
  parsers (::xml_schema::unsigned_int_pskel& account)
  {
    this->account_parser_ = &account;
  }

  inline
  request_pskel::
  request_pskel ()
  : request_impl_ (0),
    account_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  request_pskel::
  request_pskel (request_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    request_impl_ (impl),
    account_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // balance_pskel
  //

  inline
  balance_pskel::
  balance_pskel (::protocol::request_pskel* tiein)
  : ::protocol::request_pskel (tiein, 0),
    balance_impl_ (0)
  {
  }

  inline
  balance_pskel::
  balance_pskel (balance_pskel* impl, void*)
  : ::protocol::request_pskel (impl, 0),
    balance_impl_ (impl)
  {
  }

  // withdraw_pskel
  //

  inline
  void withdraw_pskel::
  amount_parser (::xml_schema::unsigned_int_pskel& p)
  {
    this->amount_parser_ = &p;
  }

  inline
  void withdraw_pskel::
  parsers (::xml_schema::unsigned_int_pskel& account,
           ::xml_schema::unsigned_int_pskel& amount)
  {
    this->account_parser_ = &account;
    this->amount_parser_ = &amount;
  }

  inline
  withdraw_pskel::
  withdraw_pskel (::protocol::request_pskel* tiein)
  : ::protocol::request_pskel (tiein, 0),
    withdraw_impl_ (0),
    amount_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  withdraw_pskel::
  withdraw_pskel (withdraw_pskel* impl, void*)
  : ::protocol::request_pskel (impl, 0),
    withdraw_impl_ (impl),
    amount_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // deposit_pskel
  //

  inline
  void deposit_pskel::
  amount_parser (::xml_schema::unsigned_int_pskel& p)
  {
    this->amount_parser_ = &p;
  }

  inline
  void deposit_pskel::
  parsers (::xml_schema::unsigned_int_pskel& account,
           ::xml_schema::unsigned_int_pskel& amount)
  {
    this->account_parser_ = &account;
    this->amount_parser_ = &amount;
  }

  inline
  deposit_pskel::
  deposit_pskel (::protocol::request_pskel* tiein)
  : ::protocol::request_pskel (tiein, 0),
    deposit_impl_ (0),
    amount_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  deposit_pskel::
  deposit_pskel (deposit_pskel* impl, void*)
  : ::protocol::request_pskel (impl, 0),
    deposit_impl_ (impl),
    amount_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

// Begin epilogue.
//
//
// End epilogue.

