// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "protocol.hxx"

#include <stdlib.h>
#include <new>

namespace protocol
{
  // request
  //

  request::
  request ()
  {
  }

  request::
  ~request ()
  {
  }

  request::
  request (const request& x)
  {
    XSDE_UNUSED (x);
    this->account_ = x.account_;
  }

  request& request::
  operator= (const request& x)
  {
    XSDE_UNUSED (x);
    this->account_ = x.account_;
    return *this;
  }

  // balance
  //

  balance::
  balance ()
  {
  }

  balance::
  ~balance ()
  {
  }

  balance::
  balance (const balance& x)
  : ::protocol::request (x)
  {
    XSDE_UNUSED (x);
  }

  balance& balance::
  operator= (const balance& x)
  {
    XSDE_UNUSED (x);
    static_cast< ::protocol::request& > (*this) = x;
    return *this;
  }

  // withdraw
  //

  withdraw::
  withdraw ()
  {
  }

  withdraw::
  ~withdraw ()
  {
  }

  withdraw::
  withdraw (const withdraw& x)
  : ::protocol::request (x)
  {
    XSDE_UNUSED (x);
    this->amount_ = x.amount_;
  }

  withdraw& withdraw::
  operator= (const withdraw& x)
  {
    XSDE_UNUSED (x);
    static_cast< ::protocol::request& > (*this) = x;
    this->amount_ = x.amount_;
    return *this;
  }

  // deposit
  //

  deposit::
  deposit ()
  {
  }

  deposit::
  ~deposit ()
  {
  }

  deposit::
  deposit (const deposit& x)
  : ::protocol::request (x)
  {
    XSDE_UNUSED (x);
    this->amount_ = x.amount_;
  }

  deposit& deposit::
  operator= (const deposit& x)
  {
    XSDE_UNUSED (x);
    static_cast< ::protocol::request& > (*this) = x;
    this->amount_ = x.amount_;
    return *this;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

