// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "people-pimpl.hxx"

#include <xsde/cxx/parser/validating/string-common.hxx>

// gender_pimpl
//

gender_pimpl::
gender_pimpl ()
: gender_pskel (0)
{
}

void gender_pimpl::
pre ()
{
  this->gender_pimpl_state_.str_.clear ();
}

void gender_pimpl::
_characters (const ::xsde::cxx::ro_string& s)
{
  if (this->_facets ().whitespace_ == 2 &&
      this->gender_pimpl_state_.str_.size () == 0)
  {
    ::xsde::cxx::ro_string tmp (s.data (), s.size ());

    if (::xsde::cxx::trim_left (tmp) != 0)
    {
      this->gender_pimpl_state_.str_ += tmp;
    }
  }
  else
    this->gender_pimpl_state_.str_ += s;
}

void gender_pimpl::
_post ()
{
  ::xsde::cxx::parser::validating::string_common::validate_facets (
    this->gender_pimpl_state_.str_,
    this->_facets (),
    this->_context ());
}

::gender gender_pimpl::
post_gender ()
{
  ::gender::value_type v =
  static_cast< ::gender::value_type > (0);
  const char* s = this->gender_pimpl_state_.str_.c_str ();

  if (strcmp (s, "male") == 0)
    v = ::gender::male;
  else if (strcmp (s, "female") == 0)
    v = ::gender::female;

  ::gender r (v);
  return r;
}

// person_pimpl
//

void person_pimpl::
pre ()
{
  this->person_pimpl_state_.person_ = ::person ();
}

void person_pimpl::
first_name (const ::std::string& x)
{
  this->person_pimpl_state_.person_.first_name (x);
}

void person_pimpl::
last_name (const ::std::string& x)
{
  this->person_pimpl_state_.person_.last_name (x);
}

void person_pimpl::
gender (const ::gender& x)
{
  this->person_pimpl_state_.person_.gender (x);
}

void person_pimpl::
age (unsigned short x)
{
  this->person_pimpl_state_.person_.age (x);
}

::person person_pimpl::
post_person ()
{
  return this->person_pimpl_state_.person_;
}

// people_base_pimpl
//

people_base_pimpl::
people_base_pimpl (bool b)
{
  this->people_base_pimpl_base_ = b;
  this->people_base_pimpl_state_.people_ = 0;
}

people_base_pimpl::
~people_base_pimpl ()
{
  if (!this->people_base_pimpl_base_ && this->people_base_pimpl_state_.people_)
    delete this->people_base_pimpl_state_.people_;
}

void people_base_pimpl::
_reset ()
{
  people_pskel::_reset ();

  if (!this->people_base_pimpl_base_ && this->people_base_pimpl_state_.people_)
  {
    delete this->people_base_pimpl_state_.people_;
    this->people_base_pimpl_state_.people_ = 0;
  }
}

void people_base_pimpl::
pre_impl (::people* x)
{
  this->people_base_pimpl_state_.people_ = x;
}

void people_base_pimpl::
pre ()
{
  ::people* x = new ::people;
  this->pre_impl (x);
}

void people_base_pimpl::
person (const ::person& x)
{
  this->people_base_pimpl_state_.people_->person ().push_back (x);
}

::people* people_base_pimpl::
post_people ()
{
  ::people* r = this->people_base_pimpl_state_.people_;
  this->people_base_pimpl_state_.people_ = 0;
  return r;
}

// people_paggr
//

people_paggr::
people_paggr ()
{
  this->person_p_.parsers (this->string_p_,
                           this->string_p_,
                           this->gender_p_,
                           this->unsigned_short_p_);

  this->people_p_.parsers (this->person_p_);
}

const char* people_paggr::
root_name ()
{
  return "people";
}

const char* people_paggr::
root_namespace ()
{
  return "";
}

// Begin epilogue.
//
//
// End epilogue.

