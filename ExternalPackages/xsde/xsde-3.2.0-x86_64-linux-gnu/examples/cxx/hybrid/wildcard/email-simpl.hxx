// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef EMAIL_SIMPL_HXX
#define EMAIL_SIMPL_HXX

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_SAGGR
#  define XSDE_OMIT_SAGGR
#  define EMAIL_SIMPL_HXX_CLEAR_OMIT_SAGGR
#endif

#include "email-sskel.hxx"

#include <xsde/cxx/stack.hxx>

namespace email
{
  class binary_simpl: public binary_sskel
  {
    public:
    binary_simpl ();

    virtual void
    pre (const ::email::binary&);

    // Attributes.
    //
    virtual ::std::string
    name ();

    virtual ::std::string
    mime ();

    public:
    ::xml_schema::base64_binary_simpl base_impl_;

    public:
    struct binary_simpl_state
    {
      const ::email::binary* binary_;
    };

    binary_simpl_state binary_simpl_state_;
  };

  class envelope_base_simpl: public envelope_sskel
  {
    public:
    virtual void
    pre (const ::email::envelope&);

    // Elements.
    //
    virtual ::std::string
    to ();

    virtual ::std::string
    from ();

    virtual ::std::string
    subject ();

    public:
    struct envelope_base_simpl_state
    {
      const ::email::envelope* envelope_;
    };

    envelope_base_simpl_state envelope_base_simpl_state_;
  };
}

#include "envelope-simpl.hxx"

namespace email
{
}

#ifdef EMAIL_SIMPL_HXX_CLEAR_OMIT_SAGGR
#  undef XSDE_OMIT_SAGGR
#endif

#ifndef XSDE_OMIT_SAGGR

namespace email
{
  // Serializer aggregate for the text element.
  //
  class text_saggr
  {
    public:
    text_saggr ();

    void
    pre (const ::std::string& x)
    {
      this->string_s_.pre (x);
    }

    void
    post ()
    {
      this->string_s_.post ();
    }

    ::xml_schema::string_simpl&
    root_serializer ()
    {
      return this->string_s_;
    }

    static const char*
    root_name ();

    static const char*
    root_namespace ();

    void
    reset ()
    {
      this->string_s_._reset ();
    }

    public:
    ::xml_schema::string_simpl string_s_;
  };

  // Serializer aggregate for the binary element.
  //
  class binary_saggr
  {
    public:
    binary_saggr ();

    void
    pre (const ::email::binary& x)
    {
      this->binary_s_.pre (x);
    }

    void
    post ()
    {
      this->binary_s_.post ();
    }

    ::email::binary_simpl&
    root_serializer ()
    {
      return this->binary_s_;
    }

    static const char*
    root_name ();

    static const char*
    root_namespace ();

    void
    reset ()
    {
      this->binary_s_._reset ();
    }

    public:
    ::xml_schema::string_simpl string_s_;
    ::email::binary_simpl binary_s_;
  };

  // Serializer aggregate for the message element.
  //
  class message_saggr
  {
    public:
    message_saggr ();

    void
    pre (const ::email::envelope& x)
    {
      this->envelope_s_.pre (x);
    }

    void
    post ()
    {
      this->envelope_s_.post ();
    }

    ::email::envelope_simpl&
    root_serializer ()
    {
      return this->envelope_s_;
    }

    static const char*
    root_name ();

    static const char*
    root_namespace ();

    void
    reset ()
    {
      this->envelope_s_._reset ();
    }

    public:
    ::xml_schema::string_simpl string_s_;
    ::email::envelope_simpl envelope_s_;
  };
}

#endif // XSDE_OMIT_SAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // EMAIL_SIMPL_HXX
