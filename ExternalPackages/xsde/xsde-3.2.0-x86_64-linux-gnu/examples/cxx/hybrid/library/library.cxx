// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "library.hxx"

#include <stdlib.h>
#include <new>

namespace library
{
  // isbn
  //

  isbn::
  isbn ()
  {
  }

  // title
  //

  title::
  title ()
  {
    this->lang_present_ = false;
  }

  title::
  ~title ()
  {
  }

  title::
  title (const title& x)
  : ::std::string (x)
  {
    XSDE_UNUSED (x);
    this->lang_present_ = x.lang_present_;
    if (this->lang_present_)
      this->lang_ = x.lang_;
  }

  title& title::
  operator= (const title& x)
  {
    XSDE_UNUSED (x);
    static_cast< ::std::string& > (*this) = x;
    this->lang_present_ = x.lang_present_;
    if (this->lang_present_)
      this->lang_ = x.lang_;
    return *this;
  }

  // genre
  //

  static const char* _xsde_genre_enumerators_[] = 
  {
    "romance",
    "fiction",
    "horror",
    "history",
    "philosophy"
  };

  const char* genre::
  string () const
  {
    return _xsde_genre_enumerators_[value_];
  }

  // author
  //

  author::
  author ()
  {
    this->died_present_ = false;
  }

  author::
  ~author ()
  {
  }

  author::
  author (const author& x)
  {
    XSDE_UNUSED (x);
    this->name_ = x.name_;
    this->born_ = x.born_;
    this->died_present_ = x.died_present_;
    if (this->died_present_)
      this->died_ = x.died_;
  }

  author& author::
  operator= (const author& x)
  {
    XSDE_UNUSED (x);
    this->name_ = x.name_;
    this->born_ = x.born_;
    this->died_present_ = x.died_present_;
    if (this->died_present_)
      this->died_ = x.died_;
    return *this;
  }

  // book
  //

  book::
  book ()
  {
    this->available_ = available_default_value ();
  }

  book::
  ~book ()
  {
  }

  bool book::
  available_default_value ()
  {
    return true;
  }

  // catalog
  //

  catalog::
  catalog ()
  {
  }

  catalog::
  ~catalog ()
  {
  }
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

