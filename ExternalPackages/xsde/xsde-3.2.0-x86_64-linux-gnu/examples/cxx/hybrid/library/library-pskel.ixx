// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

namespace library
{
  // isbn_pskel
  //

  inline
  isbn_pskel::
  isbn_pskel (::xml_schema::unsigned_int_pskel* tiein)
  : ::xml_schema::unsigned_int_pskel (tiein, 0),
    isbn_impl_ (0)
  {
  }

  inline
  isbn_pskel::
  isbn_pskel (isbn_pskel* impl, void*)
  : ::xml_schema::unsigned_int_pskel (impl, 0),
    isbn_impl_ (impl)
  {
  }

  // title_pskel
  //

  inline
  void title_pskel::
  lang_parser (::xml_schema::string_pskel& p)
  {
    this->lang_parser_ = &p;
  }

  inline
  void title_pskel::
  parsers (::xml_schema::string_pskel& lang)
  {
    this->lang_parser_ = &lang;
  }

  inline
  title_pskel::
  title_pskel (::xml_schema::string_pskel* tiein)
  : ::xml_schema::string_pskel (tiein, 0),
    title_impl_ (0),
    lang_parser_ (0)
  {
  }

  inline
  title_pskel::
  title_pskel (title_pskel* impl, void*)
  : ::xml_schema::string_pskel (impl, 0),
    title_impl_ (impl),
    lang_parser_ (0)
  {
  }

  // genre_pskel
  //

  inline
  genre_pskel::
  genre_pskel (::xml_schema::string_pskel* tiein)
  : ::xml_schema::string_pskel (tiein, 0),
    genre_impl_ (0)
  {
    this->_enumeration_facet (_xsde_genre_pskel_enums_, 5UL);
  }

  inline
  genre_pskel::
  genre_pskel (genre_pskel* impl, void*)
  : ::xml_schema::string_pskel (impl, 0),
    genre_impl_ (impl)
  {
    this->_enumeration_facet (_xsde_genre_pskel_enums_, 5UL);
  }

  // author_pskel
  //

  inline
  void author_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  inline
  void author_pskel::
  born_parser (::xml_schema::date_pskel& p)
  {
    this->born_parser_ = &p;
  }

  inline
  void author_pskel::
  died_parser (::xml_schema::date_pskel& p)
  {
    this->died_parser_ = &p;
  }

  inline
  void author_pskel::
  parsers (::xml_schema::string_pskel& name,
           ::xml_schema::date_pskel& born,
           ::xml_schema::date_pskel& died)
  {
    this->name_parser_ = &name;
    this->born_parser_ = &born;
    this->died_parser_ = &died;
  }

  inline
  author_pskel::
  author_pskel ()
  : author_impl_ (0),
    name_parser_ (0),
    born_parser_ (0),
    died_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  author_pskel::
  author_pskel (author_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    author_impl_ (impl),
    name_parser_ (0),
    born_parser_ (0),
    died_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // book_pskel
  //

  inline
  void book_pskel::
  available_parser (::xml_schema::boolean_pskel& p)
  {
    this->available_parser_ = &p;
  }

  inline
  void book_pskel::
  isbn_parser (::library::isbn_pskel& p)
  {
    this->isbn_parser_ = &p;
  }

  inline
  void book_pskel::
  title_parser (::library::title_pskel& p)
  {
    this->title_parser_ = &p;
  }

  inline
  void book_pskel::
  genre_parser (::library::genre_pskel& p)
  {
    this->genre_parser_ = &p;
  }

  inline
  void book_pskel::
  author_parser (::library::author_pskel& p)
  {
    this->author_parser_ = &p;
  }

  inline
  void book_pskel::
  parsers (::xml_schema::boolean_pskel& available,
           ::library::isbn_pskel& isbn,
           ::library::title_pskel& title,
           ::library::genre_pskel& genre,
           ::library::author_pskel& author)
  {
    this->available_parser_ = &available;
    this->isbn_parser_ = &isbn;
    this->title_parser_ = &title;
    this->genre_parser_ = &genre;
    this->author_parser_ = &author;
  }

  inline
  book_pskel::
  book_pskel ()
  : book_impl_ (0),
    available_parser_ (0),
    isbn_parser_ (0),
    title_parser_ (0),
    genre_parser_ (0),
    author_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  book_pskel::
  book_pskel (book_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    book_impl_ (impl),
    available_parser_ (0),
    isbn_parser_ (0),
    title_parser_ (0),
    genre_parser_ (0),
    author_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // catalog_pskel
  //

  inline
  void catalog_pskel::
  book_parser (::library::book_pskel& p)
  {
    this->book_parser_ = &p;
  }

  inline
  void catalog_pskel::
  parsers (::library::book_pskel& book)
  {
    this->book_parser_ = &book;
  }

  inline
  catalog_pskel::
  catalog_pskel ()
  : catalog_impl_ (0),
    book_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  inline
  catalog_pskel::
  catalog_pskel (catalog_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    catalog_impl_ (impl),
    book_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

// Begin epilogue.
//
//
// End epilogue.

