// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "library-sskel.hxx"

#include <assert.h>

namespace library
{
  // isbn_sskel
  //

  void isbn_sskel::
  pre (unsigned int x)
  {
    assert (this->unsigned_int_impl_);
    this->unsigned_int_impl_->pre (x);
  }

  // title_sskel
  //

  bool title_sskel::
  lang_present ()
  {
    return this->title_impl_ ? this->title_impl_->lang_present () : false;
  }

  void title_sskel::
  _reset ()
  {
    typedef ::xml_schema::string_sskel base;
    base::_reset ();

    if (this->lang_serializer_)
      this->lang_serializer_->_reset ();
  }

  void title_sskel::
  pre (const ::std::string& x)
  {
    assert (this->string_impl_);
    this->string_impl_->pre (x);
  }

  // genre_sskel
  //

  void genre_sskel::
  pre (const ::std::string& x)
  {
    assert (this->string_impl_);
    this->string_impl_->pre (x);
  }

  const char* const genre_sskel::_xsde_genre_sskel_enums_[5UL] = 
  {
    "fiction",
    "history",
    "horror",
    "philosophy",
    "romance"
  };

  // author_sskel
  //

  bool author_sskel::
  died_present ()
  {
    return this->author_impl_ ? this->author_impl_->died_present () : false;
  }

  void author_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->name_serializer_)
      this->name_serializer_->_reset ();

    if (this->born_serializer_)
      this->born_serializer_->_reset ();

    if (this->died_serializer_)
      this->died_serializer_->_reset ();

    this->resetting_ = false;
  }

  // book_sskel
  //

  bool book_sskel::
  available_present ()
  {
    return this->book_impl_ ? this->book_impl_->available_present () : false;
  }

  void book_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    if (this->available_serializer_)
      this->available_serializer_->_reset ();

    this->resetting_ = true;

    if (this->isbn_serializer_)
      this->isbn_serializer_->_reset ();

    if (this->title_serializer_)
      this->title_serializer_->_reset ();

    if (this->genre_serializer_)
      this->genre_serializer_->_reset ();

    if (this->author_serializer_)
      this->author_serializer_->_reset ();

    this->resetting_ = false;
  }

  // catalog_sskel
  //

  void catalog_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->book_serializer_)
      this->book_serializer_->_reset ();

    this->resetting_ = false;
  }
}

namespace library
{
  // Element validation and serialization for author_sskel.
  //
  void author_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // name
    //
    {
      const ::std::string& r = this->name ();

      if (this->name_serializer_)
      {
        this->name_serializer_->pre (r);
        this->_start_element ("name");
        this->name_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->name_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->name_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->name_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->name_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    // born
    //
    {
      const ::xml_schema::date& r = this->born ();

      if (this->born_serializer_)
      {
        this->born_serializer_->pre (r);
        this->_start_element ("born");
        this->born_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->born_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->born_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->born_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->born_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    // died
    //
    if (this->died_present ())
    {
      const ::xml_schema::date& r = this->died ();

      if (this->died_serializer_)
      {
        this->died_serializer_->pre (r);
        this->_start_element ("died");
        this->died_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->died_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->died_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->died_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->died_serializer_->post ();
      }
    }
  }

  // Element validation and serialization for book_sskel.
  //
  void book_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // isbn
    //
    {
      const ::library::isbn& r = this->isbn ();

      if (this->isbn_serializer_)
      {
        this->isbn_serializer_->pre (r);
        this->_start_element ("isbn");
        this->isbn_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->isbn_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->isbn_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->isbn_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->isbn_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    // title
    //
    {
      const ::library::title& r = this->title ();

      if (this->title_serializer_)
      {
        this->title_serializer_->pre (r);
        this->_start_element ("title");
        this->title_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->title_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->title_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->title_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->title_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    // genre
    //
    {
      const ::library::genre& r = this->genre ();

      if (this->genre_serializer_)
      {
        this->genre_serializer_->pre (r);
        this->_start_element ("genre");
        this->genre_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->genre_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->genre_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->genre_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->genre_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    // author
    //
    {
      size_t i = 0;
      for (; this->author_next (); ++i)
      {
        const ::library::author& r = this->author ();

        if (this->author_serializer_)
        {
          this->author_serializer_->pre (r);
          this->_start_element ("author");
          this->author_serializer_->_pre_impl (ctx);

          if (ctx.error_type ())
            return;

          this->author_serializer_->_serialize_attributes ();

          if (ctx.error_type ())
            return;

          this->author_serializer_->_serialize_content ();

          if (ctx.error_type ())
            return;

          this->author_serializer_->_post_impl ();

          if (ctx.error_type ())
            return;

          this->_end_element ();
          this->author_serializer_->post ();
        }
        else
        {
          this->_schema_error (::xsde::cxx::schema_error::expected_element);
          return;
        }
      }

      if (i < 1UL)
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }
  }

  // Element validation and serialization for catalog_sskel.
  //
  void catalog_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // book
    //
    {
      size_t i = 0;
      for (; this->book_next (); ++i)
      {
        const ::library::book& r = this->book ();

        if (this->book_serializer_)
        {
          this->book_serializer_->pre (r);
          this->_start_element ("book");
          this->book_serializer_->_pre_impl (ctx);

          if (ctx.error_type ())
            return;

          this->book_serializer_->_serialize_attributes ();

          if (ctx.error_type ())
            return;

          this->book_serializer_->_serialize_content ();

          if (ctx.error_type ())
            return;

          this->book_serializer_->_post_impl ();

          if (ctx.error_type ())
            return;

          this->_end_element ();
          this->book_serializer_->post ();
        }
        else
        {
          this->_schema_error (::xsde::cxx::schema_error::expected_element);
          return;
        }
      }

      if (i < 1UL)
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }
  }
}

namespace library
{
  // Attribute validation and serialization for title_sskel.
  //
  void title_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    typedef ::xml_schema::string_sskel base;
    base::_serialize_attributes ();

    if (ctx.error_type ())
      return;

    // lang
    //
    if (this->lang_present ())
    {
      const ::std::string& r = this->lang ();

      if (this->lang_serializer_)
      {
        this->lang_serializer_->pre (r);
        this->_start_attribute ("lang");
        this->lang_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->lang_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->lang_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->lang_serializer_->post ();
      }
    }
  }

  // Attribute validation and serialization for book_sskel.
  //
  void book_sskel::
  _serialize_attributes ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // available
    //
    if (this->available_present ())
    {
      bool r = this->available ();

      if (this->available_serializer_)
      {
        this->available_serializer_->pre (r);
        this->_start_attribute ("available");
        this->available_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->available_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->available_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_attribute ();
        this->available_serializer_->post ();
      }
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

