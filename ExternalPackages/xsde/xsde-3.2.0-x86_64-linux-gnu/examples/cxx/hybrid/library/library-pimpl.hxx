// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef LIBRARY_PIMPL_HXX
#define LIBRARY_PIMPL_HXX

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_PAGGR
#  define XSDE_OMIT_PAGGR
#  define LIBRARY_PIMPL_HXX_CLEAR_OMIT_PAGGR
#endif

#include "library-pskel.hxx"

#include <xsde/cxx/stack.hxx>

namespace library
{
  class isbn_pimpl: public isbn_pskel
  {
    public:
    isbn_pimpl ();

    virtual void
    pre ();

    virtual ::library::isbn
    post_isbn ();

    public:
    ::xml_schema::unsigned_int_pimpl base_impl_;

    public:
    struct isbn_pimpl_state
    {
      ::library::isbn isbn_;
    };

    isbn_pimpl_state isbn_pimpl_state_;
  };

  class title_pimpl: public title_pskel
  {
    public:
    title_pimpl ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    lang (const ::std::string&);

    virtual ::library::title
    post_title ();

    public:
    ::xml_schema::string_pimpl base_impl_;

    public:
    struct title_pimpl_state
    {
      ::library::title title_;
    };

    title_pimpl_state title_pimpl_state_;
  };

  class genre_pimpl: public genre_pskel
  {
    public:
    genre_pimpl ();

    virtual void
    pre ();

    virtual void
    _characters (const ::xsde::cxx::ro_string&);

    virtual void
    _post ();

    virtual ::library::genre
    post_genre ();

    public:
    struct genre_pimpl_state
    {
      ::std::string str_;
    };

    genre_pimpl_state genre_pimpl_state_;
  };

  class author_pimpl: public author_pskel
  {
    public:
    virtual void
    pre ();

    // Elements.
    //
    virtual void
    name (const ::std::string&);

    virtual void
    born (const ::xml_schema::date&);

    virtual void
    died (const ::xml_schema::date&);

    virtual ::library::author
    post_author ();

    public:
    struct author_pimpl_state
    {
      ::library::author author_;
    };

    author_pimpl_state author_pimpl_state_;
  };

  class book_pimpl: public book_pskel
  {
    public:
    book_pimpl (bool = false);

    ~book_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Attributes.
    //
    virtual void
    available (bool);

    // Elements.
    //
    virtual void
    isbn (const ::library::isbn&);

    virtual void
    title (const ::library::title&);

    virtual void
    genre (const ::library::genre&);

    virtual void
    author (const ::library::author&);

    virtual ::library::book*
    post_book ();

    public:
    void
    pre_impl (::library::book*);

    public:
    struct book_pimpl_state
    {
      ::library::book* book_;
    };

    book_pimpl_state book_pimpl_state_;
    bool book_pimpl_base_;
  };

  class catalog_pimpl: public catalog_pskel
  {
    public:
    catalog_pimpl (bool = false);

    ~catalog_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    book (::library::book*);

    virtual ::library::catalog*
    post_catalog ();

    public:
    void
    pre_impl (::library::catalog*);

    public:
    struct catalog_pimpl_state
    {
      ::library::catalog* catalog_;
    };

    catalog_pimpl_state catalog_pimpl_state_;
    bool catalog_pimpl_base_;
  };
}

#ifdef LIBRARY_PIMPL_HXX_CLEAR_OMIT_PAGGR
#  undef XSDE_OMIT_PAGGR
#endif

#ifndef XSDE_OMIT_PAGGR

namespace library
{
  // Parser aggregate for the catalog element.
  //
  class catalog_paggr
  {
    public:
    catalog_paggr ();

    void
    pre ()
    {
      this->catalog_p_.pre ();
    }

    ::library::catalog*
    post ()
    {
      return this->catalog_p_.post_catalog ();
    }

    ::library::catalog_pimpl&
    root_parser ()
    {
      return this->catalog_p_;
    }

    static const char*
    root_name ();

    static const char*
    root_namespace ();

    void
    reset ()
    {
      this->catalog_p_._reset ();
    }

    public:
    ::xml_schema::boolean_pimpl boolean_p_;
    ::xml_schema::string_pimpl string_p_;
    ::xml_schema::date_pimpl date_p_;
    ::library::title_pimpl title_p_;
    ::library::isbn_pimpl isbn_p_;
    ::library::genre_pimpl genre_p_;
    ::library::author_pimpl author_p_;
    ::library::book_pimpl book_p_;
    ::library::catalog_pimpl catalog_p_;
  };
}

#endif // XSDE_OMIT_PAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // LIBRARY_PIMPL_HXX
