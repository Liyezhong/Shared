// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef LIBRARY_SIMPL_HXX
#define LIBRARY_SIMPL_HXX

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_SAGGR
#  define XSDE_OMIT_SAGGR
#  define LIBRARY_SIMPL_HXX_CLEAR_OMIT_SAGGR
#endif

#include "library-sskel.hxx"

#include <xsde/cxx/stack.hxx>

namespace library
{
  class isbn_simpl: public isbn_sskel
  {
    public:
    isbn_simpl ();

    virtual void
    pre (const ::library::isbn&);

    public:
    ::xml_schema::unsigned_int_simpl base_impl_;
  };

  class title_simpl: public title_sskel
  {
    public:
    title_simpl ();

    virtual void
    pre (const ::library::title&);

    // Attributes.
    //
    virtual bool
    lang_present ();

    virtual ::std::string
    lang ();

    public:
    ::xml_schema::string_simpl base_impl_;

    public:
    struct title_simpl_state
    {
      const ::library::title* title_;
    };

    title_simpl_state title_simpl_state_;
  };

  class genre_simpl: public genre_sskel
  {
    public:
    genre_simpl ();

    virtual void
    pre (const ::library::genre&);

    virtual void
    _serialize_content ();

    public:
    const ::library::genre* genre_simpl_state_;
  };

  class author_simpl: public author_sskel
  {
    public:
    virtual void
    pre (const ::library::author&);

    // Elements.
    //
    virtual ::std::string
    name ();

    virtual ::xml_schema::date
    born ();

    virtual bool
    died_present ();

    virtual ::xml_schema::date
    died ();

    public:
    struct author_simpl_state
    {
      const ::library::author* author_;
    };

    author_simpl_state author_simpl_state_;
  };

  class book_simpl: public book_sskel
  {
    public:
    virtual void
    pre (const ::library::book&);

    // Attributes.
    //
    virtual bool
    available_present ();

    virtual bool
    available ();

    // Elements.
    //
    virtual const ::library::isbn&
    isbn ();

    virtual const ::library::title&
    title ();

    virtual const ::library::genre&
    genre ();

    virtual bool
    author_next ();

    virtual const ::library::author&
    author ();

    public:
    struct book_simpl_state
    {
      const ::library::book* book_;
      ::library::book::author_const_iterator author_;
      ::library::book::author_const_iterator author_end_;
    };

    book_simpl_state book_simpl_state_;
  };

  class catalog_simpl: public catalog_sskel
  {
    public:
    virtual void
    pre (const ::library::catalog&);

    // Elements.
    //
    virtual bool
    book_next ();

    virtual const ::library::book&
    book ();

    public:
    struct catalog_simpl_state
    {
      const ::library::catalog* catalog_;
      ::library::catalog::book_const_iterator book_;
      ::library::catalog::book_const_iterator book_end_;
    };

    catalog_simpl_state catalog_simpl_state_;
  };
}

#ifdef LIBRARY_SIMPL_HXX_CLEAR_OMIT_SAGGR
#  undef XSDE_OMIT_SAGGR
#endif

#ifndef XSDE_OMIT_SAGGR

namespace library
{
  // Serializer aggregate for the catalog element.
  //
  class catalog_saggr
  {
    public:
    catalog_saggr ();

    void
    pre (const ::library::catalog& x)
    {
      this->catalog_s_.pre (x);
    }

    void
    post ()
    {
      this->catalog_s_.post ();
    }

    ::library::catalog_simpl&
    root_serializer ()
    {
      return this->catalog_s_;
    }

    static const char*
    root_name ();

    static const char*
    root_namespace ();

    void
    reset ()
    {
      this->catalog_s_._reset ();
    }

    public:
    ::xml_schema::boolean_simpl boolean_s_;
    ::xml_schema::string_simpl string_s_;
    ::xml_schema::date_simpl date_s_;
    ::library::title_simpl title_s_;
    ::library::isbn_simpl isbn_s_;
    ::library::genre_simpl genre_s_;
    ::library::author_simpl author_s_;
    ::library::book_simpl book_s_;
    ::library::catalog_simpl catalog_s_;
  };
}

#endif // XSDE_OMIT_SAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // LIBRARY_SIMPL_HXX
