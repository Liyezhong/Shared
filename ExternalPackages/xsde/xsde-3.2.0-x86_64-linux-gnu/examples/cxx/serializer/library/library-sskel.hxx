// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef LIBRARY_SSKEL_HXX
#define LIBRARY_SSKEL_HXX

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_SERIALIZER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

// Forward declarations
//
namespace library
{
  class isbn_sskel;
  class title_sskel;
  class genre_sskel;
  class person_sskel;
  class author_sskel;
  class book_sskel;
  class catalog_sskel;
}


#include <string>

#include <xsde/cxx/serializer/xml-schema.hxx>

#include <xsde/cxx/serializer/exceptions.hxx>

#include <xsde/cxx/serializer/validating/serializer.hxx>
#include <xsde/cxx/serializer/validating/xml-schema-sskel.hxx>
#include <xsde/cxx/serializer/validating/xml-schema-simpl.hxx>

#include <xsde/cxx/serializer/genx/document.hxx>

#include "library.hxx"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base serializer skeletons.
  //
  using ::xsde::cxx::serializer::serializer_base;
  typedef ::xsde::cxx::serializer::validating::empty_content serializer_empty_content;
  typedef ::xsde::cxx::serializer::validating::simple_content serializer_simple_content;
  typedef ::xsde::cxx::serializer::validating::complex_content serializer_complex_content;

  // Serializer skeletons and implementations for the
  // XML Schema built-in types.
  //
  using ::xsde::cxx::serializer::validating::any_type_sskel;
  using ::xsde::cxx::serializer::validating::any_type_simpl;

  using ::xsde::cxx::serializer::validating::any_simple_type_sskel;
  using ::xsde::cxx::serializer::validating::any_simple_type_simpl;

  using ::xsde::cxx::serializer::validating::byte_sskel;
  using ::xsde::cxx::serializer::validating::byte_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_byte_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_byte_simpl;

  using ::xsde::cxx::serializer::validating::short_sskel;
  using ::xsde::cxx::serializer::validating::short_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_short_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_short_simpl;

  using ::xsde::cxx::serializer::validating::int_sskel;
  using ::xsde::cxx::serializer::validating::int_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_int_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_int_simpl;

  using ::xsde::cxx::serializer::validating::long_sskel;
  using ::xsde::cxx::serializer::validating::long_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_long_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_long_simpl;

  using ::xsde::cxx::serializer::validating::integer_sskel;
  using ::xsde::cxx::serializer::validating::integer_simpl;

  using ::xsde::cxx::serializer::validating::non_positive_integer_sskel;
  using ::xsde::cxx::serializer::validating::non_positive_integer_simpl;

  using ::xsde::cxx::serializer::validating::non_negative_integer_sskel;
  using ::xsde::cxx::serializer::validating::non_negative_integer_simpl;

  using ::xsde::cxx::serializer::validating::positive_integer_sskel;
  using ::xsde::cxx::serializer::validating::positive_integer_simpl;

  using ::xsde::cxx::serializer::validating::negative_integer_sskel;
  using ::xsde::cxx::serializer::validating::negative_integer_simpl;

  using ::xsde::cxx::serializer::validating::boolean_sskel;
  using ::xsde::cxx::serializer::validating::boolean_simpl;

  using ::xsde::cxx::serializer::validating::float_sskel;
  using ::xsde::cxx::serializer::validating::float_simpl;

  using ::xsde::cxx::serializer::validating::double_sskel;
  using ::xsde::cxx::serializer::validating::double_simpl;

  using ::xsde::cxx::serializer::validating::decimal_sskel;
  using ::xsde::cxx::serializer::validating::decimal_simpl;

  using ::xsde::cxx::serializer::validating::string_sskel;
  using ::xsde::cxx::serializer::validating::string_simpl;

  using ::xsde::cxx::serializer::validating::normalized_string_sskel;
  using ::xsde::cxx::serializer::validating::normalized_string_simpl;

  using ::xsde::cxx::serializer::validating::token_sskel;
  using ::xsde::cxx::serializer::validating::token_simpl;

  using ::xsde::cxx::serializer::validating::name_sskel;
  using ::xsde::cxx::serializer::validating::name_simpl;

  using ::xsde::cxx::serializer::validating::nmtoken_sskel;
  using ::xsde::cxx::serializer::validating::nmtoken_simpl;

  using ::xsde::cxx::serializer::validating::nmtokens_sskel;
  using ::xsde::cxx::serializer::validating::nmtokens_simpl;

  using ::xsde::cxx::serializer::validating::ncname_sskel;
  using ::xsde::cxx::serializer::validating::ncname_simpl;

  using ::xsde::cxx::serializer::validating::language_sskel;
  using ::xsde::cxx::serializer::validating::language_simpl;

  using ::xsde::cxx::serializer::validating::id_sskel;
  using ::xsde::cxx::serializer::validating::id_simpl;

  using ::xsde::cxx::serializer::validating::idref_sskel;
  using ::xsde::cxx::serializer::validating::idref_simpl;

  using ::xsde::cxx::serializer::validating::idrefs_sskel;
  using ::xsde::cxx::serializer::validating::idrefs_simpl;

  using ::xsde::cxx::serializer::validating::uri_sskel;
  using ::xsde::cxx::serializer::validating::uri_simpl;

  using ::xsde::cxx::serializer::validating::qname_sskel;
  using ::xsde::cxx::serializer::validating::qname_simpl;

  using ::xsde::cxx::serializer::validating::base64_binary_sskel;
  using ::xsde::cxx::serializer::validating::base64_binary_simpl;

  using ::xsde::cxx::serializer::validating::hex_binary_sskel;
  using ::xsde::cxx::serializer::validating::hex_binary_simpl;

  using ::xsde::cxx::serializer::validating::date_sskel;
  using ::xsde::cxx::serializer::validating::date_simpl;

  using ::xsde::cxx::serializer::validating::date_time_sskel;
  using ::xsde::cxx::serializer::validating::date_time_simpl;

  using ::xsde::cxx::serializer::validating::duration_sskel;
  using ::xsde::cxx::serializer::validating::duration_simpl;

  using ::xsde::cxx::serializer::validating::gday_sskel;
  using ::xsde::cxx::serializer::validating::gday_simpl;

  using ::xsde::cxx::serializer::validating::gmonth_sskel;
  using ::xsde::cxx::serializer::validating::gmonth_simpl;

  using ::xsde::cxx::serializer::validating::gmonth_day_sskel;
  using ::xsde::cxx::serializer::validating::gmonth_day_simpl;

  using ::xsde::cxx::serializer::validating::gyear_sskel;
  using ::xsde::cxx::serializer::validating::gyear_simpl;

  using ::xsde::cxx::serializer::validating::gyear_month_sskel;
  using ::xsde::cxx::serializer::validating::gyear_month_simpl;

  using ::xsde::cxx::serializer::validating::time_sskel;
  using ::xsde::cxx::serializer::validating::time_simpl;

  // Error codes.
  //
  typedef xsde::cxx::serializer::genx::xml_error serializer_xml_error;
  typedef xsde::cxx::schema_error serializer_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::serializer::exception serializer_exception;
  typedef xsde::cxx::serializer::xml serializer_xml;
  typedef xsde::cxx::serializer::schema serializer_schema;

  // Document serializer.
  //
  using xsde::cxx::serializer::genx::writer;
  using xsde::cxx::serializer::genx::document_simpl;

  // Serializer context.
  //
  typedef xsde::cxx::serializer::context serializer_context;
}

namespace library
{
  class isbn_sskel: public ::xml_schema::unsigned_int_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    // virtual void
    // pre (unsigned int) = 0;

    // virtual void
    // post ();

    // Constructor.
    //
    isbn_sskel (::xml_schema::unsigned_int_sskel* tiein);

    // Implementation.
    //
    public:
    virtual void
    pre (unsigned int);

    protected:
    isbn_sskel* isbn_impl_;
    isbn_sskel (isbn_sskel*, void*);
  };

  class title_sskel: public ::xml_schema::string_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const library::title&) = 0;

    // Attributes.
    //
    virtual bool
    lang_present ();

    virtual ::std::string
    lang () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* lang */);

    // Individual attribute serializers.
    //
    void
    lang_serializer (::xml_schema::string_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    title_sskel (::xml_schema::string_sskel* tiein);

    // Implementation.
    //
    public:
    virtual void
    pre (const ::std::string&);

    virtual void
    _serialize_attributes ();

    protected:
    title_sskel* title_impl_;
    title_sskel (title_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* lang_serializer_;
  };

  class genre_sskel: public ::xml_schema::string_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (library::genre) = 0;

    // virtual void
    // post ();

    // Constructor.
    //
    genre_sskel (::xml_schema::string_sskel* tiein);

    // Implementation details.
    //
    virtual void
    pre (const ::std::string&);

    protected:
    genre_sskel* genre_impl_;
    genre_sskel (genre_sskel*, void*);

    protected:
    static const char* const _xsde_genre_sskel_enums_[5UL];
  };

  class person_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const library::person&) = 0;

    // Elements.
    //
    virtual ::std::string
    name () = 0;

    virtual ::std::string
    born () = 0;

    virtual bool
    died_present ();

    virtual ::std::string
    died () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* name */,
                 ::xml_schema::string_sskel& /* born */,
                 ::xml_schema::string_sskel& /* died */);

    // Individual element serializers.
    //
    void
    name_serializer (::xml_schema::string_sskel&);

    void
    born_serializer (::xml_schema::string_sskel&);

    void
    died_serializer (::xml_schema::string_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    person_sskel ();

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    person_sskel* person_impl_;
    person_sskel (person_sskel*, void*);

    protected:
    ::xml_schema::string_sskel* name_serializer_;
    ::xml_schema::string_sskel* born_serializer_;
    ::xml_schema::string_sskel* died_serializer_;
  };

  class author_sskel: public ::library::person_sskel
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const library::author&) = 0;

    // Attributes.
    //
    virtual bool
    recommends_present ();

    virtual ::std::string
    recommends () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::string_sskel& /* name */,
                 ::xml_schema::string_sskel& /* born */,
                 ::xml_schema::string_sskel& /* died */,
                 ::xml_schema::idref_sskel& /* recommends */);

    // Individual attribute serializers.
    //
    void
    recommends_serializer (::xml_schema::idref_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    author_sskel (::library::person_sskel* tiein);

    // Implementation.
    //
    public:
    virtual void
    pre (const library::person&);

    virtual ::std::string
    name ();

    virtual ::std::string
    born ();

    virtual ::std::string
    died ();

    virtual void
    _serialize_attributes ();

    protected:
    author_sskel* author_impl_;
    author_sskel (author_sskel*, void*);

    protected:
    ::xml_schema::idref_sskel* recommends_serializer_;
  };

  class book_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const library::book&) = 0;

    // Attributes.
    //
    virtual bool
    available () = 0;

    virtual ::std::string
    id () = 0;

    // Elements.
    //
    virtual unsigned int
    isbn () = 0;

    virtual const library::title&
    title () = 0;

    virtual library::genre
    genre () = 0;

    virtual bool
    author_next () = 0;

    virtual const library::author&
    author () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::xml_schema::boolean_sskel& /* available */,
                 ::xml_schema::id_sskel& /* id */,
                 ::library::isbn_sskel& /* isbn */,
                 ::library::title_sskel& /* title */,
                 ::library::genre_sskel& /* genre */,
                 ::library::author_sskel& /* author */);

    // Individual attribute serializers.
    //
    void
    available_serializer (::xml_schema::boolean_sskel&);

    void
    id_serializer (::xml_schema::id_sskel&);

    // Individual element serializers.
    //
    void
    isbn_serializer (::library::isbn_sskel&);

    void
    title_serializer (::library::title_sskel&);

    void
    genre_serializer (::library::genre_sskel&);

    void
    author_serializer (::library::author_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    book_sskel ();

    // Implementation.
    //
    public:
    virtual void
    _serialize_attributes ();

    virtual void
    _serialize_content ();

    protected:
    book_sskel* book_impl_;
    book_sskel (book_sskel*, void*);

    protected:
    ::xml_schema::boolean_sskel* available_serializer_;
    ::xml_schema::id_sskel* id_serializer_;
    ::library::isbn_sskel* isbn_serializer_;
    ::library::title_sskel* title_serializer_;
    ::library::genre_sskel* genre_serializer_;
    ::library::author_sskel* author_serializer_;
  };

  class catalog_sskel: public ::xsde::cxx::serializer::validating::complex_content
  {
    public:
    // Serializer callbacks. Override them in your implementation.
    //

    virtual void
    pre (const library::catalog&) = 0;

    // Elements.
    //
    virtual bool
    book_next () = 0;

    virtual const library::book&
    book () = 0;

    // virtual void
    // post ();

    // Serializer construction API.
    //
    void
    serializers (::library::book_sskel& /* book */);

    // Individual element serializers.
    //
    void
    book_serializer (::library::book_sskel&);

    virtual void
    _reset ();

    // Constructor.
    //
    catalog_sskel ();

    // Implementation.
    //
    public:
    virtual void
    _serialize_content ();

    protected:
    catalog_sskel* catalog_impl_;
    catalog_sskel (catalog_sskel*, void*);

    protected:
    ::library::book_sskel* book_serializer_;
  };
}

#include "library-sskel.ixx"

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // LIBRARY_SSKEL_HXX
