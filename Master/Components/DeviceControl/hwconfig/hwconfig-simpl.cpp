// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "hwconfig-simpl.hpp"

#include <xsde/cxx/serializer/validating/string-common.hxx>

// can_interfaceType_simpl
//

can_interfaceType_simpl::
can_interfaceType_simpl ()
: can_interfaceType_sskel (&base_impl_)
{
}

void can_interfaceType_simpl::
pre (const ::can_interfaceType& x)
{
  this->base_impl_.pre (x);
  this->can_interfaceType_simpl_state_.can_interfaceType_ = &x;
}

bool can_interfaceType_simpl::
interface_present ()
{
  return this->can_interfaceType_simpl_state_.can_interfaceType_->interface_present ();
}

::std::string can_interfaceType_simpl::
interface ()
{
  return this->can_interfaceType_simpl_state_.can_interfaceType_->interface ();
}

// tcp_interfaceType_simpl
//

tcp_interfaceType_simpl::
tcp_interfaceType_simpl ()
: tcp_interfaceType_sskel (&base_impl_)
{
}

void tcp_interfaceType_simpl::
pre (const ::tcp_interfaceType& x)
{
  this->base_impl_.pre (x);
  this->tcp_interfaceType_simpl_state_.tcp_interfaceType_ = &x;
}

bool tcp_interfaceType_simpl::
usage_present ()
{
  return this->tcp_interfaceType_simpl_state_.tcp_interfaceType_->usage_present ();
}

signed char tcp_interfaceType_simpl::
usage ()
{
  return this->tcp_interfaceType_simpl_state_.tcp_interfaceType_->usage ();
}

// serial_numberType_simpl
//

serial_numberType_simpl::
serial_numberType_simpl ()
: serial_numberType_sskel (&base_impl_)
{
}

void serial_numberType_simpl::
pre (const ::serial_numberType& x)
{
  this->base_impl_.pre (x);
  this->serial_numberType_simpl_state_.serial_numberType_ = &x;
}

bool serial_numberType_simpl::
serialno_present ()
{
  return this->serial_numberType_simpl_state_.serial_numberType_->serialno_present ();
}

::std::string serial_numberType_simpl::
serialno ()
{
  return this->serial_numberType_simpl_state_.serial_numberType_->serialno ();
}

// deviceType_simpl
//

void deviceType_simpl::
pre (const ::deviceType& x)
{
  this->deviceType_simpl_state_.deviceType_ = &x;
}

bool deviceType_simpl::
name_present ()
{
  return this->deviceType_simpl_state_.deviceType_->name_present ();
}

::std::string deviceType_simpl::
name ()
{
  return this->deviceType_simpl_state_.deviceType_->name ();
}

bool deviceType_simpl::
id_present ()
{
  return this->deviceType_simpl_state_.deviceType_->id_present ();
}

::std::string deviceType_simpl::
id ()
{
  return this->deviceType_simpl_state_.deviceType_->id ();
}

bool deviceType_simpl::
type_present ()
{
  return this->deviceType_simpl_state_.deviceType_->type_present ();
}

::std::string deviceType_simpl::
type ()
{
  return this->deviceType_simpl_state_.deviceType_->type ();
}

bool deviceType_simpl::
dev_instanceID_present ()
{
  return this->deviceType_simpl_state_.deviceType_->dev_instanceID_present ();
}

::std::string deviceType_simpl::
dev_instanceID ()
{
  return this->deviceType_simpl_state_.deviceType_->dev_instanceID ();
}

bool deviceType_simpl::
optional_present ()
{
  return this->deviceType_simpl_state_.deviceType_->optional_present ();
}

signed char deviceType_simpl::
optional ()
{
  return this->deviceType_simpl_state_.deviceType_->optional ();
}

bool deviceType_simpl::
functionmodules_present ()
{
  return this->deviceType_simpl_state_.deviceType_->functionmodules_present ();
}

const ::functionmodulesType& deviceType_simpl::
functionmodules ()
{
  return this->deviceType_simpl_state_.deviceType_->functionmodules ();
}

// devicesType_simpl
//

void devicesType_simpl::
pre (const ::devicesType& x)
{
  this->devicesType_simpl_state_.devicesType_ = &x;
  this->devicesType_simpl_state_.device_ = 
  this->devicesType_simpl_state_.devicesType_->device ().begin ();
  this->devicesType_simpl_state_.device_end_ = 
  this->devicesType_simpl_state_.devicesType_->device ().end ();
}

bool devicesType_simpl::
device_next ()
{
  return this->devicesType_simpl_state_.device_ != 
  this->devicesType_simpl_state_.device_end_;
}

const ::deviceType& devicesType_simpl::
device ()
{
  return *this->devicesType_simpl_state_.device_++;
}

// retortType_simpl
//

void retortType_simpl::
pre (const ::retortType& x)
{
  this->retortType_simpl_state_.retortType_ = &x;
}

bool retortType_simpl::
name_present ()
{
  return this->retortType_simpl_state_.retortType_->name_present ();
}

::std::string retortType_simpl::
name ()
{
  return this->retortType_simpl_state_.retortType_->name ();
}

bool retortType_simpl::
index_present ()
{
  return this->retortType_simpl_state_.retortType_->index_present ();
}

signed char retortType_simpl::
index ()
{
  return this->retortType_simpl_state_.retortType_->index ();
}

const ::devicesType& retortType_simpl::
devices ()
{
  return this->retortType_simpl_state_.retortType_->devices ();
}

// retortsType_simpl
//

void retortsType_simpl::
pre (const ::retortsType& x)
{
  this->retortsType_simpl_state_.retortsType_ = &x;
  this->retortsType_simpl_state_.retort_ = 
  this->retortsType_simpl_state_.retortsType_->retort ().begin ();
  this->retortsType_simpl_state_.retort_end_ = 
  this->retortsType_simpl_state_.retortsType_->retort ().end ();
}

bool retortsType_simpl::
retort_next ()
{
  return this->retortsType_simpl_state_.retort_ != 
  this->retortsType_simpl_state_.retort_end_;
}

const ::retortType& retortsType_simpl::
retort ()
{
  return *this->retortsType_simpl_state_.retort_++;
}

// parameter_masterType_simpl
//

void parameter_masterType_simpl::
pre (const ::parameter_masterType& x)
{
  this->parameter_masterType_simpl_state_.parameter_masterType_ = &x;
}

bool parameter_masterType_simpl::
folded_present ()
{
  return this->parameter_masterType_simpl_state_.parameter_masterType_->folded_present ();
}

::std::string parameter_masterType_simpl::
folded ()
{
  return this->parameter_masterType_simpl_state_.parameter_masterType_->folded ();
}

const ::can_interfaceType& parameter_masterType_simpl::
can_interface ()
{
  return this->parameter_masterType_simpl_state_.parameter_masterType_->can_interface ();
}

const ::tcp_interfaceType& parameter_masterType_simpl::
tcp_interface ()
{
  return this->parameter_masterType_simpl_state_.parameter_masterType_->tcp_interface ();
}

signed char parameter_masterType_simpl::
nodetype ()
{
  return this->parameter_masterType_simpl_state_.parameter_masterType_->nodetype ();
}

signed char parameter_masterType_simpl::
nodeindex ()
{
  return this->parameter_masterType_simpl_state_.parameter_masterType_->nodeindex ();
}

const ::serial_numberType& parameter_masterType_simpl::
serial_number ()
{
  return this->parameter_masterType_simpl_state_.parameter_masterType_->serial_number ();
}

const ::retortsType& parameter_masterType_simpl::
retorts ()
{
  return this->parameter_masterType_simpl_state_.parameter_masterType_->retorts ();
}

// rotationType_simpl
//

rotationType_simpl::
rotationType_simpl ()
: rotationType_sskel (&base_impl_)
{
}

void rotationType_simpl::
pre (const ::rotationType& x)
{
  this->base_impl_.pre (x);
  this->rotationType_simpl_state_.rotationType_ = &x;
}

bool rotationType_simpl::
type_present ()
{
  return this->rotationType_simpl_state_.rotationType_->type_present ();
}

::std::string rotationType_simpl::
type ()
{
  return this->rotationType_simpl_state_.rotationType_->type ();
}

bool rotationType_simpl::
direction_present ()
{
  return this->rotationType_simpl_state_.rotationType_->direction_present ();
}

::std::string rotationType_simpl::
direction ()
{
  return this->rotationType_simpl_state_.rotationType_->direction ();
}

bool rotationType_simpl::
steps_revolution_present ()
{
  return this->rotationType_simpl_state_.rotationType_->steps_revolution_present ();
}

short rotationType_simpl::
steps_revolution ()
{
  return this->rotationType_simpl_state_.rotationType_->steps_revolution ();
}

bool rotationType_simpl::
position_min_present ()
{
  return this->rotationType_simpl_state_.rotationType_->position_min_present ();
}

short rotationType_simpl::
position_min ()
{
  return this->rotationType_simpl_state_.rotationType_->position_min ();
}

bool rotationType_simpl::
position_max_present ()
{
  return this->rotationType_simpl_state_.rotationType_->position_max_present ();
}

short rotationType_simpl::
position_max ()
{
  return this->rotationType_simpl_state_.rotationType_->position_max ();
}

bool rotationType_simpl::
speed_min_present ()
{
  return this->rotationType_simpl_state_.rotationType_->speed_min_present ();
}

signed char rotationType_simpl::
speed_min ()
{
  return this->rotationType_simpl_state_.rotationType_->speed_min ();
}

bool rotationType_simpl::
speed_max_present ()
{
  return this->rotationType_simpl_state_.rotationType_->speed_max_present ();
}

short rotationType_simpl::
speed_max ()
{
  return this->rotationType_simpl_state_.rotationType_->speed_max ();
}

bool rotationType_simpl::
run_cs_present ()
{
  return this->rotationType_simpl_state_.rotationType_->run_cs_present ();
}

signed char rotationType_simpl::
run_cs ()
{
  return this->rotationType_simpl_state_.rotationType_->run_cs ();
}

bool rotationType_simpl::
stop_cs_present ()
{
  return this->rotationType_simpl_state_.rotationType_->stop_cs_present ();
}

signed char rotationType_simpl::
stop_cs ()
{
  return this->rotationType_simpl_state_.rotationType_->stop_cs ();
}

bool rotationType_simpl::
stop_cs_delay_present ()
{
  return this->rotationType_simpl_state_.rotationType_->stop_cs_delay_present ();
}

short rotationType_simpl::
stop_cs_delay ()
{
  return this->rotationType_simpl_state_.rotationType_->stop_cs_delay ();
}

// reference_runType_simpl
//

reference_runType_simpl::
reference_runType_simpl ()
: reference_runType_sskel (&base_impl_)
{
}

void reference_runType_simpl::
pre (const ::reference_runType& x)
{
  this->base_impl_.pre (x);
  this->reference_runType_simpl_state_.reference_runType_ = &x;
}

bool reference_runType_simpl::
ref_position_present ()
{
  return this->reference_runType_simpl_state_.reference_runType_->ref_position_present ();
}

signed char reference_runType_simpl::
ref_position ()
{
  return this->reference_runType_simpl_state_.reference_runType_->ref_position ();
}

bool reference_runType_simpl::
max_distance_present ()
{
  return this->reference_runType_simpl_state_.reference_runType_->max_distance_present ();
}

short reference_runType_simpl::
max_distance ()
{
  return this->reference_runType_simpl_state_.reference_runType_->max_distance ();
}

bool reference_runType_simpl::
timeout_present ()
{
  return this->reference_runType_simpl_state_.reference_runType_->timeout_present ();
}

int reference_runType_simpl::
timeout ()
{
  return this->reference_runType_simpl_state_.reference_runType_->timeout ();
}

bool reference_runType_simpl::
reverse_distance_present ()
{
  return this->reference_runType_simpl_state_.reference_runType_->reverse_distance_present ();
}

signed char reference_runType_simpl::
reverse_distance ()
{
  return this->reference_runType_simpl_state_.reference_runType_->reverse_distance ();
}

bool reference_runType_simpl::
slow_speed_present ()
{
  return this->reference_runType_simpl_state_.reference_runType_->slow_speed_present ();
}

signed char reference_runType_simpl::
slow_speed ()
{
  return this->reference_runType_simpl_state_.reference_runType_->slow_speed ();
}

bool reference_runType_simpl::
high_speed_present ()
{
  return this->reference_runType_simpl_state_.reference_runType_->high_speed_present ();
}

short reference_runType_simpl::
high_speed ()
{
  return this->reference_runType_simpl_state_.reference_runType_->high_speed ();
}

bool reference_runType_simpl::
refpos_offset_present ()
{
  return this->reference_runType_simpl_state_.reference_runType_->refpos_offset_present ();
}

signed char reference_runType_simpl::
refpos_offset ()
{
  return this->reference_runType_simpl_state_.reference_runType_->refpos_offset ();
}

// encoderType_simpl
//

encoderType_simpl::
encoderType_simpl ()
: encoderType_sskel (&base_impl_)
{
}

void encoderType_simpl::
pre (const ::encoderType& x)
{
  this->base_impl_.pre (x);
  this->encoderType_simpl_state_.encoderType_ = &x;
}

bool encoderType_simpl::
type_present ()
{
  return this->encoderType_simpl_state_.encoderType_->type_present ();
}

signed char encoderType_simpl::
type ()
{
  return this->encoderType_simpl_state_.encoderType_->type ();
}

bool encoderType_simpl::
resolution_present ()
{
  return this->encoderType_simpl_state_.encoderType_->resolution_present ();
}

short encoderType_simpl::
resolution ()
{
  return this->encoderType_simpl_state_.encoderType_->resolution ();
}

bool encoderType_simpl::
rotation_present ()
{
  return this->encoderType_simpl_state_.encoderType_->rotation_present ();
}

::std::string encoderType_simpl::
rotation ()
{
  return this->encoderType_simpl_state_.encoderType_->rotation ();
}

// configurationType_simpl
//

configurationType_simpl::
configurationType_simpl ()
: configurationType_sskel (&base_impl_)
{
}

void configurationType_simpl::
pre (const ::configurationType& x)
{
  this->base_impl_.pre (x);
  this->configurationType_simpl_state_.configurationType_ = &x;
}

bool configurationType_simpl::
polarity_present ()
{
  return this->configurationType_simpl_state_.configurationType_->polarity_present ();
}

signed char configurationType_simpl::
polarity ()
{
  return this->configurationType_simpl_state_.configurationType_->polarity ();
}

bool configurationType_simpl::
sample_rate_present ()
{
  return this->configurationType_simpl_state_.configurationType_->sample_rate_present ();
}

signed char configurationType_simpl::
sample_rate ()
{
  return this->configurationType_simpl_state_.configurationType_->sample_rate ();
}

bool configurationType_simpl::
debounce_present ()
{
  return this->configurationType_simpl_state_.configurationType_->debounce_present ();
}

signed char configurationType_simpl::
debounce ()
{
  return this->configurationType_simpl_state_.configurationType_->debounce ();
}

bool configurationType_simpl::
temp_tolerance_present ()
{
  return this->configurationType_simpl_state_.configurationType_->temp_tolerance_present ();
}

signed char configurationType_simpl::
temp_tolerance ()
{
  return this->configurationType_simpl_state_.configurationType_->temp_tolerance ();
}

bool configurationType_simpl::
sampling_period_present ()
{
  return this->configurationType_simpl_state_.configurationType_->sampling_period_present ();
}

short configurationType_simpl::
sampling_period ()
{
  return this->configurationType_simpl_state_.configurationType_->sampling_period ();
}

bool configurationType_simpl::
fan_speed_present ()
{
  return this->configurationType_simpl_state_.configurationType_->fan_speed_present ();
}

short configurationType_simpl::
fan_speed ()
{
  return this->configurationType_simpl_state_.configurationType_->fan_speed ();
}

bool configurationType_simpl::
fan_threshold_present ()
{
  return this->configurationType_simpl_state_.configurationType_->fan_threshold_present ();
}

short configurationType_simpl::
fan_threshold ()
{
  return this->configurationType_simpl_state_.configurationType_->fan_threshold ();
}

bool configurationType_simpl::
current_gain_present ()
{
  return this->configurationType_simpl_state_.configurationType_->current_gain_present ();
}

short configurationType_simpl::
current_gain ()
{
  return this->configurationType_simpl_state_.configurationType_->current_gain ();
}

bool configurationType_simpl::
heater_current_present ()
{
  return this->configurationType_simpl_state_.configurationType_->heater_current_present ();
}

short configurationType_simpl::
heater_current ()
{
  return this->configurationType_simpl_state_.configurationType_->heater_current ();
}

bool configurationType_simpl::
heater_threshold_present ()
{
  return this->configurationType_simpl_state_.configurationType_->heater_threshold_present ();
}

short configurationType_simpl::
heater_threshold ()
{
  return this->configurationType_simpl_state_.configurationType_->heater_threshold ();
}

bool configurationType_simpl::
current_deviation_present ()
{
  return this->configurationType_simpl_state_.configurationType_->current_deviation_present ();
}

short configurationType_simpl::
current_deviation ()
{
  return this->configurationType_simpl_state_.configurationType_->current_deviation ();
}

bool configurationType_simpl::
current_min_230_serial_present ()
{
  return this->configurationType_simpl_state_.configurationType_->current_min_230_serial_present ();
}

short configurationType_simpl::
current_min_230_serial ()
{
  return this->configurationType_simpl_state_.configurationType_->current_min_230_serial ();
}

bool configurationType_simpl::
current_max_230_serial_present ()
{
  return this->configurationType_simpl_state_.configurationType_->current_max_230_serial_present ();
}

short configurationType_simpl::
current_max_230_serial ()
{
  return this->configurationType_simpl_state_.configurationType_->current_max_230_serial ();
}

bool configurationType_simpl::
current_min_100_serial_present ()
{
  return this->configurationType_simpl_state_.configurationType_->current_min_100_serial_present ();
}

short configurationType_simpl::
current_min_100_serial ()
{
  return this->configurationType_simpl_state_.configurationType_->current_min_100_serial ();
}

bool configurationType_simpl::
current_max_100_serial_present ()
{
  return this->configurationType_simpl_state_.configurationType_->current_max_100_serial_present ();
}

short configurationType_simpl::
current_max_100_serial ()
{
  return this->configurationType_simpl_state_.configurationType_->current_max_100_serial ();
}

bool configurationType_simpl::
current_min_100_parallel_present ()
{
  return this->configurationType_simpl_state_.configurationType_->current_min_100_parallel_present ();
}

short configurationType_simpl::
current_min_100_parallel ()
{
  return this->configurationType_simpl_state_.configurationType_->current_min_100_parallel ();
}

bool configurationType_simpl::
current_max_100_parallel_present ()
{
  return this->configurationType_simpl_state_.configurationType_->current_max_100_parallel_present ();
}

short configurationType_simpl::
current_max_100_parallel ()
{
  return this->configurationType_simpl_state_.configurationType_->current_max_100_parallel ();
}

bool configurationType_simpl::
pressure_tolerance_present ()
{
  return this->configurationType_simpl_state_.configurationType_->pressure_tolerance_present ();
}

signed char configurationType_simpl::
pressure_tolerance ()
{
  return this->configurationType_simpl_state_.configurationType_->pressure_tolerance ();
}

bool configurationType_simpl::
fan_current_gain_present ()
{
  return this->configurationType_simpl_state_.configurationType_->fan_current_gain_present ();
}

signed char configurationType_simpl::
fan_current_gain ()
{
  return this->configurationType_simpl_state_.configurationType_->fan_current_gain ();
}

bool configurationType_simpl::
fan_current_present ()
{
  return this->configurationType_simpl_state_.configurationType_->fan_current_present ();
}

short configurationType_simpl::
fan_current ()
{
  return this->configurationType_simpl_state_.configurationType_->fan_current ();
}

bool configurationType_simpl::
pump_current_present ()
{
  return this->configurationType_simpl_state_.configurationType_->pump_current_present ();
}

short configurationType_simpl::
pump_current ()
{
  return this->configurationType_simpl_state_.configurationType_->pump_current ();
}

bool configurationType_simpl::
pump_threshold_present ()
{
  return this->configurationType_simpl_state_.configurationType_->pump_threshold_present ();
}

short configurationType_simpl::
pump_threshold ()
{
  return this->configurationType_simpl_state_.configurationType_->pump_threshold ();
}

bool configurationType_simpl::
enabled_present ()
{
  return this->configurationType_simpl_state_.configurationType_->enabled_present ();
}

signed char configurationType_simpl::
enabled ()
{
  return this->configurationType_simpl_state_.configurationType_->enabled ();
}

bool configurationType_simpl::
inactiv_shutdown_present ()
{
  return this->configurationType_simpl_state_.configurationType_->inactiv_shutdown_present ();
}

signed char configurationType_simpl::
inactiv_shutdown ()
{
  return this->configurationType_simpl_state_.configurationType_->inactiv_shutdown ();
}

bool configurationType_simpl::
inactiv_emcy_present ()
{
  return this->configurationType_simpl_state_.configurationType_->inactiv_emcy_present ();
}

signed char configurationType_simpl::
inactiv_emcy ()
{
  return this->configurationType_simpl_state_.configurationType_->inactiv_emcy ();
}

bool configurationType_simpl::
outval_inactiv_present ()
{
  return this->configurationType_simpl_state_.configurationType_->outval_inactiv_present ();
}

signed char configurationType_simpl::
outval_inactiv ()
{
  return this->configurationType_simpl_state_.configurationType_->outval_inactiv ();
}

bool configurationType_simpl::
livetime_limit_present ()
{
  return this->configurationType_simpl_state_.configurationType_->livetime_limit_present ();
}

signed char configurationType_simpl::
livetime_limit ()
{
  return this->configurationType_simpl_state_.configurationType_->livetime_limit ();
}

bool configurationType_simpl::
timestamp_present ()
{
  return this->configurationType_simpl_state_.configurationType_->timestamp_present ();
}

signed char configurationType_simpl::
timestamp ()
{
  return this->configurationType_simpl_state_.configurationType_->timestamp ();
}

bool configurationType_simpl::
threshold_present ()
{
  return this->configurationType_simpl_state_.configurationType_->threshold_present ();
}

signed char configurationType_simpl::
threshold ()
{
  return this->configurationType_simpl_state_.configurationType_->threshold ();
}

bool configurationType_simpl::
interval_present ()
{
  return this->configurationType_simpl_state_.configurationType_->interval_present ();
}

signed char configurationType_simpl::
interval ()
{
  return this->configurationType_simpl_state_.configurationType_->interval ();
}

// limitswitchType_simpl
//

void limitswitchType_simpl::
pre (const ::limitswitchType& x)
{
  this->limitswitchType_simpl_state_.limitswitchType_ = &x;
}

bool limitswitchType_simpl::
index_present ()
{
  return this->limitswitchType_simpl_state_.limitswitchType_->index_present ();
}

signed char limitswitchType_simpl::
index ()
{
  return this->limitswitchType_simpl_state_.limitswitchType_->index ();
}

const ::configurationType& limitswitchType_simpl::
configuration ()
{
  return this->limitswitchType_simpl_state_.limitswitchType_->configuration ();
}

// position_codeType_simpl
//

position_codeType_simpl::
position_codeType_simpl ()
: position_codeType_sskel (&base_impl_)
{
}

void position_codeType_simpl::
pre (const ::position_codeType& x)
{
  this->base_impl_.pre (x);
  this->position_codeType_simpl_state_.position_codeType_ = &x;
}

bool position_codeType_simpl::
value_present ()
{
  return this->position_codeType_simpl_state_.position_codeType_->value_present ();
}

signed char position_codeType_simpl::
value ()
{
  return this->position_codeType_simpl_state_.position_codeType_->value ();
}

bool position_codeType_simpl::
stop_present ()
{
  return this->position_codeType_simpl_state_.position_codeType_->stop_present ();
}

signed char position_codeType_simpl::
stop ()
{
  return this->position_codeType_simpl_state_.position_codeType_->stop ();
}

bool position_codeType_simpl::
stop_dir_present ()
{
  return this->position_codeType_simpl_state_.position_codeType_->stop_dir_present ();
}

::std::string position_codeType_simpl::
stop_dir ()
{
  return this->position_codeType_simpl_state_.position_codeType_->stop_dir ();
}

bool position_codeType_simpl::
position_present ()
{
  return this->position_codeType_simpl_state_.position_codeType_->position_present ();
}

signed char position_codeType_simpl::
position ()
{
  return this->position_codeType_simpl_state_.position_codeType_->position ();
}

bool position_codeType_simpl::
width_present ()
{
  return this->position_codeType_simpl_state_.position_codeType_->width_present ();
}

signed char position_codeType_simpl::
width ()
{
  return this->position_codeType_simpl_state_.position_codeType_->width ();
}

bool position_codeType_simpl::
deviation_present ()
{
  return this->position_codeType_simpl_state_.position_codeType_->deviation_present ();
}

signed char position_codeType_simpl::
deviation ()
{
  return this->position_codeType_simpl_state_.position_codeType_->deviation ();
}

bool position_codeType_simpl::
dir_check_present ()
{
  return this->position_codeType_simpl_state_.position_codeType_->dir_check_present ();
}

signed char position_codeType_simpl::
dir_check ()
{
  return this->position_codeType_simpl_state_.position_codeType_->dir_check ();
}

bool position_codeType_simpl::
hit_skip_present ()
{
  return this->position_codeType_simpl_state_.position_codeType_->hit_skip_present ();
}

signed char position_codeType_simpl::
hit_skip ()
{
  return this->position_codeType_simpl_state_.position_codeType_->hit_skip ();
}

// limitswitchesType_simpl
//

void limitswitchesType_simpl::
pre (const ::limitswitchesType& x)
{
  this->limitswitchesType_simpl_state_.limitswitchesType_ = &x;
  this->limitswitchesType_simpl_state_.limitswitch_ = 
  this->limitswitchesType_simpl_state_.limitswitchesType_->limitswitch ().begin ();
  this->limitswitchesType_simpl_state_.limitswitch_end_ = 
  this->limitswitchesType_simpl_state_.limitswitchesType_->limitswitch ().end ();
  this->limitswitchesType_simpl_state_.position_code_ = 
  this->limitswitchesType_simpl_state_.limitswitchesType_->position_code ().begin ();
  this->limitswitchesType_simpl_state_.position_code_end_ = 
  this->limitswitchesType_simpl_state_.limitswitchesType_->position_code ().end ();
}

bool limitswitchesType_simpl::
limitswitch_next ()
{
  return this->limitswitchesType_simpl_state_.limitswitch_ != 
  this->limitswitchesType_simpl_state_.limitswitch_end_;
}

const ::limitswitchType& limitswitchesType_simpl::
limitswitch ()
{
  return *this->limitswitchesType_simpl_state_.limitswitch_++;
}

bool limitswitchesType_simpl::
position_code_next ()
{
  return this->limitswitchesType_simpl_state_.position_code_ != 
  this->limitswitchesType_simpl_state_.position_code_end_;
}

const ::position_codeType& limitswitchesType_simpl::
position_code ()
{
  return *this->limitswitchesType_simpl_state_.position_code_++;
}

// position_coverageType_simpl
//

void position_coverageType_simpl::
pre (const ::position_coverageType& x)
{
  this->position_coverageType_simpl_state_.position_coverageType_ = &x;
}

const ::encoderType& position_coverageType_simpl::
encoder ()
{
  return this->position_coverageType_simpl_state_.position_coverageType_->encoder ();
}

const ::limitswitchesType& position_coverageType_simpl::
limitswitches ()
{
  return this->position_coverageType_simpl_state_.position_coverageType_->limitswitches ();
}

// supervisionType_simpl
//

supervisionType_simpl::
supervisionType_simpl ()
: supervisionType_sskel (&base_impl_)
{
}

void supervisionType_simpl::
pre (const ::supervisionType& x)
{
  this->base_impl_.pre (x);
  this->supervisionType_simpl_state_.supervisionType_ = &x;
}

bool supervisionType_simpl::
steploss_warn_limit_present ()
{
  return this->supervisionType_simpl_state_.supervisionType_->steploss_warn_limit_present ();
}

signed char supervisionType_simpl::
steploss_warn_limit ()
{
  return this->supervisionType_simpl_state_.supervisionType_->steploss_warn_limit ();
}

bool supervisionType_simpl::
steploss_error_limit_present ()
{
  return this->supervisionType_simpl_state_.supervisionType_->steploss_error_limit_present ();
}

signed char supervisionType_simpl::
steploss_error_limit ()
{
  return this->supervisionType_simpl_state_.supervisionType_->steploss_error_limit ();
}

bool supervisionType_simpl::
current_limit_present ()
{
  return this->supervisionType_simpl_state_.supervisionType_->current_limit_present ();
}

short supervisionType_simpl::
current_limit ()
{
  return this->supervisionType_simpl_state_.supervisionType_->current_limit ();
}

// driverType_simpl
//

driverType_simpl::
driverType_simpl ()
: driverType_sskel (&base_impl_)
{
}

void driverType_simpl::
pre (const ::driverType& x)
{
  this->base_impl_.pre (x);
  this->driverType_simpl_state_.driverType_ = &x;
}

bool driverType_simpl::
type_present ()
{
  return this->driverType_simpl_state_.driverType_->type_present ();
}

::std::string driverType_simpl::
type ()
{
  return this->driverType_simpl_state_.driverType_->type ();
}

bool driverType_simpl::
reg_chopConf_present ()
{
  return this->driverType_simpl_state_.driverType_->reg_chopConf_present ();
}

::std::string driverType_simpl::
reg_chopConf ()
{
  return this->driverType_simpl_state_.driverType_->reg_chopConf ();
}

bool driverType_simpl::
reg_smartEn_present ()
{
  return this->driverType_simpl_state_.driverType_->reg_smartEn_present ();
}

::std::string driverType_simpl::
reg_smartEn ()
{
  return this->driverType_simpl_state_.driverType_->reg_smartEn ();
}

bool driverType_simpl::
reg_sgcsConf_present ()
{
  return this->driverType_simpl_state_.driverType_->reg_sgcsConf_present ();
}

::std::string driverType_simpl::
reg_sgcsConf ()
{
  return this->driverType_simpl_state_.driverType_->reg_sgcsConf ();
}

bool driverType_simpl::
reg_drvConf_present ()
{
  return this->driverType_simpl_state_.driverType_->reg_drvConf_present ();
}

::std::string driverType_simpl::
reg_drvConf ()
{
  return this->driverType_simpl_state_.driverType_->reg_drvConf ();
}

// motion_profileType_simpl
//

motion_profileType_simpl::
motion_profileType_simpl ()
: motion_profileType_sskel (&base_impl_)
{
}

void motion_profileType_simpl::
pre (const ::motion_profileType& x)
{
  this->base_impl_.pre (x);
  this->motion_profileType_simpl_state_.motion_profileType_ = &x;
}

bool motion_profileType_simpl::
speed_min_present ()
{
  return this->motion_profileType_simpl_state_.motion_profileType_->speed_min_present ();
}

signed char motion_profileType_simpl::
speed_min ()
{
  return this->motion_profileType_simpl_state_.motion_profileType_->speed_min ();
}

bool motion_profileType_simpl::
speed_max_present ()
{
  return this->motion_profileType_simpl_state_.motion_profileType_->speed_max_present ();
}

short motion_profileType_simpl::
speed_max ()
{
  return this->motion_profileType_simpl_state_.motion_profileType_->speed_max ();
}

bool motion_profileType_simpl::
acc_present ()
{
  return this->motion_profileType_simpl_state_.motion_profileType_->acc_present ();
}

short motion_profileType_simpl::
acc ()
{
  return this->motion_profileType_simpl_state_.motion_profileType_->acc ();
}

bool motion_profileType_simpl::
dec_present ()
{
  return this->motion_profileType_simpl_state_.motion_profileType_->dec_present ();
}

short motion_profileType_simpl::
dec ()
{
  return this->motion_profileType_simpl_state_.motion_profileType_->dec ();
}

bool motion_profileType_simpl::
acc_time_present ()
{
  return this->motion_profileType_simpl_state_.motion_profileType_->acc_time_present ();
}

signed char motion_profileType_simpl::
acc_time ()
{
  return this->motion_profileType_simpl_state_.motion_profileType_->acc_time ();
}

bool motion_profileType_simpl::
dec_time_present ()
{
  return this->motion_profileType_simpl_state_.motion_profileType_->dec_time_present ();
}

signed char motion_profileType_simpl::
dec_time ()
{
  return this->motion_profileType_simpl_state_.motion_profileType_->dec_time ();
}

bool motion_profileType_simpl::
micro_steps_present ()
{
  return this->motion_profileType_simpl_state_.motion_profileType_->micro_steps_present ();
}

signed char motion_profileType_simpl::
micro_steps ()
{
  return this->motion_profileType_simpl_state_.motion_profileType_->micro_steps ();
}

bool motion_profileType_simpl::
ramp_type_present ()
{
  return this->motion_profileType_simpl_state_.motion_profileType_->ramp_type_present ();
}

signed char motion_profileType_simpl::
ramp_type ()
{
  return this->motion_profileType_simpl_state_.motion_profileType_->ramp_type ();
}

// motion_profilesType_simpl
//

void motion_profilesType_simpl::
pre (const ::motion_profilesType& x)
{
  this->motion_profilesType_simpl_state_.motion_profilesType_ = &x;
  this->motion_profilesType_simpl_state_.motion_profile_ = 
  this->motion_profilesType_simpl_state_.motion_profilesType_->motion_profile ().begin ();
  this->motion_profilesType_simpl_state_.motion_profile_end_ = 
  this->motion_profilesType_simpl_state_.motion_profilesType_->motion_profile ().end ();
}

bool motion_profilesType_simpl::
motion_profile_next ()
{
  return this->motion_profilesType_simpl_state_.motion_profile_ != 
  this->motion_profilesType_simpl_state_.motion_profile_end_;
}

const ::motion_profileType& motion_profilesType_simpl::
motion_profile ()
{
  return *this->motion_profilesType_simpl_state_.motion_profile_++;
}

// pid_controllerType_simpl
//

pid_controllerType_simpl::
pid_controllerType_simpl ()
: pid_controllerType_sskel (&base_impl_)
{
}

void pid_controllerType_simpl::
pre (const ::pid_controllerType& x)
{
  this->base_impl_.pre (x);
  this->pid_controllerType_simpl_state_.pid_controllerType_ = &x;
}

bool pid_controllerType_simpl::
max_temperature_present ()
{
  return this->pid_controllerType_simpl_state_.pid_controllerType_->max_temperature_present ();
}

short pid_controllerType_simpl::
max_temperature ()
{
  return this->pid_controllerType_simpl_state_.pid_controllerType_->max_temperature ();
}

bool pid_controllerType_simpl::
controller_gain_present ()
{
  return this->pid_controllerType_simpl_state_.pid_controllerType_->controller_gain_present ();
}

short pid_controllerType_simpl::
controller_gain ()
{
  return this->pid_controllerType_simpl_state_.pid_controllerType_->controller_gain ();
}

bool pid_controllerType_simpl::
reset_time_present ()
{
  return this->pid_controllerType_simpl_state_.pid_controllerType_->reset_time_present ();
}

short pid_controllerType_simpl::
reset_time ()
{
  return this->pid_controllerType_simpl_state_.pid_controllerType_->reset_time ();
}

bool pid_controllerType_simpl::
derivative_time_present ()
{
  return this->pid_controllerType_simpl_state_.pid_controllerType_->derivative_time_present ();
}

signed char pid_controllerType_simpl::
derivative_time ()
{
  return this->pid_controllerType_simpl_state_.pid_controllerType_->derivative_time ();
}

bool pid_controllerType_simpl::
max_pressure_present ()
{
  return this->pid_controllerType_simpl_state_.pid_controllerType_->max_pressure_present ();
}

signed char pid_controllerType_simpl::
max_pressure ()
{
  return this->pid_controllerType_simpl_state_.pid_controllerType_->max_pressure ();
}

bool pid_controllerType_simpl::
min_pressure_present ()
{
  return this->pid_controllerType_simpl_state_.pid_controllerType_->min_pressure_present ();
}

signed char pid_controllerType_simpl::
min_pressure ()
{
  return this->pid_controllerType_simpl_state_.pid_controllerType_->min_pressure ();
}

// pid_controllersType_simpl
//

void pid_controllersType_simpl::
pre (const ::pid_controllersType& x)
{
  this->pid_controllersType_simpl_state_.pid_controllersType_ = &x;
}

const ::pid_controllerType& pid_controllersType_simpl::
pid_controller ()
{
  return this->pid_controllersType_simpl_state_.pid_controllersType_->pid_controller ();
}

// pwm_controllerType_simpl
//

pwm_controllerType_simpl::
pwm_controllerType_simpl ()
: pwm_controllerType_sskel (&base_impl_)
{
}

void pwm_controllerType_simpl::
pre (const ::pwm_controllerType& x)
{
  this->base_impl_.pre (x);
  this->pwm_controllerType_simpl_state_.pwm_controllerType_ = &x;
}

bool pwm_controllerType_simpl::
max_actuating_value_present ()
{
  return this->pwm_controllerType_simpl_state_.pwm_controllerType_->max_actuating_value_present ();
}

short pwm_controllerType_simpl::
max_actuating_value ()
{
  return this->pwm_controllerType_simpl_state_.pwm_controllerType_->max_actuating_value ();
}

bool pwm_controllerType_simpl::
min_actuating_value_present ()
{
  return this->pwm_controllerType_simpl_state_.pwm_controllerType_->min_actuating_value_present ();
}

short pwm_controllerType_simpl::
min_actuating_value ()
{
  return this->pwm_controllerType_simpl_state_.pwm_controllerType_->min_actuating_value ();
}

bool pwm_controllerType_simpl::
max_pwm_duty_present ()
{
  return this->pwm_controllerType_simpl_state_.pwm_controllerType_->max_pwm_duty_present ();
}

signed char pwm_controllerType_simpl::
max_pwm_duty ()
{
  return this->pwm_controllerType_simpl_state_.pwm_controllerType_->max_pwm_duty ();
}

bool pwm_controllerType_simpl::
min_pwm_duty_present ()
{
  return this->pwm_controllerType_simpl_state_.pwm_controllerType_->min_pwm_duty_present ();
}

signed char pwm_controllerType_simpl::
min_pwm_duty ()
{
  return this->pwm_controllerType_simpl_state_.pwm_controllerType_->min_pwm_duty ();
}

// functionmoduleType_simpl
//

void functionmoduleType_simpl::
pre (const ::functionmoduleType& x)
{
  this->functionmoduleType_simpl_state_.functionmoduleType_ = &x;
}

bool functionmoduleType_simpl::
type_present ()
{
  return this->functionmoduleType_simpl_state_.functionmoduleType_->type_present ();
}

::std::string functionmoduleType_simpl::
type ()
{
  return this->functionmoduleType_simpl_state_.functionmoduleType_->type ();
}

bool functionmoduleType_simpl::
key_present ()
{
  return this->functionmoduleType_simpl_state_.functionmoduleType_->key_present ();
}

::std::string functionmoduleType_simpl::
key ()
{
  return this->functionmoduleType_simpl_state_.functionmoduleType_->key ();
}

bool functionmoduleType_simpl::
name_present ()
{
  return this->functionmoduleType_simpl_state_.functionmoduleType_->name_present ();
}

::std::string functionmoduleType_simpl::
name ()
{
  return this->functionmoduleType_simpl_state_.functionmoduleType_->name ();
}

bool functionmoduleType_simpl::
interface_present ()
{
  return this->functionmoduleType_simpl_state_.functionmoduleType_->interface_present ();
}

signed char functionmoduleType_simpl::
interface ()
{
  return this->functionmoduleType_simpl_state_.functionmoduleType_->interface ();
}

bool functionmoduleType_simpl::
fct_instanceID_present ()
{
  return this->functionmoduleType_simpl_state_.functionmoduleType_->fct_instanceID_present ();
}

::std::string functionmoduleType_simpl::
fct_instanceID ()
{
  return this->functionmoduleType_simpl_state_.functionmoduleType_->fct_instanceID ();
}

bool functionmoduleType_simpl::
rotation_present ()
{
  return this->functionmoduleType_simpl_state_.functionmoduleType_->rotation_present ();
}

const ::rotationType& functionmoduleType_simpl::
rotation ()
{
  return this->functionmoduleType_simpl_state_.functionmoduleType_->rotation ();
}

bool functionmoduleType_simpl::
reference_run_present ()
{
  return this->functionmoduleType_simpl_state_.functionmoduleType_->reference_run_present ();
}

const ::reference_runType& functionmoduleType_simpl::
reference_run ()
{
  return this->functionmoduleType_simpl_state_.functionmoduleType_->reference_run ();
}

bool functionmoduleType_simpl::
position_coverage_present ()
{
  return this->functionmoduleType_simpl_state_.functionmoduleType_->position_coverage_present ();
}

const ::position_coverageType& functionmoduleType_simpl::
position_coverage ()
{
  return this->functionmoduleType_simpl_state_.functionmoduleType_->position_coverage ();
}

bool functionmoduleType_simpl::
supervision_present ()
{
  return this->functionmoduleType_simpl_state_.functionmoduleType_->supervision_present ();
}

const ::supervisionType& functionmoduleType_simpl::
supervision ()
{
  return this->functionmoduleType_simpl_state_.functionmoduleType_->supervision ();
}

bool functionmoduleType_simpl::
driver_present ()
{
  return this->functionmoduleType_simpl_state_.functionmoduleType_->driver_present ();
}

const ::driverType& functionmoduleType_simpl::
driver ()
{
  return this->functionmoduleType_simpl_state_.functionmoduleType_->driver ();
}

bool functionmoduleType_simpl::
motion_profiles_present ()
{
  return this->functionmoduleType_simpl_state_.functionmoduleType_->motion_profiles_present ();
}

const ::motion_profilesType& functionmoduleType_simpl::
motion_profiles ()
{
  return this->functionmoduleType_simpl_state_.functionmoduleType_->motion_profiles ();
}

bool functionmoduleType_simpl::
configuration_present ()
{
  return this->functionmoduleType_simpl_state_.functionmoduleType_->configuration_present ();
}

const ::configurationType& functionmoduleType_simpl::
configuration ()
{
  return this->functionmoduleType_simpl_state_.functionmoduleType_->configuration ();
}

bool functionmoduleType_simpl::
pid_controllers_present ()
{
  return this->functionmoduleType_simpl_state_.functionmoduleType_->pid_controllers_present ();
}

const ::pid_controllersType& functionmoduleType_simpl::
pid_controllers ()
{
  return this->functionmoduleType_simpl_state_.functionmoduleType_->pid_controllers ();
}

bool functionmoduleType_simpl::
pwm_controller_present ()
{
  return this->functionmoduleType_simpl_state_.functionmoduleType_->pwm_controller_present ();
}

const ::pwm_controllerType& functionmoduleType_simpl::
pwm_controller ()
{
  return this->functionmoduleType_simpl_state_.functionmoduleType_->pwm_controller ();
}

// functionmodulesType_simpl
//

void functionmodulesType_simpl::
pre (const ::functionmodulesType& x)
{
  this->functionmodulesType_simpl_state_.functionmodulesType_ = &x;
  this->functionmodulesType_simpl_state_.functionmodule_ = 
  this->functionmodulesType_simpl_state_.functionmodulesType_->functionmodule ().begin ();
  this->functionmodulesType_simpl_state_.functionmodule_end_ = 
  this->functionmodulesType_simpl_state_.functionmodulesType_->functionmodule ().end ();
}

bool functionmodulesType_simpl::
functionmodule_next ()
{
  return this->functionmodulesType_simpl_state_.functionmodule_ != 
  this->functionmodulesType_simpl_state_.functionmodule_end_;
}

const ::functionmoduleType& functionmodulesType_simpl::
functionmodule ()
{
  return *this->functionmodulesType_simpl_state_.functionmodule_++;
}

// slaveType_simpl
//

void slaveType_simpl::
pre (const ::slaveType& x)
{
  this->slaveType_simpl_state_.slaveType_ = &x;
}

bool slaveType_simpl::
type_present ()
{
  return this->slaveType_simpl_state_.slaveType_->type_present ();
}

::std::string slaveType_simpl::
type ()
{
  return this->slaveType_simpl_state_.slaveType_->type ();
}

bool slaveType_simpl::
key_present ()
{
  return this->slaveType_simpl_state_.slaveType_->key_present ();
}

::std::string slaveType_simpl::
key ()
{
  return this->slaveType_simpl_state_.slaveType_->key ();
}

bool slaveType_simpl::
name_present ()
{
  return this->slaveType_simpl_state_.slaveType_->name_present ();
}

::std::string slaveType_simpl::
name ()
{
  return this->slaveType_simpl_state_.slaveType_->name ();
}

bool slaveType_simpl::
virtual__present ()
{
  return this->slaveType_simpl_state_.slaveType_->virtual__present ();
}

signed char slaveType_simpl::
virtual_ ()
{
  return this->slaveType_simpl_state_.slaveType_->virtual_ ();
}

signed char slaveType_simpl::
nodetype ()
{
  return this->slaveType_simpl_state_.slaveType_->nodetype ();
}

signed char slaveType_simpl::
nodeindex ()
{
  return this->slaveType_simpl_state_.slaveType_->nodeindex ();
}

const ::functionmodulesType& slaveType_simpl::
functionmodules ()
{
  return this->slaveType_simpl_state_.slaveType_->functionmodules ();
}

// parameter_slavesType_simpl
//

void parameter_slavesType_simpl::
pre (const ::parameter_slavesType& x)
{
  this->parameter_slavesType_simpl_state_.parameter_slavesType_ = &x;
  this->parameter_slavesType_simpl_state_.slave_ = 
  this->parameter_slavesType_simpl_state_.parameter_slavesType_->slave ().begin ();
  this->parameter_slavesType_simpl_state_.slave_end_ = 
  this->parameter_slavesType_simpl_state_.parameter_slavesType_->slave ().end ();
}

bool parameter_slavesType_simpl::
slave_next ()
{
  return this->parameter_slavesType_simpl_state_.slave_ != 
  this->parameter_slavesType_simpl_state_.slave_end_;
}

const ::slaveType& parameter_slavesType_simpl::
slave ()
{
  return *this->parameter_slavesType_simpl_state_.slave_++;
}

// hwconfigType_simpl
//

void hwconfigType_simpl::
pre (const ::hwconfigType& x)
{
  this->hwconfigType_simpl_state_.hwconfigType_ = &x;
}

bool hwconfigType_simpl::
version_present ()
{
  return this->hwconfigType_simpl_state_.hwconfigType_->version_present ();
}

float hwconfigType_simpl::
version ()
{
  return this->hwconfigType_simpl_state_.hwconfigType_->version ();
}

const ::parameter_masterType& hwconfigType_simpl::
parameter_master ()
{
  return this->hwconfigType_simpl_state_.hwconfigType_->parameter_master ();
}

const ::parameter_slavesType& hwconfigType_simpl::
parameter_slaves ()
{
  return this->hwconfigType_simpl_state_.hwconfigType_->parameter_slaves ();
}

const ::devicesType& hwconfigType_simpl::
devices ()
{
  return this->hwconfigType_simpl_state_.hwconfigType_->devices ();
}

// hwconfig_saggr
//

hwconfig_saggr::
hwconfig_saggr ()
{
  this->can_interfaceType_s_.serializers (this->string_s_);

  this->tcp_interfaceType_s_.serializers (this->byte_s_);

  this->serial_numberType_s_.serializers (this->string_s_);

  this->deviceType_s_.serializers (this->string_s_,
                                   this->string_s_,
                                   this->string_s_,
                                   this->string_s_,
                                   this->byte_s_,
                                   this->functionmodulesType_s_);

  this->devicesType_s_.serializers (this->deviceType_s_);

  this->retortType_s_.serializers (this->string_s_,
                                   this->byte_s_,
                                   this->devicesType_s_);

  this->retortsType_s_.serializers (this->retortType_s_);

  this->parameter_masterType_s_.serializers (this->string_s_,
                                             this->can_interfaceType_s_,
                                             this->tcp_interfaceType_s_,
                                             this->byte_s_,
                                             this->byte_s_,
                                             this->serial_numberType_s_,
                                             this->retortsType_s_);

  this->rotationType_s_.serializers (this->string_s_,
                                     this->string_s_,
                                     this->short_s_,
                                     this->short_s_,
                                     this->short_s_,
                                     this->byte_s_,
                                     this->short_s_,
                                     this->byte_s_,
                                     this->byte_s_,
                                     this->short_s_);

  this->reference_runType_s_.serializers (this->byte_s_,
                                          this->short_s_,
                                          this->int_s_,
                                          this->byte_s_,
                                          this->byte_s_,
                                          this->short_s_,
                                          this->byte_s_);

  this->encoderType_s_.serializers (this->byte_s_,
                                    this->short_s_,
                                    this->string_s_);

  this->configurationType_s_.serializers (this->byte_s_,
                                          this->byte_s_,
                                          this->byte_s_,
                                          this->byte_s_,
                                          this->short_s_,
                                          this->short_s_,
                                          this->short_s_,
                                          this->short_s_,
                                          this->short_s_,
                                          this->short_s_,
                                          this->short_s_,
                                          this->short_s_,
                                          this->short_s_,
                                          this->short_s_,
                                          this->short_s_,
                                          this->short_s_,
                                          this->short_s_,
                                          this->byte_s_,
                                          this->byte_s_,
                                          this->short_s_,
                                          this->short_s_,
                                          this->short_s_,
                                          this->byte_s_,
                                          this->byte_s_,
                                          this->byte_s_,
                                          this->byte_s_,
                                          this->byte_s_,
                                          this->byte_s_,
                                          this->byte_s_,
                                          this->byte_s_);

  this->limitswitchType_s_.serializers (this->byte_s_,
                                        this->configurationType_s_);

  this->position_codeType_s_.serializers (this->byte_s_,
                                          this->byte_s_,
                                          this->string_s_,
                                          this->byte_s_,
                                          this->byte_s_,
                                          this->byte_s_,
                                          this->byte_s_,
                                          this->byte_s_);

  this->limitswitchesType_s_.serializers (this->limitswitchType_s_,
                                          this->position_codeType_s_);

  this->position_coverageType_s_.serializers (this->encoderType_s_,
                                              this->limitswitchesType_s_);

  this->supervisionType_s_.serializers (this->byte_s_,
                                        this->byte_s_,
                                        this->short_s_);

  this->driverType_s_.serializers (this->string_s_,
                                   this->string_s_,
                                   this->string_s_,
                                   this->string_s_,
                                   this->string_s_);

  this->motion_profileType_s_.serializers (this->byte_s_,
                                           this->short_s_,
                                           this->short_s_,
                                           this->short_s_,
                                           this->byte_s_,
                                           this->byte_s_,
                                           this->byte_s_,
                                           this->byte_s_);

  this->motion_profilesType_s_.serializers (this->motion_profileType_s_);

  this->functionmoduleType_s_.serializers (this->string_s_,
                                           this->string_s_,
                                           this->string_s_,
                                           this->byte_s_,
                                           this->string_s_,
                                           this->rotationType_s_,
                                           this->reference_runType_s_,
                                           this->position_coverageType_s_,
                                           this->supervisionType_s_,
                                           this->driverType_s_,
                                           this->motion_profilesType_s_,
                                           this->configurationType_s_,
                                           this->pid_controllersType_s_,
                                           this->pwm_controllerType_s_);

  this->pid_controllerType_s_.serializers (this->short_s_,
                                           this->short_s_,
                                           this->short_s_,
                                           this->byte_s_,
                                           this->byte_s_,
                                           this->byte_s_);

  this->pid_controllersType_s_.serializers (this->pid_controllerType_s_);

  this->functionmodulesType_s_.serializers (this->functionmoduleType_s_);

  this->slaveType_s_.serializers (this->string_s_,
                                  this->string_s_,
                                  this->string_s_,
                                  this->byte_s_,
                                  this->byte_s_,
                                  this->byte_s_,
                                  this->functionmodulesType_s_);

  this->pwm_controllerType_s_.serializers (this->short_s_,
                                           this->short_s_,
                                           this->byte_s_,
                                           this->byte_s_);

  this->parameter_slavesType_s_.serializers (this->slaveType_s_);

  this->hwconfigType_s_.serializers (this->float_s_,
                                     this->parameter_masterType_s_,
                                     this->parameter_slavesType_s_,
                                     this->devicesType_s_);
}

const char* hwconfig_saggr::
root_name ()
{
  return "hwconfig";
}

const char* hwconfig_saggr::
root_namespace ()
{
  return "";
}

// Begin epilogue.
//
//
// End epilogue.

