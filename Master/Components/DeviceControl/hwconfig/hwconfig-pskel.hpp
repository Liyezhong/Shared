// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef HWCONFIG_PSKEL_HPP
#define HWCONFIG_PSKEL_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifdef XSDE_EXCEPTIONS
#error the XSD/e runtime uses exceptions while the generated code does not (reconfigure the runtime or remove --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//

#include <xsde/cxx/hybrid/any-type.hxx>
#include <xsde/cxx/hybrid/any-type-pskel.hxx>
#include <xsde/cxx/hybrid/any-type-pimpl.hxx>

namespace xml_schema
{
  using ::xsde::cxx::hybrid::any_type;

  using ::xsde::cxx::hybrid::any_type_pskel;
  using ::xsde::cxx::hybrid::any_type_pimpl;
}


//
// End prologue.

// Forward declarations
//
class can_interfaceType_pskel;
class tcp_interfaceType_pskel;
class serial_numberType_pskel;
class deviceType_pskel;
class devicesType_pskel;
class retortType_pskel;
class retortsType_pskel;
class parameter_masterType_pskel;
class rotationType_pskel;
class reference_runType_pskel;
class encoderType_pskel;
class configurationType_pskel;
class limitswitchType_pskel;
class position_codeType_pskel;
class limitswitchesType_pskel;
class position_coverageType_pskel;
class supervisionType_pskel;
class driverType_pskel;
class motion_profileType_pskel;
class motion_profilesType_pskel;
class pid_controllerType_pskel;
class pid_controllersType_pskel;
class pwm_controllerType_pskel;
class functionmoduleType_pskel;
class functionmodulesType_pskel;
class slaveType_pskel;
class parameter_slavesType_pskel;
class hwconfigType_pskel;

#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/sys-error.hxx>
#include <xsde/cxx/schema-error.hxx>
#include <xsde/cxx/parser/error.hxx>
#include <xsde/cxx/parser/expat/xml-error.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

#include "hwconfig.hpp"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  using xsde::cxx::sys_error;
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Error object.
  //
  typedef xsde::cxx::parser::error parser_error;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

class can_interfaceType_pskel: public ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  interface (const ::std::string&);

  virtual ::can_interfaceType
  post_can_interfaceType () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::string_pskel& /* interface */);

  // Individual attribute parsers.
  //
  void
  interface_parser (::xml_schema::string_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  can_interfaceType_pskel (::xml_schema::string_pskel* tiein);

  // Implementation details.
  //
  virtual ::std::string
  post_string ();

  protected:
  can_interfaceType_pskel* can_interfaceType_impl_;
  can_interfaceType_pskel (can_interfaceType_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::string_pskel* interface_parser_;
};

class tcp_interfaceType_pskel: public ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  usage (signed char);

  virtual ::tcp_interfaceType
  post_tcp_interfaceType () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::byte_pskel& /* usage */);

  // Individual attribute parsers.
  //
  void
  usage_parser (::xml_schema::byte_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  tcp_interfaceType_pskel (::xml_schema::string_pskel* tiein);

  // Implementation details.
  //
  virtual ::std::string
  post_string ();

  protected:
  tcp_interfaceType_pskel* tcp_interfaceType_impl_;
  tcp_interfaceType_pskel (tcp_interfaceType_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::byte_pskel* usage_parser_;
};

class serial_numberType_pskel: public ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  serialno (const ::std::string&);

  virtual ::serial_numberType
  post_serial_numberType () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::string_pskel& /* serialno */);

  // Individual attribute parsers.
  //
  void
  serialno_parser (::xml_schema::string_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  serial_numberType_pskel (::xml_schema::string_pskel* tiein);

  // Implementation details.
  //
  virtual ::std::string
  post_string ();

  protected:
  serial_numberType_pskel* serial_numberType_impl_;
  serial_numberType_pskel (serial_numberType_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::string_pskel* serialno_parser_;
};

class deviceType_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  name (const ::std::string&);

  virtual void
  id (const ::std::string&);

  virtual void
  type (const ::std::string&);

  virtual void
  dev_instanceID (const ::std::string&);

  virtual void
  optional (signed char);

  // Elements.
  //
  virtual void
  functionmodules (::functionmodulesType*);

  virtual ::deviceType*
  post_deviceType () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::string_pskel& /* id */,
           ::xml_schema::string_pskel& /* type */,
           ::xml_schema::string_pskel& /* dev_instanceID */,
           ::xml_schema::byte_pskel& /* optional */,
           ::functionmodulesType_pskel& /* functionmodules */);

  // Individual attribute parsers.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  id_parser (::xml_schema::string_pskel&);

  void
  type_parser (::xml_schema::string_pskel&);

  void
  dev_instanceID_parser (::xml_schema::string_pskel&);

  void
  optional_parser (::xml_schema::byte_pskel&);

  // Individual element parsers.
  //
  void
  functionmodules_parser (::functionmodulesType_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  deviceType_pskel ();

  // Implementation details.
  //
  protected:
  deviceType_pskel* deviceType_impl_;
  deviceType_pskel (deviceType_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  virtual bool
  _characters_impl (const ::xsde::cxx::ro_string&);

  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::string_pskel* id_parser_;
  ::xml_schema::string_pskel* type_parser_;
  ::xml_schema::string_pskel* dev_instanceID_parser_;
  ::xml_schema::byte_pskel* optional_parser_;
  ::functionmodulesType_pskel* functionmodules_parser_;

  public:
  struct v_state_descr_
  {
    void (::deviceType_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class devicesType_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Elements.
  //
  virtual void
  device (::deviceType*);

  virtual ::devicesType*
  post_devicesType () = 0;

  // Parser construction API.
  //
  void
  parsers (::deviceType_pskel& /* device */);

  // Individual element parsers.
  //
  void
  device_parser (::deviceType_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  devicesType_pskel ();

  // Implementation details.
  //
  protected:
  devicesType_pskel* devicesType_impl_;
  devicesType_pskel (devicesType_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  ::deviceType_pskel* device_parser_;

  public:
  struct v_state_descr_
  {
    void (::devicesType_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class retortType_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  name (const ::std::string&);

  virtual void
  index (signed char);

  // Elements.
  //
  virtual void
  devices (::devicesType*);

  virtual ::retortType*
  post_retortType () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::byte_pskel& /* index */,
           ::devicesType_pskel& /* devices */);

  // Individual attribute parsers.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  index_parser (::xml_schema::byte_pskel&);

  // Individual element parsers.
  //
  void
  devices_parser (::devicesType_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  retortType_pskel ();

  // Implementation details.
  //
  protected:
  retortType_pskel* retortType_impl_;
  retortType_pskel (retortType_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::byte_pskel* index_parser_;
  ::devicesType_pskel* devices_parser_;

  public:
  struct v_state_descr_
  {
    void (::retortType_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class retortsType_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Elements.
  //
  virtual void
  retort (::retortType*);

  virtual ::retortsType*
  post_retortsType () = 0;

  // Parser construction API.
  //
  void
  parsers (::retortType_pskel& /* retort */);

  // Individual element parsers.
  //
  void
  retort_parser (::retortType_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  retortsType_pskel ();

  // Implementation details.
  //
  protected:
  retortsType_pskel* retortsType_impl_;
  retortsType_pskel (retortsType_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  ::retortType_pskel* retort_parser_;

  public:
  struct v_state_descr_
  {
    void (::retortsType_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class parameter_masterType_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  folded (const ::std::string&);

  // Elements.
  //
  virtual void
  can_interface (const ::can_interfaceType&);

  virtual void
  tcp_interface (const ::tcp_interfaceType&);

  virtual void
  nodetype (signed char);

  virtual void
  nodeindex (signed char);

  virtual void
  serial_number (const ::serial_numberType&);

  virtual void
  retorts (::retortsType*);

  virtual ::parameter_masterType*
  post_parameter_masterType () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::string_pskel& /* folded */,
           ::can_interfaceType_pskel& /* can_interface */,
           ::tcp_interfaceType_pskel& /* tcp_interface */,
           ::xml_schema::byte_pskel& /* nodetype */,
           ::xml_schema::byte_pskel& /* nodeindex */,
           ::serial_numberType_pskel& /* serial_number */,
           ::retortsType_pskel& /* retorts */);

  // Individual attribute parsers.
  //
  void
  folded_parser (::xml_schema::string_pskel&);

  // Individual element parsers.
  //
  void
  can_interface_parser (::can_interfaceType_pskel&);

  void
  tcp_interface_parser (::tcp_interfaceType_pskel&);

  void
  nodetype_parser (::xml_schema::byte_pskel&);

  void
  nodeindex_parser (::xml_schema::byte_pskel&);

  void
  serial_number_parser (::serial_numberType_pskel&);

  void
  retorts_parser (::retortsType_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  parameter_masterType_pskel ();

  // Implementation details.
  //
  protected:
  parameter_masterType_pskel* parameter_masterType_impl_;
  parameter_masterType_pskel (parameter_masterType_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::string_pskel* folded_parser_;
  ::can_interfaceType_pskel* can_interface_parser_;
  ::tcp_interfaceType_pskel* tcp_interface_parser_;
  ::xml_schema::byte_pskel* nodetype_parser_;
  ::xml_schema::byte_pskel* nodeindex_parser_;
  ::serial_numberType_pskel* serial_number_parser_;
  ::retortsType_pskel* retorts_parser_;

  public:
  struct v_state_descr_
  {
    void (::parameter_masterType_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class rotationType_pskel: public ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  type (const ::std::string&);

  virtual void
  direction (const ::std::string&);

  virtual void
  steps_revolution (short);

  virtual void
  position_min (short);

  virtual void
  position_max (short);

  virtual void
  speed_min (signed char);

  virtual void
  speed_max (short);

  virtual void
  run_cs (signed char);

  virtual void
  stop_cs (signed char);

  virtual void
  stop_cs_delay (short);

  virtual ::rotationType
  post_rotationType () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::string_pskel& /* type */,
           ::xml_schema::string_pskel& /* direction */,
           ::xml_schema::short_pskel& /* steps_revolution */,
           ::xml_schema::short_pskel& /* position_min */,
           ::xml_schema::short_pskel& /* position_max */,
           ::xml_schema::byte_pskel& /* speed_min */,
           ::xml_schema::short_pskel& /* speed_max */,
           ::xml_schema::byte_pskel& /* run_cs */,
           ::xml_schema::byte_pskel& /* stop_cs */,
           ::xml_schema::short_pskel& /* stop_cs_delay */);

  // Individual attribute parsers.
  //
  void
  type_parser (::xml_schema::string_pskel&);

  void
  direction_parser (::xml_schema::string_pskel&);

  void
  steps_revolution_parser (::xml_schema::short_pskel&);

  void
  position_min_parser (::xml_schema::short_pskel&);

  void
  position_max_parser (::xml_schema::short_pskel&);

  void
  speed_min_parser (::xml_schema::byte_pskel&);

  void
  speed_max_parser (::xml_schema::short_pskel&);

  void
  run_cs_parser (::xml_schema::byte_pskel&);

  void
  stop_cs_parser (::xml_schema::byte_pskel&);

  void
  stop_cs_delay_parser (::xml_schema::short_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  rotationType_pskel (::xml_schema::string_pskel* tiein);

  // Implementation details.
  //
  virtual ::std::string
  post_string ();

  protected:
  rotationType_pskel* rotationType_impl_;
  rotationType_pskel (rotationType_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::string_pskel* type_parser_;
  ::xml_schema::string_pskel* direction_parser_;
  ::xml_schema::short_pskel* steps_revolution_parser_;
  ::xml_schema::short_pskel* position_min_parser_;
  ::xml_schema::short_pskel* position_max_parser_;
  ::xml_schema::byte_pskel* speed_min_parser_;
  ::xml_schema::short_pskel* speed_max_parser_;
  ::xml_schema::byte_pskel* run_cs_parser_;
  ::xml_schema::byte_pskel* stop_cs_parser_;
  ::xml_schema::short_pskel* stop_cs_delay_parser_;
};

class reference_runType_pskel: public ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  ref_position (signed char);

  virtual void
  max_distance (short);

  virtual void
  timeout (int);

  virtual void
  reverse_distance (signed char);

  virtual void
  slow_speed (signed char);

  virtual void
  high_speed (short);

  virtual void
  refpos_offset (signed char);

  virtual ::reference_runType
  post_reference_runType () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::byte_pskel& /* ref_position */,
           ::xml_schema::short_pskel& /* max_distance */,
           ::xml_schema::int_pskel& /* timeout */,
           ::xml_schema::byte_pskel& /* reverse_distance */,
           ::xml_schema::byte_pskel& /* slow_speed */,
           ::xml_schema::short_pskel& /* high_speed */,
           ::xml_schema::byte_pskel& /* refpos_offset */);

  // Individual attribute parsers.
  //
  void
  ref_position_parser (::xml_schema::byte_pskel&);

  void
  max_distance_parser (::xml_schema::short_pskel&);

  void
  timeout_parser (::xml_schema::int_pskel&);

  void
  reverse_distance_parser (::xml_schema::byte_pskel&);

  void
  slow_speed_parser (::xml_schema::byte_pskel&);

  void
  high_speed_parser (::xml_schema::short_pskel&);

  void
  refpos_offset_parser (::xml_schema::byte_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  reference_runType_pskel (::xml_schema::string_pskel* tiein);

  // Implementation details.
  //
  virtual ::std::string
  post_string ();

  protected:
  reference_runType_pskel* reference_runType_impl_;
  reference_runType_pskel (reference_runType_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::byte_pskel* ref_position_parser_;
  ::xml_schema::short_pskel* max_distance_parser_;
  ::xml_schema::int_pskel* timeout_parser_;
  ::xml_schema::byte_pskel* reverse_distance_parser_;
  ::xml_schema::byte_pskel* slow_speed_parser_;
  ::xml_schema::short_pskel* high_speed_parser_;
  ::xml_schema::byte_pskel* refpos_offset_parser_;
};

class encoderType_pskel: public ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  type (signed char);

  virtual void
  resolution (short);

  virtual void
  rotation (const ::std::string&);

  virtual ::encoderType
  post_encoderType () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::byte_pskel& /* type */,
           ::xml_schema::short_pskel& /* resolution */,
           ::xml_schema::string_pskel& /* rotation */);

  // Individual attribute parsers.
  //
  void
  type_parser (::xml_schema::byte_pskel&);

  void
  resolution_parser (::xml_schema::short_pskel&);

  void
  rotation_parser (::xml_schema::string_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  encoderType_pskel (::xml_schema::string_pskel* tiein);

  // Implementation details.
  //
  virtual ::std::string
  post_string ();

  protected:
  encoderType_pskel* encoderType_impl_;
  encoderType_pskel (encoderType_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::byte_pskel* type_parser_;
  ::xml_schema::short_pskel* resolution_parser_;
  ::xml_schema::string_pskel* rotation_parser_;
};

class configurationType_pskel: public ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  polarity (signed char);

  virtual void
  sample_rate (signed char);

  virtual void
  debounce (signed char);

  virtual void
  temp_tolerance (signed char);

  virtual void
  sampling_period (short);

  virtual void
  fan_speed (short);

  virtual void
  fan_threshold (short);

  virtual void
  current_gain (short);

  virtual void
  heater_current (short);

  virtual void
  heater_threshold (short);

  virtual void
  current_deviation (short);

  virtual void
  current_min_230_serial (short);

  virtual void
  current_max_230_serial (short);

  virtual void
  current_min_100_serial (short);

  virtual void
  current_max_100_serial (short);

  virtual void
  current_min_100_parallel (short);

  virtual void
  current_max_100_parallel (short);

  virtual void
  pressure_tolerance (signed char);

  virtual void
  fan_current_gain (signed char);

  virtual void
  fan_current (short);

  virtual void
  pump_current (short);

  virtual void
  pump_threshold (short);

  virtual void
  enabled (signed char);

  virtual void
  inactiv_shutdown (signed char);

  virtual void
  inactiv_emcy (signed char);

  virtual void
  outval_inactiv (signed char);

  virtual void
  livetime_limit (signed char);

  virtual void
  timestamp (signed char);

  virtual void
  threshold (signed char);

  virtual void
  interval (signed char);

  virtual ::configurationType
  post_configurationType () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::byte_pskel& /* polarity */,
           ::xml_schema::byte_pskel& /* sample_rate */,
           ::xml_schema::byte_pskel& /* debounce */,
           ::xml_schema::byte_pskel& /* temp_tolerance */,
           ::xml_schema::short_pskel& /* sampling_period */,
           ::xml_schema::short_pskel& /* fan_speed */,
           ::xml_schema::short_pskel& /* fan_threshold */,
           ::xml_schema::short_pskel& /* current_gain */,
           ::xml_schema::short_pskel& /* heater_current */,
           ::xml_schema::short_pskel& /* heater_threshold */,
           ::xml_schema::short_pskel& /* current_deviation */,
           ::xml_schema::short_pskel& /* current_min_230_serial */,
           ::xml_schema::short_pskel& /* current_max_230_serial */,
           ::xml_schema::short_pskel& /* current_min_100_serial */,
           ::xml_schema::short_pskel& /* current_max_100_serial */,
           ::xml_schema::short_pskel& /* current_min_100_parallel */,
           ::xml_schema::short_pskel& /* current_max_100_parallel */,
           ::xml_schema::byte_pskel& /* pressure_tolerance */,
           ::xml_schema::byte_pskel& /* fan_current_gain */,
           ::xml_schema::short_pskel& /* fan_current */,
           ::xml_schema::short_pskel& /* pump_current */,
           ::xml_schema::short_pskel& /* pump_threshold */,
           ::xml_schema::byte_pskel& /* enabled */,
           ::xml_schema::byte_pskel& /* inactiv_shutdown */,
           ::xml_schema::byte_pskel& /* inactiv_emcy */,
           ::xml_schema::byte_pskel& /* outval_inactiv */,
           ::xml_schema::byte_pskel& /* livetime_limit */,
           ::xml_schema::byte_pskel& /* timestamp */,
           ::xml_schema::byte_pskel& /* threshold */,
           ::xml_schema::byte_pskel& /* interval */);

  // Individual attribute parsers.
  //
  void
  polarity_parser (::xml_schema::byte_pskel&);

  void
  sample_rate_parser (::xml_schema::byte_pskel&);

  void
  debounce_parser (::xml_schema::byte_pskel&);

  void
  temp_tolerance_parser (::xml_schema::byte_pskel&);

  void
  sampling_period_parser (::xml_schema::short_pskel&);

  void
  fan_speed_parser (::xml_schema::short_pskel&);

  void
  fan_threshold_parser (::xml_schema::short_pskel&);

  void
  current_gain_parser (::xml_schema::short_pskel&);

  void
  heater_current_parser (::xml_schema::short_pskel&);

  void
  heater_threshold_parser (::xml_schema::short_pskel&);

  void
  current_deviation_parser (::xml_schema::short_pskel&);

  void
  current_min_230_serial_parser (::xml_schema::short_pskel&);

  void
  current_max_230_serial_parser (::xml_schema::short_pskel&);

  void
  current_min_100_serial_parser (::xml_schema::short_pskel&);

  void
  current_max_100_serial_parser (::xml_schema::short_pskel&);

  void
  current_min_100_parallel_parser (::xml_schema::short_pskel&);

  void
  current_max_100_parallel_parser (::xml_schema::short_pskel&);

  void
  pressure_tolerance_parser (::xml_schema::byte_pskel&);

  void
  fan_current_gain_parser (::xml_schema::byte_pskel&);

  void
  fan_current_parser (::xml_schema::short_pskel&);

  void
  pump_current_parser (::xml_schema::short_pskel&);

  void
  pump_threshold_parser (::xml_schema::short_pskel&);

  void
  enabled_parser (::xml_schema::byte_pskel&);

  void
  inactiv_shutdown_parser (::xml_schema::byte_pskel&);

  void
  inactiv_emcy_parser (::xml_schema::byte_pskel&);

  void
  outval_inactiv_parser (::xml_schema::byte_pskel&);

  void
  livetime_limit_parser (::xml_schema::byte_pskel&);

  void
  timestamp_parser (::xml_schema::byte_pskel&);

  void
  threshold_parser (::xml_schema::byte_pskel&);

  void
  interval_parser (::xml_schema::byte_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  configurationType_pskel (::xml_schema::string_pskel* tiein);

  // Implementation details.
  //
  virtual ::std::string
  post_string ();

  protected:
  configurationType_pskel* configurationType_impl_;
  configurationType_pskel (configurationType_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::byte_pskel* polarity_parser_;
  ::xml_schema::byte_pskel* sample_rate_parser_;
  ::xml_schema::byte_pskel* debounce_parser_;
  ::xml_schema::byte_pskel* temp_tolerance_parser_;
  ::xml_schema::short_pskel* sampling_period_parser_;
  ::xml_schema::short_pskel* fan_speed_parser_;
  ::xml_schema::short_pskel* fan_threshold_parser_;
  ::xml_schema::short_pskel* current_gain_parser_;
  ::xml_schema::short_pskel* heater_current_parser_;
  ::xml_schema::short_pskel* heater_threshold_parser_;
  ::xml_schema::short_pskel* current_deviation_parser_;
  ::xml_schema::short_pskel* current_min_230_serial_parser_;
  ::xml_schema::short_pskel* current_max_230_serial_parser_;
  ::xml_schema::short_pskel* current_min_100_serial_parser_;
  ::xml_schema::short_pskel* current_max_100_serial_parser_;
  ::xml_schema::short_pskel* current_min_100_parallel_parser_;
  ::xml_schema::short_pskel* current_max_100_parallel_parser_;
  ::xml_schema::byte_pskel* pressure_tolerance_parser_;
  ::xml_schema::byte_pskel* fan_current_gain_parser_;
  ::xml_schema::short_pskel* fan_current_parser_;
  ::xml_schema::short_pskel* pump_current_parser_;
  ::xml_schema::short_pskel* pump_threshold_parser_;
  ::xml_schema::byte_pskel* enabled_parser_;
  ::xml_schema::byte_pskel* inactiv_shutdown_parser_;
  ::xml_schema::byte_pskel* inactiv_emcy_parser_;
  ::xml_schema::byte_pskel* outval_inactiv_parser_;
  ::xml_schema::byte_pskel* livetime_limit_parser_;
  ::xml_schema::byte_pskel* timestamp_parser_;
  ::xml_schema::byte_pskel* threshold_parser_;
  ::xml_schema::byte_pskel* interval_parser_;
};

class limitswitchType_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  index (signed char);

  // Elements.
  //
  virtual void
  configuration (const ::configurationType&);

  virtual ::limitswitchType
  post_limitswitchType () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::byte_pskel& /* index */,
           ::configurationType_pskel& /* configuration */);

  // Individual attribute parsers.
  //
  void
  index_parser (::xml_schema::byte_pskel&);

  // Individual element parsers.
  //
  void
  configuration_parser (::configurationType_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  limitswitchType_pskel ();

  // Implementation details.
  //
  protected:
  limitswitchType_pskel* limitswitchType_impl_;
  limitswitchType_pskel (limitswitchType_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::byte_pskel* index_parser_;
  ::configurationType_pskel* configuration_parser_;

  public:
  struct v_state_descr_
  {
    void (::limitswitchType_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class position_codeType_pskel: public ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  value (signed char);

  virtual void
  stop (signed char);

  virtual void
  stop_dir (const ::std::string&);

  virtual void
  position (signed char);

  virtual void
  width (signed char);

  virtual void
  deviation (signed char);

  virtual void
  dir_check (signed char);

  virtual void
  hit_skip (signed char);

  virtual ::position_codeType
  post_position_codeType () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::byte_pskel& /* value */,
           ::xml_schema::byte_pskel& /* stop */,
           ::xml_schema::string_pskel& /* stop_dir */,
           ::xml_schema::byte_pskel& /* position */,
           ::xml_schema::byte_pskel& /* width */,
           ::xml_schema::byte_pskel& /* deviation */,
           ::xml_schema::byte_pskel& /* dir_check */,
           ::xml_schema::byte_pskel& /* hit_skip */);

  // Individual attribute parsers.
  //
  void
  value_parser (::xml_schema::byte_pskel&);

  void
  stop_parser (::xml_schema::byte_pskel&);

  void
  stop_dir_parser (::xml_schema::string_pskel&);

  void
  position_parser (::xml_schema::byte_pskel&);

  void
  width_parser (::xml_schema::byte_pskel&);

  void
  deviation_parser (::xml_schema::byte_pskel&);

  void
  dir_check_parser (::xml_schema::byte_pskel&);

  void
  hit_skip_parser (::xml_schema::byte_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  position_codeType_pskel (::xml_schema::string_pskel* tiein);

  // Implementation details.
  //
  virtual ::std::string
  post_string ();

  protected:
  position_codeType_pskel* position_codeType_impl_;
  position_codeType_pskel (position_codeType_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::byte_pskel* value_parser_;
  ::xml_schema::byte_pskel* stop_parser_;
  ::xml_schema::string_pskel* stop_dir_parser_;
  ::xml_schema::byte_pskel* position_parser_;
  ::xml_schema::byte_pskel* width_parser_;
  ::xml_schema::byte_pskel* deviation_parser_;
  ::xml_schema::byte_pskel* dir_check_parser_;
  ::xml_schema::byte_pskel* hit_skip_parser_;
};

class limitswitchesType_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Elements.
  //
  virtual void
  limitswitch (const ::limitswitchType&);

  virtual void
  position_code (const ::position_codeType&);

  virtual ::limitswitchesType*
  post_limitswitchesType () = 0;

  // Parser construction API.
  //
  void
  parsers (::limitswitchType_pskel& /* limitswitch */,
           ::position_codeType_pskel& /* position_code */);

  // Individual element parsers.
  //
  void
  limitswitch_parser (::limitswitchType_pskel&);

  void
  position_code_parser (::position_codeType_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  limitswitchesType_pskel ();

  // Implementation details.
  //
  protected:
  limitswitchesType_pskel* limitswitchesType_impl_;
  limitswitchesType_pskel (limitswitchesType_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  ::limitswitchType_pskel* limitswitch_parser_;
  ::position_codeType_pskel* position_code_parser_;

  public:
  struct v_state_descr_
  {
    void (::limitswitchesType_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class position_coverageType_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Elements.
  //
  virtual void
  encoder (const ::encoderType&);

  virtual void
  limitswitches (::limitswitchesType*);

  virtual ::position_coverageType*
  post_position_coverageType () = 0;

  // Parser construction API.
  //
  void
  parsers (::encoderType_pskel& /* encoder */,
           ::limitswitchesType_pskel& /* limitswitches */);

  // Individual element parsers.
  //
  void
  encoder_parser (::encoderType_pskel&);

  void
  limitswitches_parser (::limitswitchesType_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  position_coverageType_pskel ();

  // Implementation details.
  //
  protected:
  position_coverageType_pskel* position_coverageType_impl_;
  position_coverageType_pskel (position_coverageType_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  ::encoderType_pskel* encoder_parser_;
  ::limitswitchesType_pskel* limitswitches_parser_;

  public:
  struct v_state_descr_
  {
    void (::position_coverageType_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class supervisionType_pskel: public ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  steploss_warn_limit (signed char);

  virtual void
  steploss_error_limit (signed char);

  virtual void
  current_limit (short);

  virtual ::supervisionType
  post_supervisionType () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::byte_pskel& /* steploss_warn_limit */,
           ::xml_schema::byte_pskel& /* steploss_error_limit */,
           ::xml_schema::short_pskel& /* current_limit */);

  // Individual attribute parsers.
  //
  void
  steploss_warn_limit_parser (::xml_schema::byte_pskel&);

  void
  steploss_error_limit_parser (::xml_schema::byte_pskel&);

  void
  current_limit_parser (::xml_schema::short_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  supervisionType_pskel (::xml_schema::string_pskel* tiein);

  // Implementation details.
  //
  virtual ::std::string
  post_string ();

  protected:
  supervisionType_pskel* supervisionType_impl_;
  supervisionType_pskel (supervisionType_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::byte_pskel* steploss_warn_limit_parser_;
  ::xml_schema::byte_pskel* steploss_error_limit_parser_;
  ::xml_schema::short_pskel* current_limit_parser_;
};

class driverType_pskel: public ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  type (const ::std::string&);

  virtual void
  reg_chopConf (const ::std::string&);

  virtual void
  reg_smartEn (const ::std::string&);

  virtual void
  reg_sgcsConf (const ::std::string&);

  virtual void
  reg_drvConf (const ::std::string&);

  virtual ::driverType
  post_driverType () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::string_pskel& /* type */,
           ::xml_schema::string_pskel& /* reg_chopConf */,
           ::xml_schema::string_pskel& /* reg_smartEn */,
           ::xml_schema::string_pskel& /* reg_sgcsConf */,
           ::xml_schema::string_pskel& /* reg_drvConf */);

  // Individual attribute parsers.
  //
  void
  type_parser (::xml_schema::string_pskel&);

  void
  reg_chopConf_parser (::xml_schema::string_pskel&);

  void
  reg_smartEn_parser (::xml_schema::string_pskel&);

  void
  reg_sgcsConf_parser (::xml_schema::string_pskel&);

  void
  reg_drvConf_parser (::xml_schema::string_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  driverType_pskel (::xml_schema::string_pskel* tiein);

  // Implementation details.
  //
  virtual ::std::string
  post_string ();

  protected:
  driverType_pskel* driverType_impl_;
  driverType_pskel (driverType_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::string_pskel* type_parser_;
  ::xml_schema::string_pskel* reg_chopConf_parser_;
  ::xml_schema::string_pskel* reg_smartEn_parser_;
  ::xml_schema::string_pskel* reg_sgcsConf_parser_;
  ::xml_schema::string_pskel* reg_drvConf_parser_;
};

class motion_profileType_pskel: public ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  speed_min (signed char);

  virtual void
  speed_max (short);

  virtual void
  acc (short);

  virtual void
  dec (short);

  virtual void
  acc_time (signed char);

  virtual void
  dec_time (signed char);

  virtual void
  micro_steps (signed char);

  virtual void
  ramp_type (signed char);

  virtual ::motion_profileType
  post_motion_profileType () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::byte_pskel& /* speed_min */,
           ::xml_schema::short_pskel& /* speed_max */,
           ::xml_schema::short_pskel& /* acc */,
           ::xml_schema::short_pskel& /* dec */,
           ::xml_schema::byte_pskel& /* acc_time */,
           ::xml_schema::byte_pskel& /* dec_time */,
           ::xml_schema::byte_pskel& /* micro_steps */,
           ::xml_schema::byte_pskel& /* ramp_type */);

  // Individual attribute parsers.
  //
  void
  speed_min_parser (::xml_schema::byte_pskel&);

  void
  speed_max_parser (::xml_schema::short_pskel&);

  void
  acc_parser (::xml_schema::short_pskel&);

  void
  dec_parser (::xml_schema::short_pskel&);

  void
  acc_time_parser (::xml_schema::byte_pskel&);

  void
  dec_time_parser (::xml_schema::byte_pskel&);

  void
  micro_steps_parser (::xml_schema::byte_pskel&);

  void
  ramp_type_parser (::xml_schema::byte_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  motion_profileType_pskel (::xml_schema::string_pskel* tiein);

  // Implementation details.
  //
  virtual ::std::string
  post_string ();

  protected:
  motion_profileType_pskel* motion_profileType_impl_;
  motion_profileType_pskel (motion_profileType_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::byte_pskel* speed_min_parser_;
  ::xml_schema::short_pskel* speed_max_parser_;
  ::xml_schema::short_pskel* acc_parser_;
  ::xml_schema::short_pskel* dec_parser_;
  ::xml_schema::byte_pskel* acc_time_parser_;
  ::xml_schema::byte_pskel* dec_time_parser_;
  ::xml_schema::byte_pskel* micro_steps_parser_;
  ::xml_schema::byte_pskel* ramp_type_parser_;
};

class motion_profilesType_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Elements.
  //
  virtual void
  motion_profile (const ::motion_profileType&);

  virtual ::motion_profilesType*
  post_motion_profilesType () = 0;

  // Parser construction API.
  //
  void
  parsers (::motion_profileType_pskel& /* motion_profile */);

  // Individual element parsers.
  //
  void
  motion_profile_parser (::motion_profileType_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  motion_profilesType_pskel ();

  // Implementation details.
  //
  protected:
  motion_profilesType_pskel* motion_profilesType_impl_;
  motion_profilesType_pskel (motion_profilesType_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  ::motion_profileType_pskel* motion_profile_parser_;

  public:
  struct v_state_descr_
  {
    void (::motion_profilesType_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class pid_controllerType_pskel: public ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  max_temperature (short);

  virtual void
  controller_gain (short);

  virtual void
  reset_time (short);

  virtual void
  derivative_time (signed char);

  virtual void
  max_pressure (signed char);

  virtual void
  min_pressure (signed char);

  virtual ::pid_controllerType
  post_pid_controllerType () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::short_pskel& /* max_temperature */,
           ::xml_schema::short_pskel& /* controller_gain */,
           ::xml_schema::short_pskel& /* reset_time */,
           ::xml_schema::byte_pskel& /* derivative_time */,
           ::xml_schema::byte_pskel& /* max_pressure */,
           ::xml_schema::byte_pskel& /* min_pressure */);

  // Individual attribute parsers.
  //
  void
  max_temperature_parser (::xml_schema::short_pskel&);

  void
  controller_gain_parser (::xml_schema::short_pskel&);

  void
  reset_time_parser (::xml_schema::short_pskel&);

  void
  derivative_time_parser (::xml_schema::byte_pskel&);

  void
  max_pressure_parser (::xml_schema::byte_pskel&);

  void
  min_pressure_parser (::xml_schema::byte_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  pid_controllerType_pskel (::xml_schema::string_pskel* tiein);

  // Implementation details.
  //
  virtual ::std::string
  post_string ();

  protected:
  pid_controllerType_pskel* pid_controllerType_impl_;
  pid_controllerType_pskel (pid_controllerType_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::short_pskel* max_temperature_parser_;
  ::xml_schema::short_pskel* controller_gain_parser_;
  ::xml_schema::short_pskel* reset_time_parser_;
  ::xml_schema::byte_pskel* derivative_time_parser_;
  ::xml_schema::byte_pskel* max_pressure_parser_;
  ::xml_schema::byte_pskel* min_pressure_parser_;
};

class pid_controllersType_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Elements.
  //
  virtual void
  pid_controller (const ::pid_controllerType&);

  virtual ::pid_controllersType
  post_pid_controllersType () = 0;

  // Parser construction API.
  //
  void
  parsers (::pid_controllerType_pskel& /* pid_controller */);

  // Individual element parsers.
  //
  void
  pid_controller_parser (::pid_controllerType_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  pid_controllersType_pskel ();

  // Implementation details.
  //
  protected:
  pid_controllersType_pskel* pid_controllersType_impl_;
  pid_controllersType_pskel (pid_controllersType_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  ::pid_controllerType_pskel* pid_controller_parser_;

  public:
  struct v_state_descr_
  {
    void (::pid_controllersType_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class pwm_controllerType_pskel: public ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  max_actuating_value (short);

  virtual void
  min_actuating_value (short);

  virtual void
  max_pwm_duty (signed char);

  virtual void
  min_pwm_duty (signed char);

  virtual ::pwm_controllerType
  post_pwm_controllerType () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::short_pskel& /* max_actuating_value */,
           ::xml_schema::short_pskel& /* min_actuating_value */,
           ::xml_schema::byte_pskel& /* max_pwm_duty */,
           ::xml_schema::byte_pskel& /* min_pwm_duty */);

  // Individual attribute parsers.
  //
  void
  max_actuating_value_parser (::xml_schema::short_pskel&);

  void
  min_actuating_value_parser (::xml_schema::short_pskel&);

  void
  max_pwm_duty_parser (::xml_schema::byte_pskel&);

  void
  min_pwm_duty_parser (::xml_schema::byte_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  pwm_controllerType_pskel (::xml_schema::string_pskel* tiein);

  // Implementation details.
  //
  virtual ::std::string
  post_string ();

  protected:
  pwm_controllerType_pskel* pwm_controllerType_impl_;
  pwm_controllerType_pskel (pwm_controllerType_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::short_pskel* max_actuating_value_parser_;
  ::xml_schema::short_pskel* min_actuating_value_parser_;
  ::xml_schema::byte_pskel* max_pwm_duty_parser_;
  ::xml_schema::byte_pskel* min_pwm_duty_parser_;
};

class functionmoduleType_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  type (const ::std::string&);

  virtual void
  key (const ::std::string&);

  virtual void
  name (const ::std::string&);

  virtual void
  interface (signed char);

  virtual void
  fct_instanceID (const ::std::string&);

  // Elements.
  //
  virtual void
  rotation (const ::rotationType&);

  virtual void
  reference_run (const ::reference_runType&);

  virtual void
  position_coverage (::position_coverageType*);

  virtual void
  supervision (const ::supervisionType&);

  virtual void
  driver (const ::driverType&);

  virtual void
  motion_profiles (::motion_profilesType*);

  virtual void
  configuration (const ::configurationType&);

  virtual void
  pid_controllers (const ::pid_controllersType&);

  virtual void
  pwm_controller (const ::pwm_controllerType&);

  virtual ::functionmoduleType*
  post_functionmoduleType () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::string_pskel& /* type */,
           ::xml_schema::string_pskel& /* key */,
           ::xml_schema::string_pskel& /* name */,
           ::xml_schema::byte_pskel& /* interface */,
           ::xml_schema::string_pskel& /* fct_instanceID */,
           ::rotationType_pskel& /* rotation */,
           ::reference_runType_pskel& /* reference_run */,
           ::position_coverageType_pskel& /* position_coverage */,
           ::supervisionType_pskel& /* supervision */,
           ::driverType_pskel& /* driver */,
           ::motion_profilesType_pskel& /* motion_profiles */,
           ::configurationType_pskel& /* configuration */,
           ::pid_controllersType_pskel& /* pid_controllers */,
           ::pwm_controllerType_pskel& /* pwm_controller */);

  // Individual attribute parsers.
  //
  void
  type_parser (::xml_schema::string_pskel&);

  void
  key_parser (::xml_schema::string_pskel&);

  void
  name_parser (::xml_schema::string_pskel&);

  void
  interface_parser (::xml_schema::byte_pskel&);

  void
  fct_instanceID_parser (::xml_schema::string_pskel&);

  // Individual element parsers.
  //
  void
  rotation_parser (::rotationType_pskel&);

  void
  reference_run_parser (::reference_runType_pskel&);

  void
  position_coverage_parser (::position_coverageType_pskel&);

  void
  supervision_parser (::supervisionType_pskel&);

  void
  driver_parser (::driverType_pskel&);

  void
  motion_profiles_parser (::motion_profilesType_pskel&);

  void
  configuration_parser (::configurationType_pskel&);

  void
  pid_controllers_parser (::pid_controllersType_pskel&);

  void
  pwm_controller_parser (::pwm_controllerType_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  functionmoduleType_pskel ();

  // Implementation details.
  //
  protected:
  functionmoduleType_pskel* functionmoduleType_impl_;
  functionmoduleType_pskel (functionmoduleType_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  virtual bool
  _characters_impl (const ::xsde::cxx::ro_string&);

  protected:
  ::xml_schema::string_pskel* type_parser_;
  ::xml_schema::string_pskel* key_parser_;
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::byte_pskel* interface_parser_;
  ::xml_schema::string_pskel* fct_instanceID_parser_;
  ::rotationType_pskel* rotation_parser_;
  ::reference_runType_pskel* reference_run_parser_;
  ::position_coverageType_pskel* position_coverage_parser_;
  ::supervisionType_pskel* supervision_parser_;
  ::driverType_pskel* driver_parser_;
  ::motion_profilesType_pskel* motion_profiles_parser_;
  ::configurationType_pskel* configuration_parser_;
  ::pid_controllersType_pskel* pid_controllers_parser_;
  ::pwm_controllerType_pskel* pwm_controller_parser_;

  public:
  struct v_state_descr_
  {
    void (::functionmoduleType_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class functionmodulesType_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Elements.
  //
  virtual void
  functionmodule (::functionmoduleType*);

  virtual ::functionmodulesType*
  post_functionmodulesType () = 0;

  // Parser construction API.
  //
  void
  parsers (::functionmoduleType_pskel& /* functionmodule */);

  // Individual element parsers.
  //
  void
  functionmodule_parser (::functionmoduleType_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  functionmodulesType_pskel ();

  // Implementation details.
  //
  protected:
  functionmodulesType_pskel* functionmodulesType_impl_;
  functionmodulesType_pskel (functionmodulesType_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  ::functionmoduleType_pskel* functionmodule_parser_;

  public:
  struct v_state_descr_
  {
    void (::functionmodulesType_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class slaveType_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  type (const ::std::string&);

  virtual void
  key (const ::std::string&);

  virtual void
  name (const ::std::string&);

  virtual void
  virtual_ (signed char);

  // Elements.
  //
  virtual void
  nodetype (signed char);

  virtual void
  nodeindex (signed char);

  virtual void
  functionmodules (::functionmodulesType*);

  virtual ::slaveType*
  post_slaveType () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::string_pskel& /* type */,
           ::xml_schema::string_pskel& /* key */,
           ::xml_schema::string_pskel& /* name */,
           ::xml_schema::byte_pskel& /* virtual */,
           ::xml_schema::byte_pskel& /* nodetype */,
           ::xml_schema::byte_pskel& /* nodeindex */,
           ::functionmodulesType_pskel& /* functionmodules */);

  // Individual attribute parsers.
  //
  void
  type_parser (::xml_schema::string_pskel&);

  void
  key_parser (::xml_schema::string_pskel&);

  void
  name_parser (::xml_schema::string_pskel&);

  void
  virtual__parser (::xml_schema::byte_pskel&);

  // Individual element parsers.
  //
  void
  nodetype_parser (::xml_schema::byte_pskel&);

  void
  nodeindex_parser (::xml_schema::byte_pskel&);

  void
  functionmodules_parser (::functionmodulesType_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  slaveType_pskel ();

  // Implementation details.
  //
  protected:
  slaveType_pskel* slaveType_impl_;
  slaveType_pskel (slaveType_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::string_pskel* type_parser_;
  ::xml_schema::string_pskel* key_parser_;
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::byte_pskel* virtual__parser_;
  ::xml_schema::byte_pskel* nodetype_parser_;
  ::xml_schema::byte_pskel* nodeindex_parser_;
  ::functionmodulesType_pskel* functionmodules_parser_;

  public:
  struct v_state_descr_
  {
    void (::slaveType_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class parameter_slavesType_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Elements.
  //
  virtual void
  slave (::slaveType*);

  virtual ::parameter_slavesType*
  post_parameter_slavesType () = 0;

  // Parser construction API.
  //
  void
  parsers (::slaveType_pskel& /* slave */);

  // Individual element parsers.
  //
  void
  slave_parser (::slaveType_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  parameter_slavesType_pskel ();

  // Implementation details.
  //
  protected:
  parameter_slavesType_pskel* parameter_slavesType_impl_;
  parameter_slavesType_pskel (parameter_slavesType_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  ::slaveType_pskel* slave_parser_;

  public:
  struct v_state_descr_
  {
    void (::parameter_slavesType_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class hwconfigType_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  version (float);

  // Elements.
  //
  virtual void
  parameter_master (::parameter_masterType*);

  virtual void
  parameter_slaves (::parameter_slavesType*);

  virtual void
  devices (::devicesType*);

  virtual ::hwconfigType*
  post_hwconfigType () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::float_pskel& /* version */,
           ::parameter_masterType_pskel& /* parameter_master */,
           ::parameter_slavesType_pskel& /* parameter_slaves */,
           ::devicesType_pskel& /* devices */);

  // Individual attribute parsers.
  //
  void
  version_parser (::xml_schema::float_pskel&);

  // Individual element parsers.
  //
  void
  parameter_master_parser (::parameter_masterType_pskel&);

  void
  parameter_slaves_parser (::parameter_slavesType_pskel&);

  void
  devices_parser (::devicesType_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  hwconfigType_pskel ();

  // Implementation details.
  //
  protected:
  hwconfigType_pskel* hwconfigType_impl_;
  hwconfigType_pskel (hwconfigType_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::float_pskel* version_parser_;
  ::parameter_masterType_pskel* parameter_master_parser_;
  ::parameter_slavesType_pskel* parameter_slaves_parser_;
  ::devicesType_pskel* devices_parser_;

  public:
  struct v_state_descr_
  {
    void (::hwconfigType_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // HWCONFIG_PSKEL_HPP
