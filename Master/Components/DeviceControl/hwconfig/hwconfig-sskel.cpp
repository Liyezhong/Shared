// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "hwconfig-sskel.hpp"

// can_interfaceType_sskel
//

void can_interfaceType_sskel::
interface_serializer (::xml_schema::string_sskel& interface)
{
  this->interface_serializer_ = &interface;
}

void can_interfaceType_sskel::
serializers (::xml_schema::string_sskel& interface)
{
  this->interface_serializer_ = &interface;
}

can_interfaceType_sskel::
can_interfaceType_sskel (::xml_schema::string_sskel* tiein)
: ::xml_schema::string_sskel (tiein, 0),
  can_interfaceType_impl_ (0),
  interface_serializer_ (0)
{
}

can_interfaceType_sskel::
can_interfaceType_sskel (can_interfaceType_sskel* impl, void*)
: ::xml_schema::string_sskel (impl, 0),
  can_interfaceType_impl_ (impl),
  interface_serializer_ (0)
{
}

// tcp_interfaceType_sskel
//

void tcp_interfaceType_sskel::
usage_serializer (::xml_schema::byte_sskel& usage)
{
  this->usage_serializer_ = &usage;
}

void tcp_interfaceType_sskel::
serializers (::xml_schema::byte_sskel& usage)
{
  this->usage_serializer_ = &usage;
}

tcp_interfaceType_sskel::
tcp_interfaceType_sskel (::xml_schema::string_sskel* tiein)
: ::xml_schema::string_sskel (tiein, 0),
  tcp_interfaceType_impl_ (0),
  usage_serializer_ (0)
{
}

tcp_interfaceType_sskel::
tcp_interfaceType_sskel (tcp_interfaceType_sskel* impl, void*)
: ::xml_schema::string_sskel (impl, 0),
  tcp_interfaceType_impl_ (impl),
  usage_serializer_ (0)
{
}

// serial_numberType_sskel
//

void serial_numberType_sskel::
serialno_serializer (::xml_schema::string_sskel& serialno)
{
  this->serialno_serializer_ = &serialno;
}

void serial_numberType_sskel::
serializers (::xml_schema::string_sskel& serialno)
{
  this->serialno_serializer_ = &serialno;
}

serial_numberType_sskel::
serial_numberType_sskel (::xml_schema::string_sskel* tiein)
: ::xml_schema::string_sskel (tiein, 0),
  serial_numberType_impl_ (0),
  serialno_serializer_ (0)
{
}

serial_numberType_sskel::
serial_numberType_sskel (serial_numberType_sskel* impl, void*)
: ::xml_schema::string_sskel (impl, 0),
  serial_numberType_impl_ (impl),
  serialno_serializer_ (0)
{
}

// deviceType_sskel
//

void deviceType_sskel::
name_serializer (::xml_schema::string_sskel& name)
{
  this->name_serializer_ = &name;
}

void deviceType_sskel::
id_serializer (::xml_schema::string_sskel& id)
{
  this->id_serializer_ = &id;
}

void deviceType_sskel::
type_serializer (::xml_schema::string_sskel& type)
{
  this->type_serializer_ = &type;
}

void deviceType_sskel::
dev_instanceID_serializer (::xml_schema::string_sskel& dev_instanceID)
{
  this->dev_instanceID_serializer_ = &dev_instanceID;
}

void deviceType_sskel::
optional_serializer (::xml_schema::byte_sskel& optional)
{
  this->optional_serializer_ = &optional;
}

void deviceType_sskel::
functionmodules_serializer (::functionmodulesType_sskel& s)
{
  this->functionmodules_serializer_ = &s;
}

void deviceType_sskel::
serializers (::xml_schema::string_sskel& name,
             ::xml_schema::string_sskel& id,
             ::xml_schema::string_sskel& type,
             ::xml_schema::string_sskel& dev_instanceID,
             ::xml_schema::byte_sskel& optional,
             ::functionmodulesType_sskel& functionmodules)
{
  this->name_serializer_ = &name;
  this->id_serializer_ = &id;
  this->type_serializer_ = &type;
  this->dev_instanceID_serializer_ = &dev_instanceID;
  this->optional_serializer_ = &optional;
  this->functionmodules_serializer_ = &functionmodules;
}

deviceType_sskel::
deviceType_sskel ()
: deviceType_impl_ (0),
  name_serializer_ (0),
  id_serializer_ (0),
  type_serializer_ (0),
  dev_instanceID_serializer_ (0),
  optional_serializer_ (0),
  functionmodules_serializer_ (0)
{
}

deviceType_sskel::
deviceType_sskel (deviceType_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  deviceType_impl_ (impl),
  name_serializer_ (0),
  id_serializer_ (0),
  type_serializer_ (0),
  dev_instanceID_serializer_ (0),
  optional_serializer_ (0),
  functionmodules_serializer_ (0)
{
}

// devicesType_sskel
//

void devicesType_sskel::
device_serializer (::deviceType_sskel& s)
{
  this->device_serializer_ = &s;
}

void devicesType_sskel::
serializers (::deviceType_sskel& device)
{
  this->device_serializer_ = &device;
}

devicesType_sskel::
devicesType_sskel ()
: devicesType_impl_ (0),
  device_serializer_ (0)
{
}

devicesType_sskel::
devicesType_sskel (devicesType_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  devicesType_impl_ (impl),
  device_serializer_ (0)
{
}

// retortType_sskel
//

void retortType_sskel::
name_serializer (::xml_schema::string_sskel& name)
{
  this->name_serializer_ = &name;
}

void retortType_sskel::
index_serializer (::xml_schema::byte_sskel& index)
{
  this->index_serializer_ = &index;
}

void retortType_sskel::
devices_serializer (::devicesType_sskel& s)
{
  this->devices_serializer_ = &s;
}

void retortType_sskel::
serializers (::xml_schema::string_sskel& name,
             ::xml_schema::byte_sskel& index,
             ::devicesType_sskel& devices)
{
  this->name_serializer_ = &name;
  this->index_serializer_ = &index;
  this->devices_serializer_ = &devices;
}

retortType_sskel::
retortType_sskel ()
: retortType_impl_ (0),
  name_serializer_ (0),
  index_serializer_ (0),
  devices_serializer_ (0)
{
}

retortType_sskel::
retortType_sskel (retortType_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  retortType_impl_ (impl),
  name_serializer_ (0),
  index_serializer_ (0),
  devices_serializer_ (0)
{
}

// retortsType_sskel
//

void retortsType_sskel::
retort_serializer (::retortType_sskel& s)
{
  this->retort_serializer_ = &s;
}

void retortsType_sskel::
serializers (::retortType_sskel& retort)
{
  this->retort_serializer_ = &retort;
}

retortsType_sskel::
retortsType_sskel ()
: retortsType_impl_ (0),
  retort_serializer_ (0)
{
}

retortsType_sskel::
retortsType_sskel (retortsType_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  retortsType_impl_ (impl),
  retort_serializer_ (0)
{
}

// parameter_masterType_sskel
//

void parameter_masterType_sskel::
folded_serializer (::xml_schema::string_sskel& folded)
{
  this->folded_serializer_ = &folded;
}

void parameter_masterType_sskel::
can_interface_serializer (::can_interfaceType_sskel& s)
{
  this->can_interface_serializer_ = &s;
}

void parameter_masterType_sskel::
tcp_interface_serializer (::tcp_interfaceType_sskel& s)
{
  this->tcp_interface_serializer_ = &s;
}

void parameter_masterType_sskel::
nodetype_serializer (::xml_schema::byte_sskel& s)
{
  this->nodetype_serializer_ = &s;
}

void parameter_masterType_sskel::
nodeindex_serializer (::xml_schema::byte_sskel& s)
{
  this->nodeindex_serializer_ = &s;
}

void parameter_masterType_sskel::
serial_number_serializer (::serial_numberType_sskel& s)
{
  this->serial_number_serializer_ = &s;
}

void parameter_masterType_sskel::
retorts_serializer (::retortsType_sskel& s)
{
  this->retorts_serializer_ = &s;
}

void parameter_masterType_sskel::
serializers (::xml_schema::string_sskel& folded,
             ::can_interfaceType_sskel& can_interface,
             ::tcp_interfaceType_sskel& tcp_interface,
             ::xml_schema::byte_sskel& nodetype,
             ::xml_schema::byte_sskel& nodeindex,
             ::serial_numberType_sskel& serial_number,
             ::retortsType_sskel& retorts)
{
  this->folded_serializer_ = &folded;
  this->can_interface_serializer_ = &can_interface;
  this->tcp_interface_serializer_ = &tcp_interface;
  this->nodetype_serializer_ = &nodetype;
  this->nodeindex_serializer_ = &nodeindex;
  this->serial_number_serializer_ = &serial_number;
  this->retorts_serializer_ = &retorts;
}

parameter_masterType_sskel::
parameter_masterType_sskel ()
: parameter_masterType_impl_ (0),
  folded_serializer_ (0),
  can_interface_serializer_ (0),
  tcp_interface_serializer_ (0),
  nodetype_serializer_ (0),
  nodeindex_serializer_ (0),
  serial_number_serializer_ (0),
  retorts_serializer_ (0)
{
}

parameter_masterType_sskel::
parameter_masterType_sskel (parameter_masterType_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  parameter_masterType_impl_ (impl),
  folded_serializer_ (0),
  can_interface_serializer_ (0),
  tcp_interface_serializer_ (0),
  nodetype_serializer_ (0),
  nodeindex_serializer_ (0),
  serial_number_serializer_ (0),
  retorts_serializer_ (0)
{
}

// rotationType_sskel
//

void rotationType_sskel::
type_serializer (::xml_schema::string_sskel& type)
{
  this->type_serializer_ = &type;
}

void rotationType_sskel::
direction_serializer (::xml_schema::string_sskel& direction)
{
  this->direction_serializer_ = &direction;
}

void rotationType_sskel::
steps_revolution_serializer (::xml_schema::short_sskel& steps_revolution)
{
  this->steps_revolution_serializer_ = &steps_revolution;
}

void rotationType_sskel::
position_min_serializer (::xml_schema::short_sskel& position_min)
{
  this->position_min_serializer_ = &position_min;
}

void rotationType_sskel::
position_max_serializer (::xml_schema::short_sskel& position_max)
{
  this->position_max_serializer_ = &position_max;
}

void rotationType_sskel::
speed_min_serializer (::xml_schema::byte_sskel& speed_min)
{
  this->speed_min_serializer_ = &speed_min;
}

void rotationType_sskel::
speed_max_serializer (::xml_schema::short_sskel& speed_max)
{
  this->speed_max_serializer_ = &speed_max;
}

void rotationType_sskel::
run_cs_serializer (::xml_schema::byte_sskel& run_cs)
{
  this->run_cs_serializer_ = &run_cs;
}

void rotationType_sskel::
stop_cs_serializer (::xml_schema::byte_sskel& stop_cs)
{
  this->stop_cs_serializer_ = &stop_cs;
}

void rotationType_sskel::
stop_cs_delay_serializer (::xml_schema::short_sskel& stop_cs_delay)
{
  this->stop_cs_delay_serializer_ = &stop_cs_delay;
}

void rotationType_sskel::
serializers (::xml_schema::string_sskel& type,
             ::xml_schema::string_sskel& direction,
             ::xml_schema::short_sskel& steps_revolution,
             ::xml_schema::short_sskel& position_min,
             ::xml_schema::short_sskel& position_max,
             ::xml_schema::byte_sskel& speed_min,
             ::xml_schema::short_sskel& speed_max,
             ::xml_schema::byte_sskel& run_cs,
             ::xml_schema::byte_sskel& stop_cs,
             ::xml_schema::short_sskel& stop_cs_delay)
{
  this->type_serializer_ = &type;
  this->direction_serializer_ = &direction;
  this->steps_revolution_serializer_ = &steps_revolution;
  this->position_min_serializer_ = &position_min;
  this->position_max_serializer_ = &position_max;
  this->speed_min_serializer_ = &speed_min;
  this->speed_max_serializer_ = &speed_max;
  this->run_cs_serializer_ = &run_cs;
  this->stop_cs_serializer_ = &stop_cs;
  this->stop_cs_delay_serializer_ = &stop_cs_delay;
}

rotationType_sskel::
rotationType_sskel (::xml_schema::string_sskel* tiein)
: ::xml_schema::string_sskel (tiein, 0),
  rotationType_impl_ (0),
  type_serializer_ (0),
  direction_serializer_ (0),
  steps_revolution_serializer_ (0),
  position_min_serializer_ (0),
  position_max_serializer_ (0),
  speed_min_serializer_ (0),
  speed_max_serializer_ (0),
  run_cs_serializer_ (0),
  stop_cs_serializer_ (0),
  stop_cs_delay_serializer_ (0)
{
}

rotationType_sskel::
rotationType_sskel (rotationType_sskel* impl, void*)
: ::xml_schema::string_sskel (impl, 0),
  rotationType_impl_ (impl),
  type_serializer_ (0),
  direction_serializer_ (0),
  steps_revolution_serializer_ (0),
  position_min_serializer_ (0),
  position_max_serializer_ (0),
  speed_min_serializer_ (0),
  speed_max_serializer_ (0),
  run_cs_serializer_ (0),
  stop_cs_serializer_ (0),
  stop_cs_delay_serializer_ (0)
{
}

// reference_runType_sskel
//

void reference_runType_sskel::
ref_position_serializer (::xml_schema::byte_sskel& ref_position)
{
  this->ref_position_serializer_ = &ref_position;
}

void reference_runType_sskel::
max_distance_serializer (::xml_schema::short_sskel& max_distance)
{
  this->max_distance_serializer_ = &max_distance;
}

void reference_runType_sskel::
timeout_serializer (::xml_schema::int_sskel& timeout)
{
  this->timeout_serializer_ = &timeout;
}

void reference_runType_sskel::
reverse_distance_serializer (::xml_schema::byte_sskel& reverse_distance)
{
  this->reverse_distance_serializer_ = &reverse_distance;
}

void reference_runType_sskel::
slow_speed_serializer (::xml_schema::byte_sskel& slow_speed)
{
  this->slow_speed_serializer_ = &slow_speed;
}

void reference_runType_sskel::
high_speed_serializer (::xml_schema::short_sskel& high_speed)
{
  this->high_speed_serializer_ = &high_speed;
}

void reference_runType_sskel::
refpos_offset_serializer (::xml_schema::byte_sskel& refpos_offset)
{
  this->refpos_offset_serializer_ = &refpos_offset;
}

void reference_runType_sskel::
serializers (::xml_schema::byte_sskel& ref_position,
             ::xml_schema::short_sskel& max_distance,
             ::xml_schema::int_sskel& timeout,
             ::xml_schema::byte_sskel& reverse_distance,
             ::xml_schema::byte_sskel& slow_speed,
             ::xml_schema::short_sskel& high_speed,
             ::xml_schema::byte_sskel& refpos_offset)
{
  this->ref_position_serializer_ = &ref_position;
  this->max_distance_serializer_ = &max_distance;
  this->timeout_serializer_ = &timeout;
  this->reverse_distance_serializer_ = &reverse_distance;
  this->slow_speed_serializer_ = &slow_speed;
  this->high_speed_serializer_ = &high_speed;
  this->refpos_offset_serializer_ = &refpos_offset;
}

reference_runType_sskel::
reference_runType_sskel (::xml_schema::string_sskel* tiein)
: ::xml_schema::string_sskel (tiein, 0),
  reference_runType_impl_ (0),
  ref_position_serializer_ (0),
  max_distance_serializer_ (0),
  timeout_serializer_ (0),
  reverse_distance_serializer_ (0),
  slow_speed_serializer_ (0),
  high_speed_serializer_ (0),
  refpos_offset_serializer_ (0)
{
}

reference_runType_sskel::
reference_runType_sskel (reference_runType_sskel* impl, void*)
: ::xml_schema::string_sskel (impl, 0),
  reference_runType_impl_ (impl),
  ref_position_serializer_ (0),
  max_distance_serializer_ (0),
  timeout_serializer_ (0),
  reverse_distance_serializer_ (0),
  slow_speed_serializer_ (0),
  high_speed_serializer_ (0),
  refpos_offset_serializer_ (0)
{
}

// encoderType_sskel
//

void encoderType_sskel::
type_serializer (::xml_schema::byte_sskel& type)
{
  this->type_serializer_ = &type;
}

void encoderType_sskel::
resolution_serializer (::xml_schema::short_sskel& resolution)
{
  this->resolution_serializer_ = &resolution;
}

void encoderType_sskel::
rotation_serializer (::xml_schema::string_sskel& rotation)
{
  this->rotation_serializer_ = &rotation;
}

void encoderType_sskel::
serializers (::xml_schema::byte_sskel& type,
             ::xml_schema::short_sskel& resolution,
             ::xml_schema::string_sskel& rotation)
{
  this->type_serializer_ = &type;
  this->resolution_serializer_ = &resolution;
  this->rotation_serializer_ = &rotation;
}

encoderType_sskel::
encoderType_sskel (::xml_schema::string_sskel* tiein)
: ::xml_schema::string_sskel (tiein, 0),
  encoderType_impl_ (0),
  type_serializer_ (0),
  resolution_serializer_ (0),
  rotation_serializer_ (0)
{
}

encoderType_sskel::
encoderType_sskel (encoderType_sskel* impl, void*)
: ::xml_schema::string_sskel (impl, 0),
  encoderType_impl_ (impl),
  type_serializer_ (0),
  resolution_serializer_ (0),
  rotation_serializer_ (0)
{
}

// configurationType_sskel
//

void configurationType_sskel::
polarity_serializer (::xml_schema::byte_sskel& polarity)
{
  this->polarity_serializer_ = &polarity;
}

void configurationType_sskel::
sample_rate_serializer (::xml_schema::byte_sskel& sample_rate)
{
  this->sample_rate_serializer_ = &sample_rate;
}

void configurationType_sskel::
debounce_serializer (::xml_schema::byte_sskel& debounce)
{
  this->debounce_serializer_ = &debounce;
}

void configurationType_sskel::
temp_tolerance_serializer (::xml_schema::byte_sskel& temp_tolerance)
{
  this->temp_tolerance_serializer_ = &temp_tolerance;
}

void configurationType_sskel::
sampling_period_serializer (::xml_schema::short_sskel& sampling_period)
{
  this->sampling_period_serializer_ = &sampling_period;
}

void configurationType_sskel::
fan_speed_serializer (::xml_schema::short_sskel& fan_speed)
{
  this->fan_speed_serializer_ = &fan_speed;
}

void configurationType_sskel::
fan_threshold_serializer (::xml_schema::short_sskel& fan_threshold)
{
  this->fan_threshold_serializer_ = &fan_threshold;
}

void configurationType_sskel::
current_gain_serializer (::xml_schema::short_sskel& current_gain)
{
  this->current_gain_serializer_ = &current_gain;
}

void configurationType_sskel::
heater_current_serializer (::xml_schema::short_sskel& heater_current)
{
  this->heater_current_serializer_ = &heater_current;
}

void configurationType_sskel::
heater_threshold_serializer (::xml_schema::short_sskel& heater_threshold)
{
  this->heater_threshold_serializer_ = &heater_threshold;
}

void configurationType_sskel::
current_deviation_serializer (::xml_schema::short_sskel& current_deviation)
{
  this->current_deviation_serializer_ = &current_deviation;
}

void configurationType_sskel::
current_min_230_serial_serializer (::xml_schema::short_sskel& current_min_230_serial)
{
  this->current_min_230_serial_serializer_ = &current_min_230_serial;
}

void configurationType_sskel::
current_max_230_serial_serializer (::xml_schema::short_sskel& current_max_230_serial)
{
  this->current_max_230_serial_serializer_ = &current_max_230_serial;
}

void configurationType_sskel::
current_min_100_serial_serializer (::xml_schema::short_sskel& current_min_100_serial)
{
  this->current_min_100_serial_serializer_ = &current_min_100_serial;
}

void configurationType_sskel::
current_max_100_serial_serializer (::xml_schema::short_sskel& current_max_100_serial)
{
  this->current_max_100_serial_serializer_ = &current_max_100_serial;
}

void configurationType_sskel::
current_min_100_parallel_serializer (::xml_schema::short_sskel& current_min_100_parallel)
{
  this->current_min_100_parallel_serializer_ = &current_min_100_parallel;
}

void configurationType_sskel::
current_max_100_parallel_serializer (::xml_schema::short_sskel& current_max_100_parallel)
{
  this->current_max_100_parallel_serializer_ = &current_max_100_parallel;
}

void configurationType_sskel::
pressure_tolerance_serializer (::xml_schema::byte_sskel& pressure_tolerance)
{
  this->pressure_tolerance_serializer_ = &pressure_tolerance;
}

void configurationType_sskel::
fan_current_gain_serializer (::xml_schema::byte_sskel& fan_current_gain)
{
  this->fan_current_gain_serializer_ = &fan_current_gain;
}

void configurationType_sskel::
fan_current_serializer (::xml_schema::short_sskel& fan_current)
{
  this->fan_current_serializer_ = &fan_current;
}

void configurationType_sskel::
pump_current_serializer (::xml_schema::short_sskel& pump_current)
{
  this->pump_current_serializer_ = &pump_current;
}

void configurationType_sskel::
pump_threshold_serializer (::xml_schema::short_sskel& pump_threshold)
{
  this->pump_threshold_serializer_ = &pump_threshold;
}

void configurationType_sskel::
enabled_serializer (::xml_schema::byte_sskel& enabled)
{
  this->enabled_serializer_ = &enabled;
}

void configurationType_sskel::
inactiv_shutdown_serializer (::xml_schema::byte_sskel& inactiv_shutdown)
{
  this->inactiv_shutdown_serializer_ = &inactiv_shutdown;
}

void configurationType_sskel::
inactiv_emcy_serializer (::xml_schema::byte_sskel& inactiv_emcy)
{
  this->inactiv_emcy_serializer_ = &inactiv_emcy;
}

void configurationType_sskel::
outval_inactiv_serializer (::xml_schema::byte_sskel& outval_inactiv)
{
  this->outval_inactiv_serializer_ = &outval_inactiv;
}

void configurationType_sskel::
livetime_limit_serializer (::xml_schema::byte_sskel& livetime_limit)
{
  this->livetime_limit_serializer_ = &livetime_limit;
}

void configurationType_sskel::
timestamp_serializer (::xml_schema::byte_sskel& timestamp)
{
  this->timestamp_serializer_ = &timestamp;
}

void configurationType_sskel::
threshold_serializer (::xml_schema::byte_sskel& threshold)
{
  this->threshold_serializer_ = &threshold;
}

void configurationType_sskel::
interval_serializer (::xml_schema::byte_sskel& interval)
{
  this->interval_serializer_ = &interval;
}

void configurationType_sskel::
serializers (::xml_schema::byte_sskel& polarity,
             ::xml_schema::byte_sskel& sample_rate,
             ::xml_schema::byte_sskel& debounce,
             ::xml_schema::byte_sskel& temp_tolerance,
             ::xml_schema::short_sskel& sampling_period,
             ::xml_schema::short_sskel& fan_speed,
             ::xml_schema::short_sskel& fan_threshold,
             ::xml_schema::short_sskel& current_gain,
             ::xml_schema::short_sskel& heater_current,
             ::xml_schema::short_sskel& heater_threshold,
             ::xml_schema::short_sskel& current_deviation,
             ::xml_schema::short_sskel& current_min_230_serial,
             ::xml_schema::short_sskel& current_max_230_serial,
             ::xml_schema::short_sskel& current_min_100_serial,
             ::xml_schema::short_sskel& current_max_100_serial,
             ::xml_schema::short_sskel& current_min_100_parallel,
             ::xml_schema::short_sskel& current_max_100_parallel,
             ::xml_schema::byte_sskel& pressure_tolerance,
             ::xml_schema::byte_sskel& fan_current_gain,
             ::xml_schema::short_sskel& fan_current,
             ::xml_schema::short_sskel& pump_current,
             ::xml_schema::short_sskel& pump_threshold,
             ::xml_schema::byte_sskel& enabled,
             ::xml_schema::byte_sskel& inactiv_shutdown,
             ::xml_schema::byte_sskel& inactiv_emcy,
             ::xml_schema::byte_sskel& outval_inactiv,
             ::xml_schema::byte_sskel& livetime_limit,
             ::xml_schema::byte_sskel& timestamp,
             ::xml_schema::byte_sskel& threshold,
             ::xml_schema::byte_sskel& interval)
{
  this->polarity_serializer_ = &polarity;
  this->sample_rate_serializer_ = &sample_rate;
  this->debounce_serializer_ = &debounce;
  this->temp_tolerance_serializer_ = &temp_tolerance;
  this->sampling_period_serializer_ = &sampling_period;
  this->fan_speed_serializer_ = &fan_speed;
  this->fan_threshold_serializer_ = &fan_threshold;
  this->current_gain_serializer_ = &current_gain;
  this->heater_current_serializer_ = &heater_current;
  this->heater_threshold_serializer_ = &heater_threshold;
  this->current_deviation_serializer_ = &current_deviation;
  this->current_min_230_serial_serializer_ = &current_min_230_serial;
  this->current_max_230_serial_serializer_ = &current_max_230_serial;
  this->current_min_100_serial_serializer_ = &current_min_100_serial;
  this->current_max_100_serial_serializer_ = &current_max_100_serial;
  this->current_min_100_parallel_serializer_ = &current_min_100_parallel;
  this->current_max_100_parallel_serializer_ = &current_max_100_parallel;
  this->pressure_tolerance_serializer_ = &pressure_tolerance;
  this->fan_current_gain_serializer_ = &fan_current_gain;
  this->fan_current_serializer_ = &fan_current;
  this->pump_current_serializer_ = &pump_current;
  this->pump_threshold_serializer_ = &pump_threshold;
  this->enabled_serializer_ = &enabled;
  this->inactiv_shutdown_serializer_ = &inactiv_shutdown;
  this->inactiv_emcy_serializer_ = &inactiv_emcy;
  this->outval_inactiv_serializer_ = &outval_inactiv;
  this->livetime_limit_serializer_ = &livetime_limit;
  this->timestamp_serializer_ = &timestamp;
  this->threshold_serializer_ = &threshold;
  this->interval_serializer_ = &interval;
}

configurationType_sskel::
configurationType_sskel (::xml_schema::string_sskel* tiein)
: ::xml_schema::string_sskel (tiein, 0),
  configurationType_impl_ (0),
  polarity_serializer_ (0),
  sample_rate_serializer_ (0),
  debounce_serializer_ (0),
  temp_tolerance_serializer_ (0),
  sampling_period_serializer_ (0),
  fan_speed_serializer_ (0),
  fan_threshold_serializer_ (0),
  current_gain_serializer_ (0),
  heater_current_serializer_ (0),
  heater_threshold_serializer_ (0),
  current_deviation_serializer_ (0),
  current_min_230_serial_serializer_ (0),
  current_max_230_serial_serializer_ (0),
  current_min_100_serial_serializer_ (0),
  current_max_100_serial_serializer_ (0),
  current_min_100_parallel_serializer_ (0),
  current_max_100_parallel_serializer_ (0),
  pressure_tolerance_serializer_ (0),
  fan_current_gain_serializer_ (0),
  fan_current_serializer_ (0),
  pump_current_serializer_ (0),
  pump_threshold_serializer_ (0),
  enabled_serializer_ (0),
  inactiv_shutdown_serializer_ (0),
  inactiv_emcy_serializer_ (0),
  outval_inactiv_serializer_ (0),
  livetime_limit_serializer_ (0),
  timestamp_serializer_ (0),
  threshold_serializer_ (0),
  interval_serializer_ (0)
{
}

configurationType_sskel::
configurationType_sskel (configurationType_sskel* impl, void*)
: ::xml_schema::string_sskel (impl, 0),
  configurationType_impl_ (impl),
  polarity_serializer_ (0),
  sample_rate_serializer_ (0),
  debounce_serializer_ (0),
  temp_tolerance_serializer_ (0),
  sampling_period_serializer_ (0),
  fan_speed_serializer_ (0),
  fan_threshold_serializer_ (0),
  current_gain_serializer_ (0),
  heater_current_serializer_ (0),
  heater_threshold_serializer_ (0),
  current_deviation_serializer_ (0),
  current_min_230_serial_serializer_ (0),
  current_max_230_serial_serializer_ (0),
  current_min_100_serial_serializer_ (0),
  current_max_100_serial_serializer_ (0),
  current_min_100_parallel_serializer_ (0),
  current_max_100_parallel_serializer_ (0),
  pressure_tolerance_serializer_ (0),
  fan_current_gain_serializer_ (0),
  fan_current_serializer_ (0),
  pump_current_serializer_ (0),
  pump_threshold_serializer_ (0),
  enabled_serializer_ (0),
  inactiv_shutdown_serializer_ (0),
  inactiv_emcy_serializer_ (0),
  outval_inactiv_serializer_ (0),
  livetime_limit_serializer_ (0),
  timestamp_serializer_ (0),
  threshold_serializer_ (0),
  interval_serializer_ (0)
{
}

// limitswitchType_sskel
//

void limitswitchType_sskel::
index_serializer (::xml_schema::byte_sskel& index)
{
  this->index_serializer_ = &index;
}

void limitswitchType_sskel::
configuration_serializer (::configurationType_sskel& s)
{
  this->configuration_serializer_ = &s;
}

void limitswitchType_sskel::
serializers (::xml_schema::byte_sskel& index,
             ::configurationType_sskel& configuration)
{
  this->index_serializer_ = &index;
  this->configuration_serializer_ = &configuration;
}

limitswitchType_sskel::
limitswitchType_sskel ()
: limitswitchType_impl_ (0),
  index_serializer_ (0),
  configuration_serializer_ (0)
{
}

limitswitchType_sskel::
limitswitchType_sskel (limitswitchType_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  limitswitchType_impl_ (impl),
  index_serializer_ (0),
  configuration_serializer_ (0)
{
}

// position_codeType_sskel
//

void position_codeType_sskel::
value_serializer (::xml_schema::byte_sskel& value)
{
  this->value_serializer_ = &value;
}

void position_codeType_sskel::
stop_serializer (::xml_schema::byte_sskel& stop)
{
  this->stop_serializer_ = &stop;
}

void position_codeType_sskel::
stop_dir_serializer (::xml_schema::string_sskel& stop_dir)
{
  this->stop_dir_serializer_ = &stop_dir;
}

void position_codeType_sskel::
position_serializer (::xml_schema::byte_sskel& position)
{
  this->position_serializer_ = &position;
}

void position_codeType_sskel::
width_serializer (::xml_schema::byte_sskel& width)
{
  this->width_serializer_ = &width;
}

void position_codeType_sskel::
deviation_serializer (::xml_schema::byte_sskel& deviation)
{
  this->deviation_serializer_ = &deviation;
}

void position_codeType_sskel::
dir_check_serializer (::xml_schema::byte_sskel& dir_check)
{
  this->dir_check_serializer_ = &dir_check;
}

void position_codeType_sskel::
hit_skip_serializer (::xml_schema::byte_sskel& hit_skip)
{
  this->hit_skip_serializer_ = &hit_skip;
}

void position_codeType_sskel::
serializers (::xml_schema::byte_sskel& value,
             ::xml_schema::byte_sskel& stop,
             ::xml_schema::string_sskel& stop_dir,
             ::xml_schema::byte_sskel& position,
             ::xml_schema::byte_sskel& width,
             ::xml_schema::byte_sskel& deviation,
             ::xml_schema::byte_sskel& dir_check,
             ::xml_schema::byte_sskel& hit_skip)
{
  this->value_serializer_ = &value;
  this->stop_serializer_ = &stop;
  this->stop_dir_serializer_ = &stop_dir;
  this->position_serializer_ = &position;
  this->width_serializer_ = &width;
  this->deviation_serializer_ = &deviation;
  this->dir_check_serializer_ = &dir_check;
  this->hit_skip_serializer_ = &hit_skip;
}

position_codeType_sskel::
position_codeType_sskel (::xml_schema::string_sskel* tiein)
: ::xml_schema::string_sskel (tiein, 0),
  position_codeType_impl_ (0),
  value_serializer_ (0),
  stop_serializer_ (0),
  stop_dir_serializer_ (0),
  position_serializer_ (0),
  width_serializer_ (0),
  deviation_serializer_ (0),
  dir_check_serializer_ (0),
  hit_skip_serializer_ (0)
{
}

position_codeType_sskel::
position_codeType_sskel (position_codeType_sskel* impl, void*)
: ::xml_schema::string_sskel (impl, 0),
  position_codeType_impl_ (impl),
  value_serializer_ (0),
  stop_serializer_ (0),
  stop_dir_serializer_ (0),
  position_serializer_ (0),
  width_serializer_ (0),
  deviation_serializer_ (0),
  dir_check_serializer_ (0),
  hit_skip_serializer_ (0)
{
}

// limitswitchesType_sskel
//

void limitswitchesType_sskel::
limitswitch_serializer (::limitswitchType_sskel& s)
{
  this->limitswitch_serializer_ = &s;
}

void limitswitchesType_sskel::
position_code_serializer (::position_codeType_sskel& s)
{
  this->position_code_serializer_ = &s;
}

void limitswitchesType_sskel::
serializers (::limitswitchType_sskel& limitswitch,
             ::position_codeType_sskel& position_code)
{
  this->limitswitch_serializer_ = &limitswitch;
  this->position_code_serializer_ = &position_code;
}

limitswitchesType_sskel::
limitswitchesType_sskel ()
: limitswitchesType_impl_ (0),
  limitswitch_serializer_ (0),
  position_code_serializer_ (0)
{
}

limitswitchesType_sskel::
limitswitchesType_sskel (limitswitchesType_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  limitswitchesType_impl_ (impl),
  limitswitch_serializer_ (0),
  position_code_serializer_ (0)
{
}

// position_coverageType_sskel
//

void position_coverageType_sskel::
encoder_serializer (::encoderType_sskel& s)
{
  this->encoder_serializer_ = &s;
}

void position_coverageType_sskel::
limitswitches_serializer (::limitswitchesType_sskel& s)
{
  this->limitswitches_serializer_ = &s;
}

void position_coverageType_sskel::
serializers (::encoderType_sskel& encoder,
             ::limitswitchesType_sskel& limitswitches)
{
  this->encoder_serializer_ = &encoder;
  this->limitswitches_serializer_ = &limitswitches;
}

position_coverageType_sskel::
position_coverageType_sskel ()
: position_coverageType_impl_ (0),
  encoder_serializer_ (0),
  limitswitches_serializer_ (0)
{
}

position_coverageType_sskel::
position_coverageType_sskel (position_coverageType_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  position_coverageType_impl_ (impl),
  encoder_serializer_ (0),
  limitswitches_serializer_ (0)
{
}

// supervisionType_sskel
//

void supervisionType_sskel::
steploss_warn_limit_serializer (::xml_schema::byte_sskel& steploss_warn_limit)
{
  this->steploss_warn_limit_serializer_ = &steploss_warn_limit;
}

void supervisionType_sskel::
steploss_error_limit_serializer (::xml_schema::byte_sskel& steploss_error_limit)
{
  this->steploss_error_limit_serializer_ = &steploss_error_limit;
}

void supervisionType_sskel::
current_limit_serializer (::xml_schema::short_sskel& current_limit)
{
  this->current_limit_serializer_ = &current_limit;
}

void supervisionType_sskel::
serializers (::xml_schema::byte_sskel& steploss_warn_limit,
             ::xml_schema::byte_sskel& steploss_error_limit,
             ::xml_schema::short_sskel& current_limit)
{
  this->steploss_warn_limit_serializer_ = &steploss_warn_limit;
  this->steploss_error_limit_serializer_ = &steploss_error_limit;
  this->current_limit_serializer_ = &current_limit;
}

supervisionType_sskel::
supervisionType_sskel (::xml_schema::string_sskel* tiein)
: ::xml_schema::string_sskel (tiein, 0),
  supervisionType_impl_ (0),
  steploss_warn_limit_serializer_ (0),
  steploss_error_limit_serializer_ (0),
  current_limit_serializer_ (0)
{
}

supervisionType_sskel::
supervisionType_sskel (supervisionType_sskel* impl, void*)
: ::xml_schema::string_sskel (impl, 0),
  supervisionType_impl_ (impl),
  steploss_warn_limit_serializer_ (0),
  steploss_error_limit_serializer_ (0),
  current_limit_serializer_ (0)
{
}

// driverType_sskel
//

void driverType_sskel::
type_serializer (::xml_schema::string_sskel& type)
{
  this->type_serializer_ = &type;
}

void driverType_sskel::
reg_chopConf_serializer (::xml_schema::string_sskel& reg_chopConf)
{
  this->reg_chopConf_serializer_ = &reg_chopConf;
}

void driverType_sskel::
reg_smartEn_serializer (::xml_schema::string_sskel& reg_smartEn)
{
  this->reg_smartEn_serializer_ = &reg_smartEn;
}

void driverType_sskel::
reg_sgcsConf_serializer (::xml_schema::string_sskel& reg_sgcsConf)
{
  this->reg_sgcsConf_serializer_ = &reg_sgcsConf;
}

void driverType_sskel::
reg_drvConf_serializer (::xml_schema::string_sskel& reg_drvConf)
{
  this->reg_drvConf_serializer_ = &reg_drvConf;
}

void driverType_sskel::
serializers (::xml_schema::string_sskel& type,
             ::xml_schema::string_sskel& reg_chopConf,
             ::xml_schema::string_sskel& reg_smartEn,
             ::xml_schema::string_sskel& reg_sgcsConf,
             ::xml_schema::string_sskel& reg_drvConf)
{
  this->type_serializer_ = &type;
  this->reg_chopConf_serializer_ = &reg_chopConf;
  this->reg_smartEn_serializer_ = &reg_smartEn;
  this->reg_sgcsConf_serializer_ = &reg_sgcsConf;
  this->reg_drvConf_serializer_ = &reg_drvConf;
}

driverType_sskel::
driverType_sskel (::xml_schema::string_sskel* tiein)
: ::xml_schema::string_sskel (tiein, 0),
  driverType_impl_ (0),
  type_serializer_ (0),
  reg_chopConf_serializer_ (0),
  reg_smartEn_serializer_ (0),
  reg_sgcsConf_serializer_ (0),
  reg_drvConf_serializer_ (0)
{
}

driverType_sskel::
driverType_sskel (driverType_sskel* impl, void*)
: ::xml_schema::string_sskel (impl, 0),
  driverType_impl_ (impl),
  type_serializer_ (0),
  reg_chopConf_serializer_ (0),
  reg_smartEn_serializer_ (0),
  reg_sgcsConf_serializer_ (0),
  reg_drvConf_serializer_ (0)
{
}

// motion_profileType_sskel
//

void motion_profileType_sskel::
speed_min_serializer (::xml_schema::byte_sskel& speed_min)
{
  this->speed_min_serializer_ = &speed_min;
}

void motion_profileType_sskel::
speed_max_serializer (::xml_schema::short_sskel& speed_max)
{
  this->speed_max_serializer_ = &speed_max;
}

void motion_profileType_sskel::
acc_serializer (::xml_schema::short_sskel& acc)
{
  this->acc_serializer_ = &acc;
}

void motion_profileType_sskel::
dec_serializer (::xml_schema::short_sskel& dec)
{
  this->dec_serializer_ = &dec;
}

void motion_profileType_sskel::
acc_time_serializer (::xml_schema::byte_sskel& acc_time)
{
  this->acc_time_serializer_ = &acc_time;
}

void motion_profileType_sskel::
dec_time_serializer (::xml_schema::byte_sskel& dec_time)
{
  this->dec_time_serializer_ = &dec_time;
}

void motion_profileType_sskel::
micro_steps_serializer (::xml_schema::byte_sskel& micro_steps)
{
  this->micro_steps_serializer_ = &micro_steps;
}

void motion_profileType_sskel::
ramp_type_serializer (::xml_schema::byte_sskel& ramp_type)
{
  this->ramp_type_serializer_ = &ramp_type;
}

void motion_profileType_sskel::
serializers (::xml_schema::byte_sskel& speed_min,
             ::xml_schema::short_sskel& speed_max,
             ::xml_schema::short_sskel& acc,
             ::xml_schema::short_sskel& dec,
             ::xml_schema::byte_sskel& acc_time,
             ::xml_schema::byte_sskel& dec_time,
             ::xml_schema::byte_sskel& micro_steps,
             ::xml_schema::byte_sskel& ramp_type)
{
  this->speed_min_serializer_ = &speed_min;
  this->speed_max_serializer_ = &speed_max;
  this->acc_serializer_ = &acc;
  this->dec_serializer_ = &dec;
  this->acc_time_serializer_ = &acc_time;
  this->dec_time_serializer_ = &dec_time;
  this->micro_steps_serializer_ = &micro_steps;
  this->ramp_type_serializer_ = &ramp_type;
}

motion_profileType_sskel::
motion_profileType_sskel (::xml_schema::string_sskel* tiein)
: ::xml_schema::string_sskel (tiein, 0),
  motion_profileType_impl_ (0),
  speed_min_serializer_ (0),
  speed_max_serializer_ (0),
  acc_serializer_ (0),
  dec_serializer_ (0),
  acc_time_serializer_ (0),
  dec_time_serializer_ (0),
  micro_steps_serializer_ (0),
  ramp_type_serializer_ (0)
{
}

motion_profileType_sskel::
motion_profileType_sskel (motion_profileType_sskel* impl, void*)
: ::xml_schema::string_sskel (impl, 0),
  motion_profileType_impl_ (impl),
  speed_min_serializer_ (0),
  speed_max_serializer_ (0),
  acc_serializer_ (0),
  dec_serializer_ (0),
  acc_time_serializer_ (0),
  dec_time_serializer_ (0),
  micro_steps_serializer_ (0),
  ramp_type_serializer_ (0)
{
}

// motion_profilesType_sskel
//

void motion_profilesType_sskel::
motion_profile_serializer (::motion_profileType_sskel& s)
{
  this->motion_profile_serializer_ = &s;
}

void motion_profilesType_sskel::
serializers (::motion_profileType_sskel& motion_profile)
{
  this->motion_profile_serializer_ = &motion_profile;
}

motion_profilesType_sskel::
motion_profilesType_sskel ()
: motion_profilesType_impl_ (0),
  motion_profile_serializer_ (0)
{
}

motion_profilesType_sskel::
motion_profilesType_sskel (motion_profilesType_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  motion_profilesType_impl_ (impl),
  motion_profile_serializer_ (0)
{
}

// pid_controllerType_sskel
//

void pid_controllerType_sskel::
max_temperature_serializer (::xml_schema::short_sskel& max_temperature)
{
  this->max_temperature_serializer_ = &max_temperature;
}

void pid_controllerType_sskel::
controller_gain_serializer (::xml_schema::short_sskel& controller_gain)
{
  this->controller_gain_serializer_ = &controller_gain;
}

void pid_controllerType_sskel::
reset_time_serializer (::xml_schema::short_sskel& reset_time)
{
  this->reset_time_serializer_ = &reset_time;
}

void pid_controllerType_sskel::
derivative_time_serializer (::xml_schema::byte_sskel& derivative_time)
{
  this->derivative_time_serializer_ = &derivative_time;
}

void pid_controllerType_sskel::
max_pressure_serializer (::xml_schema::byte_sskel& max_pressure)
{
  this->max_pressure_serializer_ = &max_pressure;
}

void pid_controllerType_sskel::
min_pressure_serializer (::xml_schema::byte_sskel& min_pressure)
{
  this->min_pressure_serializer_ = &min_pressure;
}

void pid_controllerType_sskel::
serializers (::xml_schema::short_sskel& max_temperature,
             ::xml_schema::short_sskel& controller_gain,
             ::xml_schema::short_sskel& reset_time,
             ::xml_schema::byte_sskel& derivative_time,
             ::xml_schema::byte_sskel& max_pressure,
             ::xml_schema::byte_sskel& min_pressure)
{
  this->max_temperature_serializer_ = &max_temperature;
  this->controller_gain_serializer_ = &controller_gain;
  this->reset_time_serializer_ = &reset_time;
  this->derivative_time_serializer_ = &derivative_time;
  this->max_pressure_serializer_ = &max_pressure;
  this->min_pressure_serializer_ = &min_pressure;
}

pid_controllerType_sskel::
pid_controllerType_sskel (::xml_schema::string_sskel* tiein)
: ::xml_schema::string_sskel (tiein, 0),
  pid_controllerType_impl_ (0),
  max_temperature_serializer_ (0),
  controller_gain_serializer_ (0),
  reset_time_serializer_ (0),
  derivative_time_serializer_ (0),
  max_pressure_serializer_ (0),
  min_pressure_serializer_ (0)
{
}

pid_controllerType_sskel::
pid_controllerType_sskel (pid_controllerType_sskel* impl, void*)
: ::xml_schema::string_sskel (impl, 0),
  pid_controllerType_impl_ (impl),
  max_temperature_serializer_ (0),
  controller_gain_serializer_ (0),
  reset_time_serializer_ (0),
  derivative_time_serializer_ (0),
  max_pressure_serializer_ (0),
  min_pressure_serializer_ (0)
{
}

// pid_controllersType_sskel
//

void pid_controllersType_sskel::
pid_controller_serializer (::pid_controllerType_sskel& s)
{
  this->pid_controller_serializer_ = &s;
}

void pid_controllersType_sskel::
serializers (::pid_controllerType_sskel& pid_controller)
{
  this->pid_controller_serializer_ = &pid_controller;
}

pid_controllersType_sskel::
pid_controllersType_sskel ()
: pid_controllersType_impl_ (0),
  pid_controller_serializer_ (0)
{
}

pid_controllersType_sskel::
pid_controllersType_sskel (pid_controllersType_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  pid_controllersType_impl_ (impl),
  pid_controller_serializer_ (0)
{
}

// pwm_controllerType_sskel
//

void pwm_controllerType_sskel::
max_actuating_value_serializer (::xml_schema::short_sskel& max_actuating_value)
{
  this->max_actuating_value_serializer_ = &max_actuating_value;
}

void pwm_controllerType_sskel::
min_actuating_value_serializer (::xml_schema::short_sskel& min_actuating_value)
{
  this->min_actuating_value_serializer_ = &min_actuating_value;
}

void pwm_controllerType_sskel::
max_pwm_duty_serializer (::xml_schema::byte_sskel& max_pwm_duty)
{
  this->max_pwm_duty_serializer_ = &max_pwm_duty;
}

void pwm_controllerType_sskel::
min_pwm_duty_serializer (::xml_schema::byte_sskel& min_pwm_duty)
{
  this->min_pwm_duty_serializer_ = &min_pwm_duty;
}

void pwm_controllerType_sskel::
serializers (::xml_schema::short_sskel& max_actuating_value,
             ::xml_schema::short_sskel& min_actuating_value,
             ::xml_schema::byte_sskel& max_pwm_duty,
             ::xml_schema::byte_sskel& min_pwm_duty)
{
  this->max_actuating_value_serializer_ = &max_actuating_value;
  this->min_actuating_value_serializer_ = &min_actuating_value;
  this->max_pwm_duty_serializer_ = &max_pwm_duty;
  this->min_pwm_duty_serializer_ = &min_pwm_duty;
}

pwm_controllerType_sskel::
pwm_controllerType_sskel (::xml_schema::string_sskel* tiein)
: ::xml_schema::string_sskel (tiein, 0),
  pwm_controllerType_impl_ (0),
  max_actuating_value_serializer_ (0),
  min_actuating_value_serializer_ (0),
  max_pwm_duty_serializer_ (0),
  min_pwm_duty_serializer_ (0)
{
}

pwm_controllerType_sskel::
pwm_controllerType_sskel (pwm_controllerType_sskel* impl, void*)
: ::xml_schema::string_sskel (impl, 0),
  pwm_controllerType_impl_ (impl),
  max_actuating_value_serializer_ (0),
  min_actuating_value_serializer_ (0),
  max_pwm_duty_serializer_ (0),
  min_pwm_duty_serializer_ (0)
{
}

// functionmoduleType_sskel
//

void functionmoduleType_sskel::
type_serializer (::xml_schema::string_sskel& type)
{
  this->type_serializer_ = &type;
}

void functionmoduleType_sskel::
key_serializer (::xml_schema::string_sskel& key)
{
  this->key_serializer_ = &key;
}

void functionmoduleType_sskel::
name_serializer (::xml_schema::string_sskel& name)
{
  this->name_serializer_ = &name;
}

void functionmoduleType_sskel::
interface_serializer (::xml_schema::byte_sskel& interface)
{
  this->interface_serializer_ = &interface;
}

void functionmoduleType_sskel::
fct_instanceID_serializer (::xml_schema::string_sskel& fct_instanceID)
{
  this->fct_instanceID_serializer_ = &fct_instanceID;
}

void functionmoduleType_sskel::
rotation_serializer (::rotationType_sskel& s)
{
  this->rotation_serializer_ = &s;
}

void functionmoduleType_sskel::
reference_run_serializer (::reference_runType_sskel& s)
{
  this->reference_run_serializer_ = &s;
}

void functionmoduleType_sskel::
position_coverage_serializer (::position_coverageType_sskel& s)
{
  this->position_coverage_serializer_ = &s;
}

void functionmoduleType_sskel::
supervision_serializer (::supervisionType_sskel& s)
{
  this->supervision_serializer_ = &s;
}

void functionmoduleType_sskel::
driver_serializer (::driverType_sskel& s)
{
  this->driver_serializer_ = &s;
}

void functionmoduleType_sskel::
motion_profiles_serializer (::motion_profilesType_sskel& s)
{
  this->motion_profiles_serializer_ = &s;
}

void functionmoduleType_sskel::
configuration_serializer (::configurationType_sskel& s)
{
  this->configuration_serializer_ = &s;
}

void functionmoduleType_sskel::
pid_controllers_serializer (::pid_controllersType_sskel& s)
{
  this->pid_controllers_serializer_ = &s;
}

void functionmoduleType_sskel::
pwm_controller_serializer (::pwm_controllerType_sskel& s)
{
  this->pwm_controller_serializer_ = &s;
}

void functionmoduleType_sskel::
serializers (::xml_schema::string_sskel& type,
             ::xml_schema::string_sskel& key,
             ::xml_schema::string_sskel& name,
             ::xml_schema::byte_sskel& interface,
             ::xml_schema::string_sskel& fct_instanceID,
             ::rotationType_sskel& rotation,
             ::reference_runType_sskel& reference_run,
             ::position_coverageType_sskel& position_coverage,
             ::supervisionType_sskel& supervision,
             ::driverType_sskel& driver,
             ::motion_profilesType_sskel& motion_profiles,
             ::configurationType_sskel& configuration,
             ::pid_controllersType_sskel& pid_controllers,
             ::pwm_controllerType_sskel& pwm_controller)
{
  this->type_serializer_ = &type;
  this->key_serializer_ = &key;
  this->name_serializer_ = &name;
  this->interface_serializer_ = &interface;
  this->fct_instanceID_serializer_ = &fct_instanceID;
  this->rotation_serializer_ = &rotation;
  this->reference_run_serializer_ = &reference_run;
  this->position_coverage_serializer_ = &position_coverage;
  this->supervision_serializer_ = &supervision;
  this->driver_serializer_ = &driver;
  this->motion_profiles_serializer_ = &motion_profiles;
  this->configuration_serializer_ = &configuration;
  this->pid_controllers_serializer_ = &pid_controllers;
  this->pwm_controller_serializer_ = &pwm_controller;
}

functionmoduleType_sskel::
functionmoduleType_sskel ()
: functionmoduleType_impl_ (0),
  type_serializer_ (0),
  key_serializer_ (0),
  name_serializer_ (0),
  interface_serializer_ (0),
  fct_instanceID_serializer_ (0),
  rotation_serializer_ (0),
  reference_run_serializer_ (0),
  position_coverage_serializer_ (0),
  supervision_serializer_ (0),
  driver_serializer_ (0),
  motion_profiles_serializer_ (0),
  configuration_serializer_ (0),
  pid_controllers_serializer_ (0),
  pwm_controller_serializer_ (0)
{
}

functionmoduleType_sskel::
functionmoduleType_sskel (functionmoduleType_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  functionmoduleType_impl_ (impl),
  type_serializer_ (0),
  key_serializer_ (0),
  name_serializer_ (0),
  interface_serializer_ (0),
  fct_instanceID_serializer_ (0),
  rotation_serializer_ (0),
  reference_run_serializer_ (0),
  position_coverage_serializer_ (0),
  supervision_serializer_ (0),
  driver_serializer_ (0),
  motion_profiles_serializer_ (0),
  configuration_serializer_ (0),
  pid_controllers_serializer_ (0),
  pwm_controller_serializer_ (0)
{
}

// functionmodulesType_sskel
//

void functionmodulesType_sskel::
functionmodule_serializer (::functionmoduleType_sskel& s)
{
  this->functionmodule_serializer_ = &s;
}

void functionmodulesType_sskel::
serializers (::functionmoduleType_sskel& functionmodule)
{
  this->functionmodule_serializer_ = &functionmodule;
}

functionmodulesType_sskel::
functionmodulesType_sskel ()
: functionmodulesType_impl_ (0),
  functionmodule_serializer_ (0)
{
}

functionmodulesType_sskel::
functionmodulesType_sskel (functionmodulesType_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  functionmodulesType_impl_ (impl),
  functionmodule_serializer_ (0)
{
}

// slaveType_sskel
//

void slaveType_sskel::
type_serializer (::xml_schema::string_sskel& type)
{
  this->type_serializer_ = &type;
}

void slaveType_sskel::
key_serializer (::xml_schema::string_sskel& key)
{
  this->key_serializer_ = &key;
}

void slaveType_sskel::
name_serializer (::xml_schema::string_sskel& name)
{
  this->name_serializer_ = &name;
}

void slaveType_sskel::
virtual__serializer (::xml_schema::byte_sskel& virtual_)
{
  this->virtual__serializer_ = &virtual_;
}

void slaveType_sskel::
nodetype_serializer (::xml_schema::byte_sskel& s)
{
  this->nodetype_serializer_ = &s;
}

void slaveType_sskel::
nodeindex_serializer (::xml_schema::byte_sskel& s)
{
  this->nodeindex_serializer_ = &s;
}

void slaveType_sskel::
functionmodules_serializer (::functionmodulesType_sskel& s)
{
  this->functionmodules_serializer_ = &s;
}

void slaveType_sskel::
serializers (::xml_schema::string_sskel& type,
             ::xml_schema::string_sskel& key,
             ::xml_schema::string_sskel& name,
             ::xml_schema::byte_sskel& virtual_,
             ::xml_schema::byte_sskel& nodetype,
             ::xml_schema::byte_sskel& nodeindex,
             ::functionmodulesType_sskel& functionmodules)
{
  this->type_serializer_ = &type;
  this->key_serializer_ = &key;
  this->name_serializer_ = &name;
  this->virtual__serializer_ = &virtual_;
  this->nodetype_serializer_ = &nodetype;
  this->nodeindex_serializer_ = &nodeindex;
  this->functionmodules_serializer_ = &functionmodules;
}

slaveType_sskel::
slaveType_sskel ()
: slaveType_impl_ (0),
  type_serializer_ (0),
  key_serializer_ (0),
  name_serializer_ (0),
  virtual__serializer_ (0),
  nodetype_serializer_ (0),
  nodeindex_serializer_ (0),
  functionmodules_serializer_ (0)
{
}

slaveType_sskel::
slaveType_sskel (slaveType_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  slaveType_impl_ (impl),
  type_serializer_ (0),
  key_serializer_ (0),
  name_serializer_ (0),
  virtual__serializer_ (0),
  nodetype_serializer_ (0),
  nodeindex_serializer_ (0),
  functionmodules_serializer_ (0)
{
}

// parameter_slavesType_sskel
//

void parameter_slavesType_sskel::
slave_serializer (::slaveType_sskel& s)
{
  this->slave_serializer_ = &s;
}

void parameter_slavesType_sskel::
serializers (::slaveType_sskel& slave)
{
  this->slave_serializer_ = &slave;
}

parameter_slavesType_sskel::
parameter_slavesType_sskel ()
: parameter_slavesType_impl_ (0),
  slave_serializer_ (0)
{
}

parameter_slavesType_sskel::
parameter_slavesType_sskel (parameter_slavesType_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  parameter_slavesType_impl_ (impl),
  slave_serializer_ (0)
{
}

// hwconfigType_sskel
//

void hwconfigType_sskel::
version_serializer (::xml_schema::float_sskel& version)
{
  this->version_serializer_ = &version;
}

void hwconfigType_sskel::
parameter_master_serializer (::parameter_masterType_sskel& s)
{
  this->parameter_master_serializer_ = &s;
}

void hwconfigType_sskel::
parameter_slaves_serializer (::parameter_slavesType_sskel& s)
{
  this->parameter_slaves_serializer_ = &s;
}

void hwconfigType_sskel::
devices_serializer (::devicesType_sskel& s)
{
  this->devices_serializer_ = &s;
}

void hwconfigType_sskel::
serializers (::xml_schema::float_sskel& version,
             ::parameter_masterType_sskel& parameter_master,
             ::parameter_slavesType_sskel& parameter_slaves,
             ::devicesType_sskel& devices)
{
  this->version_serializer_ = &version;
  this->parameter_master_serializer_ = &parameter_master;
  this->parameter_slaves_serializer_ = &parameter_slaves;
  this->devices_serializer_ = &devices;
}

hwconfigType_sskel::
hwconfigType_sskel ()
: hwconfigType_impl_ (0),
  version_serializer_ (0),
  parameter_master_serializer_ (0),
  parameter_slaves_serializer_ (0),
  devices_serializer_ (0)
{
}

hwconfigType_sskel::
hwconfigType_sskel (hwconfigType_sskel* impl, void*)
: ::xsde::cxx::serializer::validating::complex_content (impl, 0),
  hwconfigType_impl_ (impl),
  version_serializer_ (0),
  parameter_master_serializer_ (0),
  parameter_slaves_serializer_ (0),
  devices_serializer_ (0)
{
}

#include <assert.h>

// can_interfaceType_sskel
//

bool can_interfaceType_sskel::
interface_present ()
{
  return this->can_interfaceType_impl_ ? this->can_interfaceType_impl_->interface_present () : false;
}

void can_interfaceType_sskel::
_reset ()
{
  typedef ::xml_schema::string_sskel base;
  base::_reset ();

  if (this->interface_serializer_)
    this->interface_serializer_->_reset ();
}

void can_interfaceType_sskel::
pre (const ::std::string& x)
{
  assert (this->string_impl_);
  this->string_impl_->pre (x);
}

// tcp_interfaceType_sskel
//

bool tcp_interfaceType_sskel::
usage_present ()
{
  return this->tcp_interfaceType_impl_ ? this->tcp_interfaceType_impl_->usage_present () : false;
}

void tcp_interfaceType_sskel::
_reset ()
{
  typedef ::xml_schema::string_sskel base;
  base::_reset ();

  if (this->usage_serializer_)
    this->usage_serializer_->_reset ();
}

void tcp_interfaceType_sskel::
pre (const ::std::string& x)
{
  assert (this->string_impl_);
  this->string_impl_->pre (x);
}

// serial_numberType_sskel
//

bool serial_numberType_sskel::
serialno_present ()
{
  return this->serial_numberType_impl_ ? this->serial_numberType_impl_->serialno_present () : false;
}

void serial_numberType_sskel::
_reset ()
{
  typedef ::xml_schema::string_sskel base;
  base::_reset ();

  if (this->serialno_serializer_)
    this->serialno_serializer_->_reset ();
}

void serial_numberType_sskel::
pre (const ::std::string& x)
{
  assert (this->string_impl_);
  this->string_impl_->pre (x);
}

// deviceType_sskel
//

bool deviceType_sskel::
name_present ()
{
  return this->deviceType_impl_ ? this->deviceType_impl_->name_present () : false;
}

bool deviceType_sskel::
id_present ()
{
  return this->deviceType_impl_ ? this->deviceType_impl_->id_present () : false;
}

bool deviceType_sskel::
type_present ()
{
  return this->deviceType_impl_ ? this->deviceType_impl_->type_present () : false;
}

bool deviceType_sskel::
dev_instanceID_present ()
{
  return this->deviceType_impl_ ? this->deviceType_impl_->dev_instanceID_present () : false;
}

bool deviceType_sskel::
optional_present ()
{
  return this->deviceType_impl_ ? this->deviceType_impl_->optional_present () : false;
}

bool deviceType_sskel::
functionmodules_present ()
{
  return this->deviceType_impl_ ? this->deviceType_impl_->functionmodules_present () : false;
}

void deviceType_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  if (this->name_serializer_)
    this->name_serializer_->_reset ();

  if (this->id_serializer_)
    this->id_serializer_->_reset ();

  if (this->type_serializer_)
    this->type_serializer_->_reset ();

  if (this->dev_instanceID_serializer_)
    this->dev_instanceID_serializer_->_reset ();

  if (this->optional_serializer_)
    this->optional_serializer_->_reset ();

  this->resetting_ = true;

  if (this->functionmodules_serializer_)
    this->functionmodules_serializer_->_reset ();

  this->resetting_ = false;
}

// devicesType_sskel
//

bool devicesType_sskel::
device_next ()
{
  return this->devicesType_impl_ ? this->devicesType_impl_->device_next () : false;
}

void devicesType_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  this->resetting_ = true;

  if (this->device_serializer_)
    this->device_serializer_->_reset ();

  this->resetting_ = false;
}

// retortType_sskel
//

bool retortType_sskel::
name_present ()
{
  return this->retortType_impl_ ? this->retortType_impl_->name_present () : false;
}

bool retortType_sskel::
index_present ()
{
  return this->retortType_impl_ ? this->retortType_impl_->index_present () : false;
}

void retortType_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  if (this->name_serializer_)
    this->name_serializer_->_reset ();

  if (this->index_serializer_)
    this->index_serializer_->_reset ();

  this->resetting_ = true;

  if (this->devices_serializer_)
    this->devices_serializer_->_reset ();

  this->resetting_ = false;
}

// retortsType_sskel
//

bool retortsType_sskel::
retort_next ()
{
  return this->retortsType_impl_ ? this->retortsType_impl_->retort_next () : false;
}

void retortsType_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  this->resetting_ = true;

  if (this->retort_serializer_)
    this->retort_serializer_->_reset ();

  this->resetting_ = false;
}

// parameter_masterType_sskel
//

bool parameter_masterType_sskel::
folded_present ()
{
  return this->parameter_masterType_impl_ ? this->parameter_masterType_impl_->folded_present () : false;
}

void parameter_masterType_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  if (this->folded_serializer_)
    this->folded_serializer_->_reset ();

  this->resetting_ = true;

  if (this->can_interface_serializer_)
    this->can_interface_serializer_->_reset ();

  if (this->tcp_interface_serializer_)
    this->tcp_interface_serializer_->_reset ();

  if (this->nodetype_serializer_)
    this->nodetype_serializer_->_reset ();

  if (this->nodeindex_serializer_)
    this->nodeindex_serializer_->_reset ();

  if (this->serial_number_serializer_)
    this->serial_number_serializer_->_reset ();

  if (this->retorts_serializer_)
    this->retorts_serializer_->_reset ();

  this->resetting_ = false;
}

// rotationType_sskel
//

bool rotationType_sskel::
type_present ()
{
  return this->rotationType_impl_ ? this->rotationType_impl_->type_present () : false;
}

bool rotationType_sskel::
direction_present ()
{
  return this->rotationType_impl_ ? this->rotationType_impl_->direction_present () : false;
}

bool rotationType_sskel::
steps_revolution_present ()
{
  return this->rotationType_impl_ ? this->rotationType_impl_->steps_revolution_present () : false;
}

bool rotationType_sskel::
position_min_present ()
{
  return this->rotationType_impl_ ? this->rotationType_impl_->position_min_present () : false;
}

bool rotationType_sskel::
position_max_present ()
{
  return this->rotationType_impl_ ? this->rotationType_impl_->position_max_present () : false;
}

bool rotationType_sskel::
speed_min_present ()
{
  return this->rotationType_impl_ ? this->rotationType_impl_->speed_min_present () : false;
}

bool rotationType_sskel::
speed_max_present ()
{
  return this->rotationType_impl_ ? this->rotationType_impl_->speed_max_present () : false;
}

bool rotationType_sskel::
run_cs_present ()
{
  return this->rotationType_impl_ ? this->rotationType_impl_->run_cs_present () : false;
}

bool rotationType_sskel::
stop_cs_present ()
{
  return this->rotationType_impl_ ? this->rotationType_impl_->stop_cs_present () : false;
}

bool rotationType_sskel::
stop_cs_delay_present ()
{
  return this->rotationType_impl_ ? this->rotationType_impl_->stop_cs_delay_present () : false;
}

void rotationType_sskel::
_reset ()
{
  typedef ::xml_schema::string_sskel base;
  base::_reset ();

  if (this->type_serializer_)
    this->type_serializer_->_reset ();

  if (this->direction_serializer_)
    this->direction_serializer_->_reset ();

  if (this->steps_revolution_serializer_)
    this->steps_revolution_serializer_->_reset ();

  if (this->position_min_serializer_)
    this->position_min_serializer_->_reset ();

  if (this->position_max_serializer_)
    this->position_max_serializer_->_reset ();

  if (this->speed_min_serializer_)
    this->speed_min_serializer_->_reset ();

  if (this->speed_max_serializer_)
    this->speed_max_serializer_->_reset ();

  if (this->run_cs_serializer_)
    this->run_cs_serializer_->_reset ();

  if (this->stop_cs_serializer_)
    this->stop_cs_serializer_->_reset ();

  if (this->stop_cs_delay_serializer_)
    this->stop_cs_delay_serializer_->_reset ();
}

void rotationType_sskel::
pre (const ::std::string& x)
{
  assert (this->string_impl_);
  this->string_impl_->pre (x);
}

// reference_runType_sskel
//

bool reference_runType_sskel::
ref_position_present ()
{
  return this->reference_runType_impl_ ? this->reference_runType_impl_->ref_position_present () : false;
}

bool reference_runType_sskel::
max_distance_present ()
{
  return this->reference_runType_impl_ ? this->reference_runType_impl_->max_distance_present () : false;
}

bool reference_runType_sskel::
timeout_present ()
{
  return this->reference_runType_impl_ ? this->reference_runType_impl_->timeout_present () : false;
}

bool reference_runType_sskel::
reverse_distance_present ()
{
  return this->reference_runType_impl_ ? this->reference_runType_impl_->reverse_distance_present () : false;
}

bool reference_runType_sskel::
slow_speed_present ()
{
  return this->reference_runType_impl_ ? this->reference_runType_impl_->slow_speed_present () : false;
}

bool reference_runType_sskel::
high_speed_present ()
{
  return this->reference_runType_impl_ ? this->reference_runType_impl_->high_speed_present () : false;
}

bool reference_runType_sskel::
refpos_offset_present ()
{
  return this->reference_runType_impl_ ? this->reference_runType_impl_->refpos_offset_present () : false;
}

void reference_runType_sskel::
_reset ()
{
  typedef ::xml_schema::string_sskel base;
  base::_reset ();

  if (this->ref_position_serializer_)
    this->ref_position_serializer_->_reset ();

  if (this->max_distance_serializer_)
    this->max_distance_serializer_->_reset ();

  if (this->timeout_serializer_)
    this->timeout_serializer_->_reset ();

  if (this->reverse_distance_serializer_)
    this->reverse_distance_serializer_->_reset ();

  if (this->slow_speed_serializer_)
    this->slow_speed_serializer_->_reset ();

  if (this->high_speed_serializer_)
    this->high_speed_serializer_->_reset ();

  if (this->refpos_offset_serializer_)
    this->refpos_offset_serializer_->_reset ();
}

void reference_runType_sskel::
pre (const ::std::string& x)
{
  assert (this->string_impl_);
  this->string_impl_->pre (x);
}

// encoderType_sskel
//

bool encoderType_sskel::
type_present ()
{
  return this->encoderType_impl_ ? this->encoderType_impl_->type_present () : false;
}

bool encoderType_sskel::
resolution_present ()
{
  return this->encoderType_impl_ ? this->encoderType_impl_->resolution_present () : false;
}

bool encoderType_sskel::
rotation_present ()
{
  return this->encoderType_impl_ ? this->encoderType_impl_->rotation_present () : false;
}

void encoderType_sskel::
_reset ()
{
  typedef ::xml_schema::string_sskel base;
  base::_reset ();

  if (this->type_serializer_)
    this->type_serializer_->_reset ();

  if (this->resolution_serializer_)
    this->resolution_serializer_->_reset ();

  if (this->rotation_serializer_)
    this->rotation_serializer_->_reset ();
}

void encoderType_sskel::
pre (const ::std::string& x)
{
  assert (this->string_impl_);
  this->string_impl_->pre (x);
}

// configurationType_sskel
//

bool configurationType_sskel::
polarity_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->polarity_present () : false;
}

bool configurationType_sskel::
sample_rate_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->sample_rate_present () : false;
}

bool configurationType_sskel::
debounce_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->debounce_present () : false;
}

bool configurationType_sskel::
temp_tolerance_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->temp_tolerance_present () : false;
}

bool configurationType_sskel::
sampling_period_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->sampling_period_present () : false;
}

bool configurationType_sskel::
fan_speed_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->fan_speed_present () : false;
}

bool configurationType_sskel::
fan_threshold_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->fan_threshold_present () : false;
}

bool configurationType_sskel::
current_gain_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->current_gain_present () : false;
}

bool configurationType_sskel::
heater_current_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->heater_current_present () : false;
}

bool configurationType_sskel::
heater_threshold_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->heater_threshold_present () : false;
}

bool configurationType_sskel::
current_deviation_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->current_deviation_present () : false;
}

bool configurationType_sskel::
current_min_230_serial_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->current_min_230_serial_present () : false;
}

bool configurationType_sskel::
current_max_230_serial_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->current_max_230_serial_present () : false;
}

bool configurationType_sskel::
current_min_100_serial_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->current_min_100_serial_present () : false;
}

bool configurationType_sskel::
current_max_100_serial_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->current_max_100_serial_present () : false;
}

bool configurationType_sskel::
current_min_100_parallel_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->current_min_100_parallel_present () : false;
}

bool configurationType_sskel::
current_max_100_parallel_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->current_max_100_parallel_present () : false;
}

bool configurationType_sskel::
pressure_tolerance_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->pressure_tolerance_present () : false;
}

bool configurationType_sskel::
fan_current_gain_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->fan_current_gain_present () : false;
}

bool configurationType_sskel::
fan_current_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->fan_current_present () : false;
}

bool configurationType_sskel::
pump_current_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->pump_current_present () : false;
}

bool configurationType_sskel::
pump_threshold_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->pump_threshold_present () : false;
}

bool configurationType_sskel::
enabled_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->enabled_present () : false;
}

bool configurationType_sskel::
inactiv_shutdown_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->inactiv_shutdown_present () : false;
}

bool configurationType_sskel::
inactiv_emcy_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->inactiv_emcy_present () : false;
}

bool configurationType_sskel::
outval_inactiv_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->outval_inactiv_present () : false;
}

bool configurationType_sskel::
livetime_limit_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->livetime_limit_present () : false;
}

bool configurationType_sskel::
timestamp_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->timestamp_present () : false;
}

bool configurationType_sskel::
threshold_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->threshold_present () : false;
}

bool configurationType_sskel::
interval_present ()
{
  return this->configurationType_impl_ ? this->configurationType_impl_->interval_present () : false;
}

void configurationType_sskel::
_reset ()
{
  typedef ::xml_schema::string_sskel base;
  base::_reset ();

  if (this->polarity_serializer_)
    this->polarity_serializer_->_reset ();

  if (this->sample_rate_serializer_)
    this->sample_rate_serializer_->_reset ();

  if (this->debounce_serializer_)
    this->debounce_serializer_->_reset ();

  if (this->temp_tolerance_serializer_)
    this->temp_tolerance_serializer_->_reset ();

  if (this->sampling_period_serializer_)
    this->sampling_period_serializer_->_reset ();

  if (this->fan_speed_serializer_)
    this->fan_speed_serializer_->_reset ();

  if (this->fan_threshold_serializer_)
    this->fan_threshold_serializer_->_reset ();

  if (this->current_gain_serializer_)
    this->current_gain_serializer_->_reset ();

  if (this->heater_current_serializer_)
    this->heater_current_serializer_->_reset ();

  if (this->heater_threshold_serializer_)
    this->heater_threshold_serializer_->_reset ();

  if (this->current_deviation_serializer_)
    this->current_deviation_serializer_->_reset ();

  if (this->current_min_230_serial_serializer_)
    this->current_min_230_serial_serializer_->_reset ();

  if (this->current_max_230_serial_serializer_)
    this->current_max_230_serial_serializer_->_reset ();

  if (this->current_min_100_serial_serializer_)
    this->current_min_100_serial_serializer_->_reset ();

  if (this->current_max_100_serial_serializer_)
    this->current_max_100_serial_serializer_->_reset ();

  if (this->current_min_100_parallel_serializer_)
    this->current_min_100_parallel_serializer_->_reset ();

  if (this->current_max_100_parallel_serializer_)
    this->current_max_100_parallel_serializer_->_reset ();

  if (this->pressure_tolerance_serializer_)
    this->pressure_tolerance_serializer_->_reset ();

  if (this->fan_current_gain_serializer_)
    this->fan_current_gain_serializer_->_reset ();

  if (this->fan_current_serializer_)
    this->fan_current_serializer_->_reset ();

  if (this->pump_current_serializer_)
    this->pump_current_serializer_->_reset ();

  if (this->pump_threshold_serializer_)
    this->pump_threshold_serializer_->_reset ();

  if (this->enabled_serializer_)
    this->enabled_serializer_->_reset ();

  if (this->inactiv_shutdown_serializer_)
    this->inactiv_shutdown_serializer_->_reset ();

  if (this->inactiv_emcy_serializer_)
    this->inactiv_emcy_serializer_->_reset ();

  if (this->outval_inactiv_serializer_)
    this->outval_inactiv_serializer_->_reset ();

  if (this->livetime_limit_serializer_)
    this->livetime_limit_serializer_->_reset ();

  if (this->timestamp_serializer_)
    this->timestamp_serializer_->_reset ();

  if (this->threshold_serializer_)
    this->threshold_serializer_->_reset ();

  if (this->interval_serializer_)
    this->interval_serializer_->_reset ();
}

void configurationType_sskel::
pre (const ::std::string& x)
{
  assert (this->string_impl_);
  this->string_impl_->pre (x);
}

// limitswitchType_sskel
//

bool limitswitchType_sskel::
index_present ()
{
  return this->limitswitchType_impl_ ? this->limitswitchType_impl_->index_present () : false;
}

void limitswitchType_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  if (this->index_serializer_)
    this->index_serializer_->_reset ();

  this->resetting_ = true;

  if (this->configuration_serializer_)
    this->configuration_serializer_->_reset ();

  this->resetting_ = false;
}

// position_codeType_sskel
//

bool position_codeType_sskel::
value_present ()
{
  return this->position_codeType_impl_ ? this->position_codeType_impl_->value_present () : false;
}

bool position_codeType_sskel::
stop_present ()
{
  return this->position_codeType_impl_ ? this->position_codeType_impl_->stop_present () : false;
}

bool position_codeType_sskel::
stop_dir_present ()
{
  return this->position_codeType_impl_ ? this->position_codeType_impl_->stop_dir_present () : false;
}

bool position_codeType_sskel::
position_present ()
{
  return this->position_codeType_impl_ ? this->position_codeType_impl_->position_present () : false;
}

bool position_codeType_sskel::
width_present ()
{
  return this->position_codeType_impl_ ? this->position_codeType_impl_->width_present () : false;
}

bool position_codeType_sskel::
deviation_present ()
{
  return this->position_codeType_impl_ ? this->position_codeType_impl_->deviation_present () : false;
}

bool position_codeType_sskel::
dir_check_present ()
{
  return this->position_codeType_impl_ ? this->position_codeType_impl_->dir_check_present () : false;
}

bool position_codeType_sskel::
hit_skip_present ()
{
  return this->position_codeType_impl_ ? this->position_codeType_impl_->hit_skip_present () : false;
}

void position_codeType_sskel::
_reset ()
{
  typedef ::xml_schema::string_sskel base;
  base::_reset ();

  if (this->value_serializer_)
    this->value_serializer_->_reset ();

  if (this->stop_serializer_)
    this->stop_serializer_->_reset ();

  if (this->stop_dir_serializer_)
    this->stop_dir_serializer_->_reset ();

  if (this->position_serializer_)
    this->position_serializer_->_reset ();

  if (this->width_serializer_)
    this->width_serializer_->_reset ();

  if (this->deviation_serializer_)
    this->deviation_serializer_->_reset ();

  if (this->dir_check_serializer_)
    this->dir_check_serializer_->_reset ();

  if (this->hit_skip_serializer_)
    this->hit_skip_serializer_->_reset ();
}

void position_codeType_sskel::
pre (const ::std::string& x)
{
  assert (this->string_impl_);
  this->string_impl_->pre (x);
}

// limitswitchesType_sskel
//

bool limitswitchesType_sskel::
limitswitch_next ()
{
  return this->limitswitchesType_impl_ ? this->limitswitchesType_impl_->limitswitch_next () : false;
}

bool limitswitchesType_sskel::
position_code_next ()
{
  return this->limitswitchesType_impl_ ? this->limitswitchesType_impl_->position_code_next () : false;
}

void limitswitchesType_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  this->resetting_ = true;

  if (this->limitswitch_serializer_)
    this->limitswitch_serializer_->_reset ();

  if (this->position_code_serializer_)
    this->position_code_serializer_->_reset ();

  this->resetting_ = false;
}

// position_coverageType_sskel
//

void position_coverageType_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  this->resetting_ = true;

  if (this->encoder_serializer_)
    this->encoder_serializer_->_reset ();

  if (this->limitswitches_serializer_)
    this->limitswitches_serializer_->_reset ();

  this->resetting_ = false;
}

// supervisionType_sskel
//

bool supervisionType_sskel::
steploss_warn_limit_present ()
{
  return this->supervisionType_impl_ ? this->supervisionType_impl_->steploss_warn_limit_present () : false;
}

bool supervisionType_sskel::
steploss_error_limit_present ()
{
  return this->supervisionType_impl_ ? this->supervisionType_impl_->steploss_error_limit_present () : false;
}

bool supervisionType_sskel::
current_limit_present ()
{
  return this->supervisionType_impl_ ? this->supervisionType_impl_->current_limit_present () : false;
}

void supervisionType_sskel::
_reset ()
{
  typedef ::xml_schema::string_sskel base;
  base::_reset ();

  if (this->steploss_warn_limit_serializer_)
    this->steploss_warn_limit_serializer_->_reset ();

  if (this->steploss_error_limit_serializer_)
    this->steploss_error_limit_serializer_->_reset ();

  if (this->current_limit_serializer_)
    this->current_limit_serializer_->_reset ();
}

void supervisionType_sskel::
pre (const ::std::string& x)
{
  assert (this->string_impl_);
  this->string_impl_->pre (x);
}

// driverType_sskel
//

bool driverType_sskel::
type_present ()
{
  return this->driverType_impl_ ? this->driverType_impl_->type_present () : false;
}

bool driverType_sskel::
reg_chopConf_present ()
{
  return this->driverType_impl_ ? this->driverType_impl_->reg_chopConf_present () : false;
}

bool driverType_sskel::
reg_smartEn_present ()
{
  return this->driverType_impl_ ? this->driverType_impl_->reg_smartEn_present () : false;
}

bool driverType_sskel::
reg_sgcsConf_present ()
{
  return this->driverType_impl_ ? this->driverType_impl_->reg_sgcsConf_present () : false;
}

bool driverType_sskel::
reg_drvConf_present ()
{
  return this->driverType_impl_ ? this->driverType_impl_->reg_drvConf_present () : false;
}

void driverType_sskel::
_reset ()
{
  typedef ::xml_schema::string_sskel base;
  base::_reset ();

  if (this->type_serializer_)
    this->type_serializer_->_reset ();

  if (this->reg_chopConf_serializer_)
    this->reg_chopConf_serializer_->_reset ();

  if (this->reg_smartEn_serializer_)
    this->reg_smartEn_serializer_->_reset ();

  if (this->reg_sgcsConf_serializer_)
    this->reg_sgcsConf_serializer_->_reset ();

  if (this->reg_drvConf_serializer_)
    this->reg_drvConf_serializer_->_reset ();
}

void driverType_sskel::
pre (const ::std::string& x)
{
  assert (this->string_impl_);
  this->string_impl_->pre (x);
}

// motion_profileType_sskel
//

bool motion_profileType_sskel::
speed_min_present ()
{
  return this->motion_profileType_impl_ ? this->motion_profileType_impl_->speed_min_present () : false;
}

bool motion_profileType_sskel::
speed_max_present ()
{
  return this->motion_profileType_impl_ ? this->motion_profileType_impl_->speed_max_present () : false;
}

bool motion_profileType_sskel::
acc_present ()
{
  return this->motion_profileType_impl_ ? this->motion_profileType_impl_->acc_present () : false;
}

bool motion_profileType_sskel::
dec_present ()
{
  return this->motion_profileType_impl_ ? this->motion_profileType_impl_->dec_present () : false;
}

bool motion_profileType_sskel::
acc_time_present ()
{
  return this->motion_profileType_impl_ ? this->motion_profileType_impl_->acc_time_present () : false;
}

bool motion_profileType_sskel::
dec_time_present ()
{
  return this->motion_profileType_impl_ ? this->motion_profileType_impl_->dec_time_present () : false;
}

bool motion_profileType_sskel::
micro_steps_present ()
{
  return this->motion_profileType_impl_ ? this->motion_profileType_impl_->micro_steps_present () : false;
}

bool motion_profileType_sskel::
ramp_type_present ()
{
  return this->motion_profileType_impl_ ? this->motion_profileType_impl_->ramp_type_present () : false;
}

void motion_profileType_sskel::
_reset ()
{
  typedef ::xml_schema::string_sskel base;
  base::_reset ();

  if (this->speed_min_serializer_)
    this->speed_min_serializer_->_reset ();

  if (this->speed_max_serializer_)
    this->speed_max_serializer_->_reset ();

  if (this->acc_serializer_)
    this->acc_serializer_->_reset ();

  if (this->dec_serializer_)
    this->dec_serializer_->_reset ();

  if (this->acc_time_serializer_)
    this->acc_time_serializer_->_reset ();

  if (this->dec_time_serializer_)
    this->dec_time_serializer_->_reset ();

  if (this->micro_steps_serializer_)
    this->micro_steps_serializer_->_reset ();

  if (this->ramp_type_serializer_)
    this->ramp_type_serializer_->_reset ();
}

void motion_profileType_sskel::
pre (const ::std::string& x)
{
  assert (this->string_impl_);
  this->string_impl_->pre (x);
}

// motion_profilesType_sskel
//

bool motion_profilesType_sskel::
motion_profile_next ()
{
  return this->motion_profilesType_impl_ ? this->motion_profilesType_impl_->motion_profile_next () : false;
}

void motion_profilesType_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  this->resetting_ = true;

  if (this->motion_profile_serializer_)
    this->motion_profile_serializer_->_reset ();

  this->resetting_ = false;
}

// pid_controllerType_sskel
//

bool pid_controllerType_sskel::
max_temperature_present ()
{
  return this->pid_controllerType_impl_ ? this->pid_controllerType_impl_->max_temperature_present () : false;
}

bool pid_controllerType_sskel::
controller_gain_present ()
{
  return this->pid_controllerType_impl_ ? this->pid_controllerType_impl_->controller_gain_present () : false;
}

bool pid_controllerType_sskel::
reset_time_present ()
{
  return this->pid_controllerType_impl_ ? this->pid_controllerType_impl_->reset_time_present () : false;
}

bool pid_controllerType_sskel::
derivative_time_present ()
{
  return this->pid_controllerType_impl_ ? this->pid_controllerType_impl_->derivative_time_present () : false;
}

bool pid_controllerType_sskel::
max_pressure_present ()
{
  return this->pid_controllerType_impl_ ? this->pid_controllerType_impl_->max_pressure_present () : false;
}

bool pid_controllerType_sskel::
min_pressure_present ()
{
  return this->pid_controllerType_impl_ ? this->pid_controllerType_impl_->min_pressure_present () : false;
}

void pid_controllerType_sskel::
_reset ()
{
  typedef ::xml_schema::string_sskel base;
  base::_reset ();

  if (this->max_temperature_serializer_)
    this->max_temperature_serializer_->_reset ();

  if (this->controller_gain_serializer_)
    this->controller_gain_serializer_->_reset ();

  if (this->reset_time_serializer_)
    this->reset_time_serializer_->_reset ();

  if (this->derivative_time_serializer_)
    this->derivative_time_serializer_->_reset ();

  if (this->max_pressure_serializer_)
    this->max_pressure_serializer_->_reset ();

  if (this->min_pressure_serializer_)
    this->min_pressure_serializer_->_reset ();
}

void pid_controllerType_sskel::
pre (const ::std::string& x)
{
  assert (this->string_impl_);
  this->string_impl_->pre (x);
}

// pid_controllersType_sskel
//

void pid_controllersType_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  this->resetting_ = true;

  if (this->pid_controller_serializer_)
    this->pid_controller_serializer_->_reset ();

  this->resetting_ = false;
}

// pwm_controllerType_sskel
//

bool pwm_controllerType_sskel::
max_actuating_value_present ()
{
  return this->pwm_controllerType_impl_ ? this->pwm_controllerType_impl_->max_actuating_value_present () : false;
}

bool pwm_controllerType_sskel::
min_actuating_value_present ()
{
  return this->pwm_controllerType_impl_ ? this->pwm_controllerType_impl_->min_actuating_value_present () : false;
}

bool pwm_controllerType_sskel::
max_pwm_duty_present ()
{
  return this->pwm_controllerType_impl_ ? this->pwm_controllerType_impl_->max_pwm_duty_present () : false;
}

bool pwm_controllerType_sskel::
min_pwm_duty_present ()
{
  return this->pwm_controllerType_impl_ ? this->pwm_controllerType_impl_->min_pwm_duty_present () : false;
}

void pwm_controllerType_sskel::
_reset ()
{
  typedef ::xml_schema::string_sskel base;
  base::_reset ();

  if (this->max_actuating_value_serializer_)
    this->max_actuating_value_serializer_->_reset ();

  if (this->min_actuating_value_serializer_)
    this->min_actuating_value_serializer_->_reset ();

  if (this->max_pwm_duty_serializer_)
    this->max_pwm_duty_serializer_->_reset ();

  if (this->min_pwm_duty_serializer_)
    this->min_pwm_duty_serializer_->_reset ();
}

void pwm_controllerType_sskel::
pre (const ::std::string& x)
{
  assert (this->string_impl_);
  this->string_impl_->pre (x);
}

// functionmoduleType_sskel
//

bool functionmoduleType_sskel::
type_present ()
{
  return this->functionmoduleType_impl_ ? this->functionmoduleType_impl_->type_present () : false;
}

bool functionmoduleType_sskel::
key_present ()
{
  return this->functionmoduleType_impl_ ? this->functionmoduleType_impl_->key_present () : false;
}

bool functionmoduleType_sskel::
name_present ()
{
  return this->functionmoduleType_impl_ ? this->functionmoduleType_impl_->name_present () : false;
}

bool functionmoduleType_sskel::
interface_present ()
{
  return this->functionmoduleType_impl_ ? this->functionmoduleType_impl_->interface_present () : false;
}

bool functionmoduleType_sskel::
fct_instanceID_present ()
{
  return this->functionmoduleType_impl_ ? this->functionmoduleType_impl_->fct_instanceID_present () : false;
}

bool functionmoduleType_sskel::
rotation_present ()
{
  return this->functionmoduleType_impl_ ? this->functionmoduleType_impl_->rotation_present () : false;
}

bool functionmoduleType_sskel::
reference_run_present ()
{
  return this->functionmoduleType_impl_ ? this->functionmoduleType_impl_->reference_run_present () : false;
}

bool functionmoduleType_sskel::
position_coverage_present ()
{
  return this->functionmoduleType_impl_ ? this->functionmoduleType_impl_->position_coverage_present () : false;
}

bool functionmoduleType_sskel::
supervision_present ()
{
  return this->functionmoduleType_impl_ ? this->functionmoduleType_impl_->supervision_present () : false;
}

bool functionmoduleType_sskel::
driver_present ()
{
  return this->functionmoduleType_impl_ ? this->functionmoduleType_impl_->driver_present () : false;
}

bool functionmoduleType_sskel::
motion_profiles_present ()
{
  return this->functionmoduleType_impl_ ? this->functionmoduleType_impl_->motion_profiles_present () : false;
}

bool functionmoduleType_sskel::
configuration_present ()
{
  return this->functionmoduleType_impl_ ? this->functionmoduleType_impl_->configuration_present () : false;
}

bool functionmoduleType_sskel::
pid_controllers_present ()
{
  return this->functionmoduleType_impl_ ? this->functionmoduleType_impl_->pid_controllers_present () : false;
}

bool functionmoduleType_sskel::
pwm_controller_present ()
{
  return this->functionmoduleType_impl_ ? this->functionmoduleType_impl_->pwm_controller_present () : false;
}

void functionmoduleType_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  if (this->type_serializer_)
    this->type_serializer_->_reset ();

  if (this->key_serializer_)
    this->key_serializer_->_reset ();

  if (this->name_serializer_)
    this->name_serializer_->_reset ();

  if (this->interface_serializer_)
    this->interface_serializer_->_reset ();

  if (this->fct_instanceID_serializer_)
    this->fct_instanceID_serializer_->_reset ();

  this->resetting_ = true;

  if (this->rotation_serializer_)
    this->rotation_serializer_->_reset ();

  if (this->reference_run_serializer_)
    this->reference_run_serializer_->_reset ();

  if (this->position_coverage_serializer_)
    this->position_coverage_serializer_->_reset ();

  if (this->supervision_serializer_)
    this->supervision_serializer_->_reset ();

  if (this->driver_serializer_)
    this->driver_serializer_->_reset ();

  if (this->motion_profiles_serializer_)
    this->motion_profiles_serializer_->_reset ();

  if (this->configuration_serializer_)
    this->configuration_serializer_->_reset ();

  if (this->pid_controllers_serializer_)
    this->pid_controllers_serializer_->_reset ();

  if (this->pwm_controller_serializer_)
    this->pwm_controller_serializer_->_reset ();

  this->resetting_ = false;
}

// functionmodulesType_sskel
//

bool functionmodulesType_sskel::
functionmodule_next ()
{
  return this->functionmodulesType_impl_ ? this->functionmodulesType_impl_->functionmodule_next () : false;
}

void functionmodulesType_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  this->resetting_ = true;

  if (this->functionmodule_serializer_)
    this->functionmodule_serializer_->_reset ();

  this->resetting_ = false;
}

// slaveType_sskel
//

bool slaveType_sskel::
type_present ()
{
  return this->slaveType_impl_ ? this->slaveType_impl_->type_present () : false;
}

bool slaveType_sskel::
key_present ()
{
  return this->slaveType_impl_ ? this->slaveType_impl_->key_present () : false;
}

bool slaveType_sskel::
name_present ()
{
  return this->slaveType_impl_ ? this->slaveType_impl_->name_present () : false;
}

bool slaveType_sskel::
virtual__present ()
{
  return this->slaveType_impl_ ? this->slaveType_impl_->virtual__present () : false;
}

void slaveType_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  if (this->type_serializer_)
    this->type_serializer_->_reset ();

  if (this->key_serializer_)
    this->key_serializer_->_reset ();

  if (this->name_serializer_)
    this->name_serializer_->_reset ();

  if (this->virtual__serializer_)
    this->virtual__serializer_->_reset ();

  this->resetting_ = true;

  if (this->nodetype_serializer_)
    this->nodetype_serializer_->_reset ();

  if (this->nodeindex_serializer_)
    this->nodeindex_serializer_->_reset ();

  if (this->functionmodules_serializer_)
    this->functionmodules_serializer_->_reset ();

  this->resetting_ = false;
}

// parameter_slavesType_sskel
//

bool parameter_slavesType_sskel::
slave_next ()
{
  return this->parameter_slavesType_impl_ ? this->parameter_slavesType_impl_->slave_next () : false;
}

void parameter_slavesType_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  this->resetting_ = true;

  if (this->slave_serializer_)
    this->slave_serializer_->_reset ();

  this->resetting_ = false;
}

// hwconfigType_sskel
//

bool hwconfigType_sskel::
version_present ()
{
  return this->hwconfigType_impl_ ? this->hwconfigType_impl_->version_present () : false;
}

void hwconfigType_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  if (this->version_serializer_)
    this->version_serializer_->_reset ();

  this->resetting_ = true;

  if (this->parameter_master_serializer_)
    this->parameter_master_serializer_->_reset ();

  if (this->parameter_slaves_serializer_)
    this->parameter_slaves_serializer_->_reset ();

  if (this->devices_serializer_)
    this->devices_serializer_->_reset ();

  this->resetting_ = false;
}

// Element validation and serialization for deviceType_sskel.
//
void deviceType_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // functionmodules
  //
  if (this->functionmodules_present ())
  {
    const ::functionmodulesType& r = this->functionmodules ();

    if (ctx.error_type ())
      return;

    if (this->functionmodules_serializer_)
    {
      this->functionmodules_serializer_->pre (r);

      if (this->functionmodules_serializer_->_error_type ())
        this->functionmodules_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("functionmodules"))
        return;

      this->functionmodules_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->functionmodules_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->functionmodules_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->functionmodules_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->functionmodules_serializer_->post ();

      if (this->functionmodules_serializer_->_error_type ())
        this->functionmodules_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;
}

// Element validation and serialization for devicesType_sskel.
//
void devicesType_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // device
  //
  while (this->device_next ())
  {
    const ::deviceType& r = this->device ();

    if (ctx.error_type ())
      return;

    if (this->device_serializer_)
    {
      this->device_serializer_->pre (r);

      if (this->device_serializer_->_error_type ())
        this->device_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("device"))
        return;

      this->device_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->device_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->device_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->device_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->device_serializer_->post ();

      if (this->device_serializer_->_error_type ())
        this->device_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;
}

// Element validation and serialization for retortType_sskel.
//
void retortType_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // devices
  //
  {
    const ::devicesType& r = this->devices ();

    if (ctx.error_type ())
      return;

    if (this->devices_serializer_)
    {
      this->devices_serializer_->pre (r);

      if (this->devices_serializer_->_error_type ())
        this->devices_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("devices"))
        return;

      this->devices_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->devices_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->devices_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->devices_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->devices_serializer_->post ();

      if (this->devices_serializer_->_error_type ())
        this->devices_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }
}

// Element validation and serialization for retortsType_sskel.
//
void retortsType_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // retort
  //
  while (this->retort_next ())
  {
    const ::retortType& r = this->retort ();

    if (ctx.error_type ())
      return;

    if (this->retort_serializer_)
    {
      this->retort_serializer_->pre (r);

      if (this->retort_serializer_->_error_type ())
        this->retort_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("retort"))
        return;

      this->retort_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->retort_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->retort_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->retort_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->retort_serializer_->post ();

      if (this->retort_serializer_->_error_type ())
        this->retort_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;
}

// Element validation and serialization for parameter_masterType_sskel.
//
void parameter_masterType_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // can_interface
  //
  {
    const ::can_interfaceType& r = this->can_interface ();

    if (ctx.error_type ())
      return;

    if (this->can_interface_serializer_)
    {
      this->can_interface_serializer_->pre (r);

      if (this->can_interface_serializer_->_error_type ())
        this->can_interface_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("can_interface"))
        return;

      this->can_interface_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->can_interface_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->can_interface_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->can_interface_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->can_interface_serializer_->post ();

      if (this->can_interface_serializer_->_error_type ())
        this->can_interface_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }

  // tcp_interface
  //
  {
    const ::tcp_interfaceType& r = this->tcp_interface ();

    if (ctx.error_type ())
      return;

    if (this->tcp_interface_serializer_)
    {
      this->tcp_interface_serializer_->pre (r);

      if (this->tcp_interface_serializer_->_error_type ())
        this->tcp_interface_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("tcp_interface"))
        return;

      this->tcp_interface_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->tcp_interface_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->tcp_interface_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->tcp_interface_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->tcp_interface_serializer_->post ();

      if (this->tcp_interface_serializer_->_error_type ())
        this->tcp_interface_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }

  // nodetype
  //
  {
    signed char r = this->nodetype ();

    if (ctx.error_type ())
      return;

    if (this->nodetype_serializer_)
    {
      this->nodetype_serializer_->pre (r);

      if (this->nodetype_serializer_->_error_type ())
        this->nodetype_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("nodetype"))
        return;

      this->nodetype_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->nodetype_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->nodetype_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->nodetype_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->nodetype_serializer_->post ();

      if (this->nodetype_serializer_->_error_type ())
        this->nodetype_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }

  // nodeindex
  //
  {
    signed char r = this->nodeindex ();

    if (ctx.error_type ())
      return;

    if (this->nodeindex_serializer_)
    {
      this->nodeindex_serializer_->pre (r);

      if (this->nodeindex_serializer_->_error_type ())
        this->nodeindex_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("nodeindex"))
        return;

      this->nodeindex_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->nodeindex_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->nodeindex_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->nodeindex_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->nodeindex_serializer_->post ();

      if (this->nodeindex_serializer_->_error_type ())
        this->nodeindex_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }

  // serial_number
  //
  {
    const ::serial_numberType& r = this->serial_number ();

    if (ctx.error_type ())
      return;

    if (this->serial_number_serializer_)
    {
      this->serial_number_serializer_->pre (r);

      if (this->serial_number_serializer_->_error_type ())
        this->serial_number_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("serial_number"))
        return;

      this->serial_number_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->serial_number_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->serial_number_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->serial_number_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->serial_number_serializer_->post ();

      if (this->serial_number_serializer_->_error_type ())
        this->serial_number_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }

  // retorts
  //
  {
    const ::retortsType& r = this->retorts ();

    if (ctx.error_type ())
      return;

    if (this->retorts_serializer_)
    {
      this->retorts_serializer_->pre (r);

      if (this->retorts_serializer_->_error_type ())
        this->retorts_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("retorts"))
        return;

      this->retorts_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->retorts_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->retorts_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->retorts_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->retorts_serializer_->post ();

      if (this->retorts_serializer_->_error_type ())
        this->retorts_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }
}

// Element validation and serialization for limitswitchType_sskel.
//
void limitswitchType_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // configuration
  //
  {
    const ::configurationType& r = this->configuration ();

    if (ctx.error_type ())
      return;

    if (this->configuration_serializer_)
    {
      this->configuration_serializer_->pre (r);

      if (this->configuration_serializer_->_error_type ())
        this->configuration_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("configuration"))
        return;

      this->configuration_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->configuration_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->configuration_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->configuration_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->configuration_serializer_->post ();

      if (this->configuration_serializer_->_error_type ())
        this->configuration_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }
}

// Element validation and serialization for limitswitchesType_sskel.
//
void limitswitchesType_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // limitswitch
  //
  while (this->limitswitch_next ())
  {
    const ::limitswitchType& r = this->limitswitch ();

    if (ctx.error_type ())
      return;

    if (this->limitswitch_serializer_)
    {
      this->limitswitch_serializer_->pre (r);

      if (this->limitswitch_serializer_->_error_type ())
        this->limitswitch_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("limitswitch"))
        return;

      this->limitswitch_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->limitswitch_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->limitswitch_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->limitswitch_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->limitswitch_serializer_->post ();

      if (this->limitswitch_serializer_->_error_type ())
        this->limitswitch_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // position_code
  //
  while (this->position_code_next ())
  {
    const ::position_codeType& r = this->position_code ();

    if (ctx.error_type ())
      return;

    if (this->position_code_serializer_)
    {
      this->position_code_serializer_->pre (r);

      if (this->position_code_serializer_->_error_type ())
        this->position_code_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("position_code"))
        return;

      this->position_code_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->position_code_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->position_code_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->position_code_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->position_code_serializer_->post ();

      if (this->position_code_serializer_->_error_type ())
        this->position_code_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;
}

// Element validation and serialization for position_coverageType_sskel.
//
void position_coverageType_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // encoder
  //
  {
    const ::encoderType& r = this->encoder ();

    if (ctx.error_type ())
      return;

    if (this->encoder_serializer_)
    {
      this->encoder_serializer_->pre (r);

      if (this->encoder_serializer_->_error_type ())
        this->encoder_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("encoder"))
        return;

      this->encoder_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->encoder_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->encoder_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->encoder_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->encoder_serializer_->post ();

      if (this->encoder_serializer_->_error_type ())
        this->encoder_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }

  // limitswitches
  //
  {
    const ::limitswitchesType& r = this->limitswitches ();

    if (ctx.error_type ())
      return;

    if (this->limitswitches_serializer_)
    {
      this->limitswitches_serializer_->pre (r);

      if (this->limitswitches_serializer_->_error_type ())
        this->limitswitches_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("limitswitches"))
        return;

      this->limitswitches_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->limitswitches_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->limitswitches_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->limitswitches_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->limitswitches_serializer_->post ();

      if (this->limitswitches_serializer_->_error_type ())
        this->limitswitches_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }
}

// Element validation and serialization for motion_profilesType_sskel.
//
void motion_profilesType_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // motion_profile
  //
  while (this->motion_profile_next ())
  {
    const ::motion_profileType& r = this->motion_profile ();

    if (ctx.error_type ())
      return;

    if (this->motion_profile_serializer_)
    {
      this->motion_profile_serializer_->pre (r);

      if (this->motion_profile_serializer_->_error_type ())
        this->motion_profile_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("motion_profile"))
        return;

      this->motion_profile_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->motion_profile_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->motion_profile_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->motion_profile_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->motion_profile_serializer_->post ();

      if (this->motion_profile_serializer_->_error_type ())
        this->motion_profile_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;
}

// Element validation and serialization for pid_controllersType_sskel.
//
void pid_controllersType_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // pid_controller
  //
  {
    const ::pid_controllerType& r = this->pid_controller ();

    if (ctx.error_type ())
      return;

    if (this->pid_controller_serializer_)
    {
      this->pid_controller_serializer_->pre (r);

      if (this->pid_controller_serializer_->_error_type ())
        this->pid_controller_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("pid_controller"))
        return;

      this->pid_controller_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->pid_controller_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->pid_controller_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->pid_controller_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->pid_controller_serializer_->post ();

      if (this->pid_controller_serializer_->_error_type ())
        this->pid_controller_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }
}

// Element validation and serialization for functionmoduleType_sskel.
//
void functionmoduleType_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // rotation
  //
  if (this->rotation_present ())
  {
    const ::rotationType& r = this->rotation ();

    if (ctx.error_type ())
      return;

    if (this->rotation_serializer_)
    {
      this->rotation_serializer_->pre (r);

      if (this->rotation_serializer_->_error_type ())
        this->rotation_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("rotation"))
        return;

      this->rotation_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->rotation_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->rotation_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->rotation_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->rotation_serializer_->post ();

      if (this->rotation_serializer_->_error_type ())
        this->rotation_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // reference_run
  //
  if (this->reference_run_present ())
  {
    const ::reference_runType& r = this->reference_run ();

    if (ctx.error_type ())
      return;

    if (this->reference_run_serializer_)
    {
      this->reference_run_serializer_->pre (r);

      if (this->reference_run_serializer_->_error_type ())
        this->reference_run_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("reference_run"))
        return;

      this->reference_run_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->reference_run_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->reference_run_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->reference_run_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->reference_run_serializer_->post ();

      if (this->reference_run_serializer_->_error_type ())
        this->reference_run_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // position_coverage
  //
  if (this->position_coverage_present ())
  {
    const ::position_coverageType& r = this->position_coverage ();

    if (ctx.error_type ())
      return;

    if (this->position_coverage_serializer_)
    {
      this->position_coverage_serializer_->pre (r);

      if (this->position_coverage_serializer_->_error_type ())
        this->position_coverage_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("position_coverage"))
        return;

      this->position_coverage_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->position_coverage_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->position_coverage_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->position_coverage_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->position_coverage_serializer_->post ();

      if (this->position_coverage_serializer_->_error_type ())
        this->position_coverage_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // supervision
  //
  if (this->supervision_present ())
  {
    const ::supervisionType& r = this->supervision ();

    if (ctx.error_type ())
      return;

    if (this->supervision_serializer_)
    {
      this->supervision_serializer_->pre (r);

      if (this->supervision_serializer_->_error_type ())
        this->supervision_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("supervision"))
        return;

      this->supervision_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->supervision_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->supervision_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->supervision_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->supervision_serializer_->post ();

      if (this->supervision_serializer_->_error_type ())
        this->supervision_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // driver
  //
  if (this->driver_present ())
  {
    const ::driverType& r = this->driver ();

    if (ctx.error_type ())
      return;

    if (this->driver_serializer_)
    {
      this->driver_serializer_->pre (r);

      if (this->driver_serializer_->_error_type ())
        this->driver_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("driver"))
        return;

      this->driver_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->driver_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->driver_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->driver_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->driver_serializer_->post ();

      if (this->driver_serializer_->_error_type ())
        this->driver_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // motion_profiles
  //
  if (this->motion_profiles_present ())
  {
    const ::motion_profilesType& r = this->motion_profiles ();

    if (ctx.error_type ())
      return;

    if (this->motion_profiles_serializer_)
    {
      this->motion_profiles_serializer_->pre (r);

      if (this->motion_profiles_serializer_->_error_type ())
        this->motion_profiles_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("motion_profiles"))
        return;

      this->motion_profiles_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->motion_profiles_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->motion_profiles_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->motion_profiles_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->motion_profiles_serializer_->post ();

      if (this->motion_profiles_serializer_->_error_type ())
        this->motion_profiles_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // configuration
  //
  if (this->configuration_present ())
  {
    const ::configurationType& r = this->configuration ();

    if (ctx.error_type ())
      return;

    if (this->configuration_serializer_)
    {
      this->configuration_serializer_->pre (r);

      if (this->configuration_serializer_->_error_type ())
        this->configuration_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("configuration"))
        return;

      this->configuration_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->configuration_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->configuration_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->configuration_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->configuration_serializer_->post ();

      if (this->configuration_serializer_->_error_type ())
        this->configuration_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // pid_controllers
  //
  if (this->pid_controllers_present ())
  {
    const ::pid_controllersType& r = this->pid_controllers ();

    if (ctx.error_type ())
      return;

    if (this->pid_controllers_serializer_)
    {
      this->pid_controllers_serializer_->pre (r);

      if (this->pid_controllers_serializer_->_error_type ())
        this->pid_controllers_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("pid_controllers"))
        return;

      this->pid_controllers_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->pid_controllers_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->pid_controllers_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->pid_controllers_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->pid_controllers_serializer_->post ();

      if (this->pid_controllers_serializer_->_error_type ())
        this->pid_controllers_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // pwm_controller
  //
  if (this->pwm_controller_present ())
  {
    const ::pwm_controllerType& r = this->pwm_controller ();

    if (ctx.error_type ())
      return;

    if (this->pwm_controller_serializer_)
    {
      this->pwm_controller_serializer_->pre (r);

      if (this->pwm_controller_serializer_->_error_type ())
        this->pwm_controller_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("pwm_controller"))
        return;

      this->pwm_controller_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->pwm_controller_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->pwm_controller_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->pwm_controller_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->pwm_controller_serializer_->post ();

      if (this->pwm_controller_serializer_->_error_type ())
        this->pwm_controller_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;
}

// Element validation and serialization for functionmodulesType_sskel.
//
void functionmodulesType_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // functionmodule
  //
  while (this->functionmodule_next ())
  {
    const ::functionmoduleType& r = this->functionmodule ();

    if (ctx.error_type ())
      return;

    if (this->functionmodule_serializer_)
    {
      this->functionmodule_serializer_->pre (r);

      if (this->functionmodule_serializer_->_error_type ())
        this->functionmodule_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("functionmodule"))
        return;

      this->functionmodule_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->functionmodule_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->functionmodule_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->functionmodule_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->functionmodule_serializer_->post ();

      if (this->functionmodule_serializer_->_error_type ())
        this->functionmodule_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;
}

// Element validation and serialization for slaveType_sskel.
//
void slaveType_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // nodetype
  //
  {
    signed char r = this->nodetype ();

    if (ctx.error_type ())
      return;

    if (this->nodetype_serializer_)
    {
      this->nodetype_serializer_->pre (r);

      if (this->nodetype_serializer_->_error_type ())
        this->nodetype_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("nodetype"))
        return;

      this->nodetype_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->nodetype_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->nodetype_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->nodetype_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->nodetype_serializer_->post ();

      if (this->nodetype_serializer_->_error_type ())
        this->nodetype_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }

  // nodeindex
  //
  {
    signed char r = this->nodeindex ();

    if (ctx.error_type ())
      return;

    if (this->nodeindex_serializer_)
    {
      this->nodeindex_serializer_->pre (r);

      if (this->nodeindex_serializer_->_error_type ())
        this->nodeindex_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("nodeindex"))
        return;

      this->nodeindex_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->nodeindex_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->nodeindex_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->nodeindex_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->nodeindex_serializer_->post ();

      if (this->nodeindex_serializer_->_error_type ())
        this->nodeindex_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }

  // functionmodules
  //
  {
    const ::functionmodulesType& r = this->functionmodules ();

    if (ctx.error_type ())
      return;

    if (this->functionmodules_serializer_)
    {
      this->functionmodules_serializer_->pre (r);

      if (this->functionmodules_serializer_->_error_type ())
        this->functionmodules_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("functionmodules"))
        return;

      this->functionmodules_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->functionmodules_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->functionmodules_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->functionmodules_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->functionmodules_serializer_->post ();

      if (this->functionmodules_serializer_->_error_type ())
        this->functionmodules_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }
}

// Element validation and serialization for parameter_slavesType_sskel.
//
void parameter_slavesType_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // slave
  //
  while (this->slave_next ())
  {
    const ::slaveType& r = this->slave ();

    if (ctx.error_type ())
      return;

    if (this->slave_serializer_)
    {
      this->slave_serializer_->pre (r);

      if (this->slave_serializer_->_error_type ())
        this->slave_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("slave"))
        return;

      this->slave_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->slave_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->slave_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->slave_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->slave_serializer_->post ();

      if (this->slave_serializer_->_error_type ())
        this->slave_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;
}

// Element validation and serialization for hwconfigType_sskel.
//
void hwconfigType_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // parameter_master
  //
  {
    const ::parameter_masterType& r = this->parameter_master ();

    if (ctx.error_type ())
      return;

    if (this->parameter_master_serializer_)
    {
      this->parameter_master_serializer_->pre (r);

      if (this->parameter_master_serializer_->_error_type ())
        this->parameter_master_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("parameter_master"))
        return;

      this->parameter_master_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->parameter_master_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->parameter_master_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->parameter_master_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->parameter_master_serializer_->post ();

      if (this->parameter_master_serializer_->_error_type ())
        this->parameter_master_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }

  // parameter_slaves
  //
  {
    const ::parameter_slavesType& r = this->parameter_slaves ();

    if (ctx.error_type ())
      return;

    if (this->parameter_slaves_serializer_)
    {
      this->parameter_slaves_serializer_->pre (r);

      if (this->parameter_slaves_serializer_->_error_type ())
        this->parameter_slaves_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("parameter_slaves"))
        return;

      this->parameter_slaves_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->parameter_slaves_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->parameter_slaves_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->parameter_slaves_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->parameter_slaves_serializer_->post ();

      if (this->parameter_slaves_serializer_->_error_type ())
        this->parameter_slaves_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }

  // devices
  //
  {
    const ::devicesType& r = this->devices ();

    if (ctx.error_type ())
      return;

    if (this->devices_serializer_)
    {
      this->devices_serializer_->pre (r);

      if (this->devices_serializer_->_error_type ())
        this->devices_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_element ("devices"))
        return;

      this->devices_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->devices_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->devices_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->devices_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_element ())
        return;

      this->devices_serializer_->post ();

      if (this->devices_serializer_->_error_type ())
        this->devices_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }
}

// Attribute validation and serialization for can_interfaceType_sskel.
//
void can_interfaceType_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  typedef ::xml_schema::string_sskel base;
  base::_serialize_attributes ();

  if (ctx.error_type ())
    return;

  // interface
  //
  if (this->interface_present ())
  {
    const ::std::string& r = this->interface ();

    if (ctx.error_type ())
      return;

    if (this->interface_serializer_)
    {
      this->interface_serializer_->pre (r);

      if (this->interface_serializer_->_error_type ())
        this->interface_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("interface"))
        return;

      this->interface_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->interface_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->interface_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->interface_serializer_->post ();

      if (this->interface_serializer_->_error_type ())
        this->interface_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;
}

// Attribute validation and serialization for tcp_interfaceType_sskel.
//
void tcp_interfaceType_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  typedef ::xml_schema::string_sskel base;
  base::_serialize_attributes ();

  if (ctx.error_type ())
    return;

  // usage
  //
  if (this->usage_present ())
  {
    signed char r = this->usage ();

    if (ctx.error_type ())
      return;

    if (this->usage_serializer_)
    {
      this->usage_serializer_->pre (r);

      if (this->usage_serializer_->_error_type ())
        this->usage_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("usage"))
        return;

      this->usage_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->usage_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->usage_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->usage_serializer_->post ();

      if (this->usage_serializer_->_error_type ())
        this->usage_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;
}

// Attribute validation and serialization for serial_numberType_sskel.
//
void serial_numberType_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  typedef ::xml_schema::string_sskel base;
  base::_serialize_attributes ();

  if (ctx.error_type ())
    return;

  // serialno
  //
  if (this->serialno_present ())
  {
    const ::std::string& r = this->serialno ();

    if (ctx.error_type ())
      return;

    if (this->serialno_serializer_)
    {
      this->serialno_serializer_->pre (r);

      if (this->serialno_serializer_->_error_type ())
        this->serialno_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("serialno"))
        return;

      this->serialno_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->serialno_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->serialno_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->serialno_serializer_->post ();

      if (this->serialno_serializer_->_error_type ())
        this->serialno_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;
}

// Attribute validation and serialization for deviceType_sskel.
//
void deviceType_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // name
  //
  if (this->name_present ())
  {
    const ::std::string& r = this->name ();

    if (ctx.error_type ())
      return;

    if (this->name_serializer_)
    {
      this->name_serializer_->pre (r);

      if (this->name_serializer_->_error_type ())
        this->name_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("name"))
        return;

      this->name_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->name_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->name_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->name_serializer_->post ();

      if (this->name_serializer_->_error_type ())
        this->name_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // id
  //
  if (this->id_present ())
  {
    const ::std::string& r = this->id ();

    if (ctx.error_type ())
      return;

    if (this->id_serializer_)
    {
      this->id_serializer_->pre (r);

      if (this->id_serializer_->_error_type ())
        this->id_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("id"))
        return;

      this->id_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->id_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->id_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->id_serializer_->post ();

      if (this->id_serializer_->_error_type ())
        this->id_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // type
  //
  if (this->type_present ())
  {
    const ::std::string& r = this->type ();

    if (ctx.error_type ())
      return;

    if (this->type_serializer_)
    {
      this->type_serializer_->pre (r);

      if (this->type_serializer_->_error_type ())
        this->type_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("type"))
        return;

      this->type_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->type_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->type_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->type_serializer_->post ();

      if (this->type_serializer_->_error_type ())
        this->type_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // dev_instanceID
  //
  if (this->dev_instanceID_present ())
  {
    const ::std::string& r = this->dev_instanceID ();

    if (ctx.error_type ())
      return;

    if (this->dev_instanceID_serializer_)
    {
      this->dev_instanceID_serializer_->pre (r);

      if (this->dev_instanceID_serializer_->_error_type ())
        this->dev_instanceID_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("dev_instanceID"))
        return;

      this->dev_instanceID_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->dev_instanceID_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->dev_instanceID_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->dev_instanceID_serializer_->post ();

      if (this->dev_instanceID_serializer_->_error_type ())
        this->dev_instanceID_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // optional
  //
  if (this->optional_present ())
  {
    signed char r = this->optional ();

    if (ctx.error_type ())
      return;

    if (this->optional_serializer_)
    {
      this->optional_serializer_->pre (r);

      if (this->optional_serializer_->_error_type ())
        this->optional_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("optional"))
        return;

      this->optional_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->optional_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->optional_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->optional_serializer_->post ();

      if (this->optional_serializer_->_error_type ())
        this->optional_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;
}

// Attribute validation and serialization for retortType_sskel.
//
void retortType_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // name
  //
  if (this->name_present ())
  {
    const ::std::string& r = this->name ();

    if (ctx.error_type ())
      return;

    if (this->name_serializer_)
    {
      this->name_serializer_->pre (r);

      if (this->name_serializer_->_error_type ())
        this->name_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("name"))
        return;

      this->name_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->name_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->name_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->name_serializer_->post ();

      if (this->name_serializer_->_error_type ())
        this->name_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // index
  //
  if (this->index_present ())
  {
    signed char r = this->index ();

    if (ctx.error_type ())
      return;

    if (this->index_serializer_)
    {
      this->index_serializer_->pre (r);

      if (this->index_serializer_->_error_type ())
        this->index_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("index"))
        return;

      this->index_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->index_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->index_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->index_serializer_->post ();

      if (this->index_serializer_->_error_type ())
        this->index_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;
}

// Attribute validation and serialization for parameter_masterType_sskel.
//
void parameter_masterType_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // folded
  //
  if (this->folded_present ())
  {
    const ::std::string& r = this->folded ();

    if (ctx.error_type ())
      return;

    if (this->folded_serializer_)
    {
      this->folded_serializer_->pre (r);

      if (this->folded_serializer_->_error_type ())
        this->folded_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("folded"))
        return;

      this->folded_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->folded_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->folded_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->folded_serializer_->post ();

      if (this->folded_serializer_->_error_type ())
        this->folded_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;
}

// Attribute validation and serialization for rotationType_sskel.
//
void rotationType_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  typedef ::xml_schema::string_sskel base;
  base::_serialize_attributes ();

  if (ctx.error_type ())
    return;

  // type
  //
  if (this->type_present ())
  {
    const ::std::string& r = this->type ();

    if (ctx.error_type ())
      return;

    if (this->type_serializer_)
    {
      this->type_serializer_->pre (r);

      if (this->type_serializer_->_error_type ())
        this->type_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("type"))
        return;

      this->type_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->type_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->type_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->type_serializer_->post ();

      if (this->type_serializer_->_error_type ())
        this->type_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // direction
  //
  if (this->direction_present ())
  {
    const ::std::string& r = this->direction ();

    if (ctx.error_type ())
      return;

    if (this->direction_serializer_)
    {
      this->direction_serializer_->pre (r);

      if (this->direction_serializer_->_error_type ())
        this->direction_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("direction"))
        return;

      this->direction_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->direction_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->direction_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->direction_serializer_->post ();

      if (this->direction_serializer_->_error_type ())
        this->direction_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // steps_revolution
  //
  if (this->steps_revolution_present ())
  {
    short r = this->steps_revolution ();

    if (ctx.error_type ())
      return;

    if (this->steps_revolution_serializer_)
    {
      this->steps_revolution_serializer_->pre (r);

      if (this->steps_revolution_serializer_->_error_type ())
        this->steps_revolution_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("steps_revolution"))
        return;

      this->steps_revolution_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->steps_revolution_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->steps_revolution_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->steps_revolution_serializer_->post ();

      if (this->steps_revolution_serializer_->_error_type ())
        this->steps_revolution_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // position_min
  //
  if (this->position_min_present ())
  {
    short r = this->position_min ();

    if (ctx.error_type ())
      return;

    if (this->position_min_serializer_)
    {
      this->position_min_serializer_->pre (r);

      if (this->position_min_serializer_->_error_type ())
        this->position_min_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("position_min"))
        return;

      this->position_min_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->position_min_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->position_min_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->position_min_serializer_->post ();

      if (this->position_min_serializer_->_error_type ())
        this->position_min_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // position_max
  //
  if (this->position_max_present ())
  {
    short r = this->position_max ();

    if (ctx.error_type ())
      return;

    if (this->position_max_serializer_)
    {
      this->position_max_serializer_->pre (r);

      if (this->position_max_serializer_->_error_type ())
        this->position_max_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("position_max"))
        return;

      this->position_max_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->position_max_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->position_max_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->position_max_serializer_->post ();

      if (this->position_max_serializer_->_error_type ())
        this->position_max_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // speed_min
  //
  if (this->speed_min_present ())
  {
    signed char r = this->speed_min ();

    if (ctx.error_type ())
      return;

    if (this->speed_min_serializer_)
    {
      this->speed_min_serializer_->pre (r);

      if (this->speed_min_serializer_->_error_type ())
        this->speed_min_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("speed_min"))
        return;

      this->speed_min_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->speed_min_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->speed_min_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->speed_min_serializer_->post ();

      if (this->speed_min_serializer_->_error_type ())
        this->speed_min_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // speed_max
  //
  if (this->speed_max_present ())
  {
    short r = this->speed_max ();

    if (ctx.error_type ())
      return;

    if (this->speed_max_serializer_)
    {
      this->speed_max_serializer_->pre (r);

      if (this->speed_max_serializer_->_error_type ())
        this->speed_max_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("speed_max"))
        return;

      this->speed_max_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->speed_max_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->speed_max_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->speed_max_serializer_->post ();

      if (this->speed_max_serializer_->_error_type ())
        this->speed_max_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // run_cs
  //
  if (this->run_cs_present ())
  {
    signed char r = this->run_cs ();

    if (ctx.error_type ())
      return;

    if (this->run_cs_serializer_)
    {
      this->run_cs_serializer_->pre (r);

      if (this->run_cs_serializer_->_error_type ())
        this->run_cs_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("run_cs"))
        return;

      this->run_cs_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->run_cs_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->run_cs_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->run_cs_serializer_->post ();

      if (this->run_cs_serializer_->_error_type ())
        this->run_cs_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // stop_cs
  //
  if (this->stop_cs_present ())
  {
    signed char r = this->stop_cs ();

    if (ctx.error_type ())
      return;

    if (this->stop_cs_serializer_)
    {
      this->stop_cs_serializer_->pre (r);

      if (this->stop_cs_serializer_->_error_type ())
        this->stop_cs_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("stop_cs"))
        return;

      this->stop_cs_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->stop_cs_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->stop_cs_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->stop_cs_serializer_->post ();

      if (this->stop_cs_serializer_->_error_type ())
        this->stop_cs_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // stop_cs_delay
  //
  if (this->stop_cs_delay_present ())
  {
    short r = this->stop_cs_delay ();

    if (ctx.error_type ())
      return;

    if (this->stop_cs_delay_serializer_)
    {
      this->stop_cs_delay_serializer_->pre (r);

      if (this->stop_cs_delay_serializer_->_error_type ())
        this->stop_cs_delay_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("stop_cs_delay"))
        return;

      this->stop_cs_delay_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->stop_cs_delay_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->stop_cs_delay_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->stop_cs_delay_serializer_->post ();

      if (this->stop_cs_delay_serializer_->_error_type ())
        this->stop_cs_delay_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;
}

// Attribute validation and serialization for reference_runType_sskel.
//
void reference_runType_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  typedef ::xml_schema::string_sskel base;
  base::_serialize_attributes ();

  if (ctx.error_type ())
    return;

  // ref_position
  //
  if (this->ref_position_present ())
  {
    signed char r = this->ref_position ();

    if (ctx.error_type ())
      return;

    if (this->ref_position_serializer_)
    {
      this->ref_position_serializer_->pre (r);

      if (this->ref_position_serializer_->_error_type ())
        this->ref_position_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("ref_position"))
        return;

      this->ref_position_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->ref_position_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->ref_position_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->ref_position_serializer_->post ();

      if (this->ref_position_serializer_->_error_type ())
        this->ref_position_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // max_distance
  //
  if (this->max_distance_present ())
  {
    short r = this->max_distance ();

    if (ctx.error_type ())
      return;

    if (this->max_distance_serializer_)
    {
      this->max_distance_serializer_->pre (r);

      if (this->max_distance_serializer_->_error_type ())
        this->max_distance_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("max_distance"))
        return;

      this->max_distance_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->max_distance_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->max_distance_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->max_distance_serializer_->post ();

      if (this->max_distance_serializer_->_error_type ())
        this->max_distance_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // timeout
  //
  if (this->timeout_present ())
  {
    int r = this->timeout ();

    if (ctx.error_type ())
      return;

    if (this->timeout_serializer_)
    {
      this->timeout_serializer_->pre (r);

      if (this->timeout_serializer_->_error_type ())
        this->timeout_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("timeout"))
        return;

      this->timeout_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->timeout_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->timeout_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->timeout_serializer_->post ();

      if (this->timeout_serializer_->_error_type ())
        this->timeout_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // reverse_distance
  //
  if (this->reverse_distance_present ())
  {
    signed char r = this->reverse_distance ();

    if (ctx.error_type ())
      return;

    if (this->reverse_distance_serializer_)
    {
      this->reverse_distance_serializer_->pre (r);

      if (this->reverse_distance_serializer_->_error_type ())
        this->reverse_distance_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("reverse_distance"))
        return;

      this->reverse_distance_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->reverse_distance_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->reverse_distance_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->reverse_distance_serializer_->post ();

      if (this->reverse_distance_serializer_->_error_type ())
        this->reverse_distance_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // slow_speed
  //
  if (this->slow_speed_present ())
  {
    signed char r = this->slow_speed ();

    if (ctx.error_type ())
      return;

    if (this->slow_speed_serializer_)
    {
      this->slow_speed_serializer_->pre (r);

      if (this->slow_speed_serializer_->_error_type ())
        this->slow_speed_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("slow_speed"))
        return;

      this->slow_speed_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->slow_speed_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->slow_speed_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->slow_speed_serializer_->post ();

      if (this->slow_speed_serializer_->_error_type ())
        this->slow_speed_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // high_speed
  //
  if (this->high_speed_present ())
  {
    short r = this->high_speed ();

    if (ctx.error_type ())
      return;

    if (this->high_speed_serializer_)
    {
      this->high_speed_serializer_->pre (r);

      if (this->high_speed_serializer_->_error_type ())
        this->high_speed_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("high_speed"))
        return;

      this->high_speed_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->high_speed_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->high_speed_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->high_speed_serializer_->post ();

      if (this->high_speed_serializer_->_error_type ())
        this->high_speed_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // refpos_offset
  //
  if (this->refpos_offset_present ())
  {
    signed char r = this->refpos_offset ();

    if (ctx.error_type ())
      return;

    if (this->refpos_offset_serializer_)
    {
      this->refpos_offset_serializer_->pre (r);

      if (this->refpos_offset_serializer_->_error_type ())
        this->refpos_offset_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("refpos_offset"))
        return;

      this->refpos_offset_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->refpos_offset_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->refpos_offset_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->refpos_offset_serializer_->post ();

      if (this->refpos_offset_serializer_->_error_type ())
        this->refpos_offset_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;
}

// Attribute validation and serialization for encoderType_sskel.
//
void encoderType_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  typedef ::xml_schema::string_sskel base;
  base::_serialize_attributes ();

  if (ctx.error_type ())
    return;

  // type
  //
  if (this->type_present ())
  {
    signed char r = this->type ();

    if (ctx.error_type ())
      return;

    if (this->type_serializer_)
    {
      this->type_serializer_->pre (r);

      if (this->type_serializer_->_error_type ())
        this->type_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("type"))
        return;

      this->type_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->type_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->type_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->type_serializer_->post ();

      if (this->type_serializer_->_error_type ())
        this->type_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // resolution
  //
  if (this->resolution_present ())
  {
    short r = this->resolution ();

    if (ctx.error_type ())
      return;

    if (this->resolution_serializer_)
    {
      this->resolution_serializer_->pre (r);

      if (this->resolution_serializer_->_error_type ())
        this->resolution_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("resolution"))
        return;

      this->resolution_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->resolution_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->resolution_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->resolution_serializer_->post ();

      if (this->resolution_serializer_->_error_type ())
        this->resolution_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // rotation
  //
  if (this->rotation_present ())
  {
    const ::std::string& r = this->rotation ();

    if (ctx.error_type ())
      return;

    if (this->rotation_serializer_)
    {
      this->rotation_serializer_->pre (r);

      if (this->rotation_serializer_->_error_type ())
        this->rotation_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("rotation"))
        return;

      this->rotation_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->rotation_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->rotation_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->rotation_serializer_->post ();

      if (this->rotation_serializer_->_error_type ())
        this->rotation_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;
}

// Attribute validation and serialization for configurationType_sskel.
//
void configurationType_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  typedef ::xml_schema::string_sskel base;
  base::_serialize_attributes ();

  if (ctx.error_type ())
    return;

  // polarity
  //
  if (this->polarity_present ())
  {
    signed char r = this->polarity ();

    if (ctx.error_type ())
      return;

    if (this->polarity_serializer_)
    {
      this->polarity_serializer_->pre (r);

      if (this->polarity_serializer_->_error_type ())
        this->polarity_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("polarity"))
        return;

      this->polarity_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->polarity_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->polarity_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->polarity_serializer_->post ();

      if (this->polarity_serializer_->_error_type ())
        this->polarity_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // sample_rate
  //
  if (this->sample_rate_present ())
  {
    signed char r = this->sample_rate ();

    if (ctx.error_type ())
      return;

    if (this->sample_rate_serializer_)
    {
      this->sample_rate_serializer_->pre (r);

      if (this->sample_rate_serializer_->_error_type ())
        this->sample_rate_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("sample_rate"))
        return;

      this->sample_rate_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->sample_rate_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->sample_rate_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->sample_rate_serializer_->post ();

      if (this->sample_rate_serializer_->_error_type ())
        this->sample_rate_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // debounce
  //
  if (this->debounce_present ())
  {
    signed char r = this->debounce ();

    if (ctx.error_type ())
      return;

    if (this->debounce_serializer_)
    {
      this->debounce_serializer_->pre (r);

      if (this->debounce_serializer_->_error_type ())
        this->debounce_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("debounce"))
        return;

      this->debounce_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->debounce_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->debounce_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->debounce_serializer_->post ();

      if (this->debounce_serializer_->_error_type ())
        this->debounce_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // temp_tolerance
  //
  if (this->temp_tolerance_present ())
  {
    signed char r = this->temp_tolerance ();

    if (ctx.error_type ())
      return;

    if (this->temp_tolerance_serializer_)
    {
      this->temp_tolerance_serializer_->pre (r);

      if (this->temp_tolerance_serializer_->_error_type ())
        this->temp_tolerance_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("temp_tolerance"))
        return;

      this->temp_tolerance_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->temp_tolerance_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->temp_tolerance_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->temp_tolerance_serializer_->post ();

      if (this->temp_tolerance_serializer_->_error_type ())
        this->temp_tolerance_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // sampling_period
  //
  if (this->sampling_period_present ())
  {
    short r = this->sampling_period ();

    if (ctx.error_type ())
      return;

    if (this->sampling_period_serializer_)
    {
      this->sampling_period_serializer_->pre (r);

      if (this->sampling_period_serializer_->_error_type ())
        this->sampling_period_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("sampling_period"))
        return;

      this->sampling_period_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->sampling_period_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->sampling_period_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->sampling_period_serializer_->post ();

      if (this->sampling_period_serializer_->_error_type ())
        this->sampling_period_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // fan_speed
  //
  if (this->fan_speed_present ())
  {
    short r = this->fan_speed ();

    if (ctx.error_type ())
      return;

    if (this->fan_speed_serializer_)
    {
      this->fan_speed_serializer_->pre (r);

      if (this->fan_speed_serializer_->_error_type ())
        this->fan_speed_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("fan_speed"))
        return;

      this->fan_speed_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->fan_speed_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->fan_speed_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->fan_speed_serializer_->post ();

      if (this->fan_speed_serializer_->_error_type ())
        this->fan_speed_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // fan_threshold
  //
  if (this->fan_threshold_present ())
  {
    short r = this->fan_threshold ();

    if (ctx.error_type ())
      return;

    if (this->fan_threshold_serializer_)
    {
      this->fan_threshold_serializer_->pre (r);

      if (this->fan_threshold_serializer_->_error_type ())
        this->fan_threshold_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("fan_threshold"))
        return;

      this->fan_threshold_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->fan_threshold_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->fan_threshold_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->fan_threshold_serializer_->post ();

      if (this->fan_threshold_serializer_->_error_type ())
        this->fan_threshold_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // current_gain
  //
  if (this->current_gain_present ())
  {
    short r = this->current_gain ();

    if (ctx.error_type ())
      return;

    if (this->current_gain_serializer_)
    {
      this->current_gain_serializer_->pre (r);

      if (this->current_gain_serializer_->_error_type ())
        this->current_gain_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("current_gain"))
        return;

      this->current_gain_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->current_gain_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->current_gain_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->current_gain_serializer_->post ();

      if (this->current_gain_serializer_->_error_type ())
        this->current_gain_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // heater_current
  //
  if (this->heater_current_present ())
  {
    short r = this->heater_current ();

    if (ctx.error_type ())
      return;

    if (this->heater_current_serializer_)
    {
      this->heater_current_serializer_->pre (r);

      if (this->heater_current_serializer_->_error_type ())
        this->heater_current_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("heater_current"))
        return;

      this->heater_current_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->heater_current_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->heater_current_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->heater_current_serializer_->post ();

      if (this->heater_current_serializer_->_error_type ())
        this->heater_current_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // heater_threshold
  //
  if (this->heater_threshold_present ())
  {
    short r = this->heater_threshold ();

    if (ctx.error_type ())
      return;

    if (this->heater_threshold_serializer_)
    {
      this->heater_threshold_serializer_->pre (r);

      if (this->heater_threshold_serializer_->_error_type ())
        this->heater_threshold_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("heater_threshold"))
        return;

      this->heater_threshold_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->heater_threshold_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->heater_threshold_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->heater_threshold_serializer_->post ();

      if (this->heater_threshold_serializer_->_error_type ())
        this->heater_threshold_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // current_deviation
  //
  if (this->current_deviation_present ())
  {
    short r = this->current_deviation ();

    if (ctx.error_type ())
      return;

    if (this->current_deviation_serializer_)
    {
      this->current_deviation_serializer_->pre (r);

      if (this->current_deviation_serializer_->_error_type ())
        this->current_deviation_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("current_deviation"))
        return;

      this->current_deviation_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->current_deviation_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->current_deviation_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->current_deviation_serializer_->post ();

      if (this->current_deviation_serializer_->_error_type ())
        this->current_deviation_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // current_min_230_serial
  //
  if (this->current_min_230_serial_present ())
  {
    short r = this->current_min_230_serial ();

    if (ctx.error_type ())
      return;

    if (this->current_min_230_serial_serializer_)
    {
      this->current_min_230_serial_serializer_->pre (r);

      if (this->current_min_230_serial_serializer_->_error_type ())
        this->current_min_230_serial_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("current_min_230_serial"))
        return;

      this->current_min_230_serial_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->current_min_230_serial_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->current_min_230_serial_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->current_min_230_serial_serializer_->post ();

      if (this->current_min_230_serial_serializer_->_error_type ())
        this->current_min_230_serial_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // current_max_230_serial
  //
  if (this->current_max_230_serial_present ())
  {
    short r = this->current_max_230_serial ();

    if (ctx.error_type ())
      return;

    if (this->current_max_230_serial_serializer_)
    {
      this->current_max_230_serial_serializer_->pre (r);

      if (this->current_max_230_serial_serializer_->_error_type ())
        this->current_max_230_serial_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("current_max_230_serial"))
        return;

      this->current_max_230_serial_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->current_max_230_serial_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->current_max_230_serial_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->current_max_230_serial_serializer_->post ();

      if (this->current_max_230_serial_serializer_->_error_type ())
        this->current_max_230_serial_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // current_min_100_serial
  //
  if (this->current_min_100_serial_present ())
  {
    short r = this->current_min_100_serial ();

    if (ctx.error_type ())
      return;

    if (this->current_min_100_serial_serializer_)
    {
      this->current_min_100_serial_serializer_->pre (r);

      if (this->current_min_100_serial_serializer_->_error_type ())
        this->current_min_100_serial_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("current_min_100_serial"))
        return;

      this->current_min_100_serial_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->current_min_100_serial_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->current_min_100_serial_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->current_min_100_serial_serializer_->post ();

      if (this->current_min_100_serial_serializer_->_error_type ())
        this->current_min_100_serial_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // current_max_100_serial
  //
  if (this->current_max_100_serial_present ())
  {
    short r = this->current_max_100_serial ();

    if (ctx.error_type ())
      return;

    if (this->current_max_100_serial_serializer_)
    {
      this->current_max_100_serial_serializer_->pre (r);

      if (this->current_max_100_serial_serializer_->_error_type ())
        this->current_max_100_serial_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("current_max_100_serial"))
        return;

      this->current_max_100_serial_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->current_max_100_serial_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->current_max_100_serial_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->current_max_100_serial_serializer_->post ();

      if (this->current_max_100_serial_serializer_->_error_type ())
        this->current_max_100_serial_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // current_min_100_parallel
  //
  if (this->current_min_100_parallel_present ())
  {
    short r = this->current_min_100_parallel ();

    if (ctx.error_type ())
      return;

    if (this->current_min_100_parallel_serializer_)
    {
      this->current_min_100_parallel_serializer_->pre (r);

      if (this->current_min_100_parallel_serializer_->_error_type ())
        this->current_min_100_parallel_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("current_min_100_parallel"))
        return;

      this->current_min_100_parallel_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->current_min_100_parallel_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->current_min_100_parallel_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->current_min_100_parallel_serializer_->post ();

      if (this->current_min_100_parallel_serializer_->_error_type ())
        this->current_min_100_parallel_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // current_max_100_parallel
  //
  if (this->current_max_100_parallel_present ())
  {
    short r = this->current_max_100_parallel ();

    if (ctx.error_type ())
      return;

    if (this->current_max_100_parallel_serializer_)
    {
      this->current_max_100_parallel_serializer_->pre (r);

      if (this->current_max_100_parallel_serializer_->_error_type ())
        this->current_max_100_parallel_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("current_max_100_parallel"))
        return;

      this->current_max_100_parallel_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->current_max_100_parallel_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->current_max_100_parallel_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->current_max_100_parallel_serializer_->post ();

      if (this->current_max_100_parallel_serializer_->_error_type ())
        this->current_max_100_parallel_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // pressure_tolerance
  //
  if (this->pressure_tolerance_present ())
  {
    signed char r = this->pressure_tolerance ();

    if (ctx.error_type ())
      return;

    if (this->pressure_tolerance_serializer_)
    {
      this->pressure_tolerance_serializer_->pre (r);

      if (this->pressure_tolerance_serializer_->_error_type ())
        this->pressure_tolerance_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("pressure_tolerance"))
        return;

      this->pressure_tolerance_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->pressure_tolerance_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->pressure_tolerance_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->pressure_tolerance_serializer_->post ();

      if (this->pressure_tolerance_serializer_->_error_type ())
        this->pressure_tolerance_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // fan_current_gain
  //
  if (this->fan_current_gain_present ())
  {
    signed char r = this->fan_current_gain ();

    if (ctx.error_type ())
      return;

    if (this->fan_current_gain_serializer_)
    {
      this->fan_current_gain_serializer_->pre (r);

      if (this->fan_current_gain_serializer_->_error_type ())
        this->fan_current_gain_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("fan_current_gain"))
        return;

      this->fan_current_gain_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->fan_current_gain_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->fan_current_gain_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->fan_current_gain_serializer_->post ();

      if (this->fan_current_gain_serializer_->_error_type ())
        this->fan_current_gain_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // fan_current
  //
  if (this->fan_current_present ())
  {
    short r = this->fan_current ();

    if (ctx.error_type ())
      return;

    if (this->fan_current_serializer_)
    {
      this->fan_current_serializer_->pre (r);

      if (this->fan_current_serializer_->_error_type ())
        this->fan_current_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("fan_current"))
        return;

      this->fan_current_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->fan_current_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->fan_current_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->fan_current_serializer_->post ();

      if (this->fan_current_serializer_->_error_type ())
        this->fan_current_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // pump_current
  //
  if (this->pump_current_present ())
  {
    short r = this->pump_current ();

    if (ctx.error_type ())
      return;

    if (this->pump_current_serializer_)
    {
      this->pump_current_serializer_->pre (r);

      if (this->pump_current_serializer_->_error_type ())
        this->pump_current_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("pump_current"))
        return;

      this->pump_current_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->pump_current_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->pump_current_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->pump_current_serializer_->post ();

      if (this->pump_current_serializer_->_error_type ())
        this->pump_current_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // pump_threshold
  //
  if (this->pump_threshold_present ())
  {
    short r = this->pump_threshold ();

    if (ctx.error_type ())
      return;

    if (this->pump_threshold_serializer_)
    {
      this->pump_threshold_serializer_->pre (r);

      if (this->pump_threshold_serializer_->_error_type ())
        this->pump_threshold_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("pump_threshold"))
        return;

      this->pump_threshold_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->pump_threshold_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->pump_threshold_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->pump_threshold_serializer_->post ();

      if (this->pump_threshold_serializer_->_error_type ())
        this->pump_threshold_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // enabled
  //
  if (this->enabled_present ())
  {
    signed char r = this->enabled ();

    if (ctx.error_type ())
      return;

    if (this->enabled_serializer_)
    {
      this->enabled_serializer_->pre (r);

      if (this->enabled_serializer_->_error_type ())
        this->enabled_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("enabled"))
        return;

      this->enabled_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->enabled_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->enabled_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->enabled_serializer_->post ();

      if (this->enabled_serializer_->_error_type ())
        this->enabled_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // inactiv_shutdown
  //
  if (this->inactiv_shutdown_present ())
  {
    signed char r = this->inactiv_shutdown ();

    if (ctx.error_type ())
      return;

    if (this->inactiv_shutdown_serializer_)
    {
      this->inactiv_shutdown_serializer_->pre (r);

      if (this->inactiv_shutdown_serializer_->_error_type ())
        this->inactiv_shutdown_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("inactiv_shutdown"))
        return;

      this->inactiv_shutdown_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->inactiv_shutdown_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->inactiv_shutdown_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->inactiv_shutdown_serializer_->post ();

      if (this->inactiv_shutdown_serializer_->_error_type ())
        this->inactiv_shutdown_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // inactiv_emcy
  //
  if (this->inactiv_emcy_present ())
  {
    signed char r = this->inactiv_emcy ();

    if (ctx.error_type ())
      return;

    if (this->inactiv_emcy_serializer_)
    {
      this->inactiv_emcy_serializer_->pre (r);

      if (this->inactiv_emcy_serializer_->_error_type ())
        this->inactiv_emcy_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("inactiv_emcy"))
        return;

      this->inactiv_emcy_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->inactiv_emcy_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->inactiv_emcy_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->inactiv_emcy_serializer_->post ();

      if (this->inactiv_emcy_serializer_->_error_type ())
        this->inactiv_emcy_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // outval_inactiv
  //
  if (this->outval_inactiv_present ())
  {
    signed char r = this->outval_inactiv ();

    if (ctx.error_type ())
      return;

    if (this->outval_inactiv_serializer_)
    {
      this->outval_inactiv_serializer_->pre (r);

      if (this->outval_inactiv_serializer_->_error_type ())
        this->outval_inactiv_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("outval_inactiv"))
        return;

      this->outval_inactiv_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->outval_inactiv_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->outval_inactiv_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->outval_inactiv_serializer_->post ();

      if (this->outval_inactiv_serializer_->_error_type ())
        this->outval_inactiv_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // livetime_limit
  //
  if (this->livetime_limit_present ())
  {
    signed char r = this->livetime_limit ();

    if (ctx.error_type ())
      return;

    if (this->livetime_limit_serializer_)
    {
      this->livetime_limit_serializer_->pre (r);

      if (this->livetime_limit_serializer_->_error_type ())
        this->livetime_limit_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("livetime_limit"))
        return;

      this->livetime_limit_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->livetime_limit_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->livetime_limit_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->livetime_limit_serializer_->post ();

      if (this->livetime_limit_serializer_->_error_type ())
        this->livetime_limit_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // timestamp
  //
  if (this->timestamp_present ())
  {
    signed char r = this->timestamp ();

    if (ctx.error_type ())
      return;

    if (this->timestamp_serializer_)
    {
      this->timestamp_serializer_->pre (r);

      if (this->timestamp_serializer_->_error_type ())
        this->timestamp_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("timestamp"))
        return;

      this->timestamp_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->timestamp_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->timestamp_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->timestamp_serializer_->post ();

      if (this->timestamp_serializer_->_error_type ())
        this->timestamp_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // threshold
  //
  if (this->threshold_present ())
  {
    signed char r = this->threshold ();

    if (ctx.error_type ())
      return;

    if (this->threshold_serializer_)
    {
      this->threshold_serializer_->pre (r);

      if (this->threshold_serializer_->_error_type ())
        this->threshold_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("threshold"))
        return;

      this->threshold_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->threshold_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->threshold_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->threshold_serializer_->post ();

      if (this->threshold_serializer_->_error_type ())
        this->threshold_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // interval
  //
  if (this->interval_present ())
  {
    signed char r = this->interval ();

    if (ctx.error_type ())
      return;

    if (this->interval_serializer_)
    {
      this->interval_serializer_->pre (r);

      if (this->interval_serializer_->_error_type ())
        this->interval_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("interval"))
        return;

      this->interval_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->interval_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->interval_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->interval_serializer_->post ();

      if (this->interval_serializer_->_error_type ())
        this->interval_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;
}

// Attribute validation and serialization for limitswitchType_sskel.
//
void limitswitchType_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // index
  //
  if (this->index_present ())
  {
    signed char r = this->index ();

    if (ctx.error_type ())
      return;

    if (this->index_serializer_)
    {
      this->index_serializer_->pre (r);

      if (this->index_serializer_->_error_type ())
        this->index_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("index"))
        return;

      this->index_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->index_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->index_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->index_serializer_->post ();

      if (this->index_serializer_->_error_type ())
        this->index_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;
}

// Attribute validation and serialization for position_codeType_sskel.
//
void position_codeType_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  typedef ::xml_schema::string_sskel base;
  base::_serialize_attributes ();

  if (ctx.error_type ())
    return;

  // value
  //
  if (this->value_present ())
  {
    signed char r = this->value ();

    if (ctx.error_type ())
      return;

    if (this->value_serializer_)
    {
      this->value_serializer_->pre (r);

      if (this->value_serializer_->_error_type ())
        this->value_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("value"))
        return;

      this->value_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->value_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->value_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->value_serializer_->post ();

      if (this->value_serializer_->_error_type ())
        this->value_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // stop
  //
  if (this->stop_present ())
  {
    signed char r = this->stop ();

    if (ctx.error_type ())
      return;

    if (this->stop_serializer_)
    {
      this->stop_serializer_->pre (r);

      if (this->stop_serializer_->_error_type ())
        this->stop_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("stop"))
        return;

      this->stop_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->stop_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->stop_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->stop_serializer_->post ();

      if (this->stop_serializer_->_error_type ())
        this->stop_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // stop_dir
  //
  if (this->stop_dir_present ())
  {
    const ::std::string& r = this->stop_dir ();

    if (ctx.error_type ())
      return;

    if (this->stop_dir_serializer_)
    {
      this->stop_dir_serializer_->pre (r);

      if (this->stop_dir_serializer_->_error_type ())
        this->stop_dir_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("stop_dir"))
        return;

      this->stop_dir_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->stop_dir_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->stop_dir_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->stop_dir_serializer_->post ();

      if (this->stop_dir_serializer_->_error_type ())
        this->stop_dir_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // position
  //
  if (this->position_present ())
  {
    signed char r = this->position ();

    if (ctx.error_type ())
      return;

    if (this->position_serializer_)
    {
      this->position_serializer_->pre (r);

      if (this->position_serializer_->_error_type ())
        this->position_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("position"))
        return;

      this->position_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->position_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->position_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->position_serializer_->post ();

      if (this->position_serializer_->_error_type ())
        this->position_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // width
  //
  if (this->width_present ())
  {
    signed char r = this->width ();

    if (ctx.error_type ())
      return;

    if (this->width_serializer_)
    {
      this->width_serializer_->pre (r);

      if (this->width_serializer_->_error_type ())
        this->width_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("width"))
        return;

      this->width_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->width_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->width_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->width_serializer_->post ();

      if (this->width_serializer_->_error_type ())
        this->width_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // deviation
  //
  if (this->deviation_present ())
  {
    signed char r = this->deviation ();

    if (ctx.error_type ())
      return;

    if (this->deviation_serializer_)
    {
      this->deviation_serializer_->pre (r);

      if (this->deviation_serializer_->_error_type ())
        this->deviation_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("deviation"))
        return;

      this->deviation_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->deviation_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->deviation_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->deviation_serializer_->post ();

      if (this->deviation_serializer_->_error_type ())
        this->deviation_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // dir_check
  //
  if (this->dir_check_present ())
  {
    signed char r = this->dir_check ();

    if (ctx.error_type ())
      return;

    if (this->dir_check_serializer_)
    {
      this->dir_check_serializer_->pre (r);

      if (this->dir_check_serializer_->_error_type ())
        this->dir_check_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("dir_check"))
        return;

      this->dir_check_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->dir_check_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->dir_check_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->dir_check_serializer_->post ();

      if (this->dir_check_serializer_->_error_type ())
        this->dir_check_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // hit_skip
  //
  if (this->hit_skip_present ())
  {
    signed char r = this->hit_skip ();

    if (ctx.error_type ())
      return;

    if (this->hit_skip_serializer_)
    {
      this->hit_skip_serializer_->pre (r);

      if (this->hit_skip_serializer_->_error_type ())
        this->hit_skip_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("hit_skip"))
        return;

      this->hit_skip_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->hit_skip_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->hit_skip_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->hit_skip_serializer_->post ();

      if (this->hit_skip_serializer_->_error_type ())
        this->hit_skip_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;
}

// Attribute validation and serialization for supervisionType_sskel.
//
void supervisionType_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  typedef ::xml_schema::string_sskel base;
  base::_serialize_attributes ();

  if (ctx.error_type ())
    return;

  // steploss_warn_limit
  //
  if (this->steploss_warn_limit_present ())
  {
    signed char r = this->steploss_warn_limit ();

    if (ctx.error_type ())
      return;

    if (this->steploss_warn_limit_serializer_)
    {
      this->steploss_warn_limit_serializer_->pre (r);

      if (this->steploss_warn_limit_serializer_->_error_type ())
        this->steploss_warn_limit_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("steploss_warn_limit"))
        return;

      this->steploss_warn_limit_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->steploss_warn_limit_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->steploss_warn_limit_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->steploss_warn_limit_serializer_->post ();

      if (this->steploss_warn_limit_serializer_->_error_type ())
        this->steploss_warn_limit_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // steploss_error_limit
  //
  if (this->steploss_error_limit_present ())
  {
    signed char r = this->steploss_error_limit ();

    if (ctx.error_type ())
      return;

    if (this->steploss_error_limit_serializer_)
    {
      this->steploss_error_limit_serializer_->pre (r);

      if (this->steploss_error_limit_serializer_->_error_type ())
        this->steploss_error_limit_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("steploss_error_limit"))
        return;

      this->steploss_error_limit_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->steploss_error_limit_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->steploss_error_limit_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->steploss_error_limit_serializer_->post ();

      if (this->steploss_error_limit_serializer_->_error_type ())
        this->steploss_error_limit_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // current_limit
  //
  if (this->current_limit_present ())
  {
    short r = this->current_limit ();

    if (ctx.error_type ())
      return;

    if (this->current_limit_serializer_)
    {
      this->current_limit_serializer_->pre (r);

      if (this->current_limit_serializer_->_error_type ())
        this->current_limit_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("current_limit"))
        return;

      this->current_limit_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->current_limit_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->current_limit_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->current_limit_serializer_->post ();

      if (this->current_limit_serializer_->_error_type ())
        this->current_limit_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;
}

// Attribute validation and serialization for driverType_sskel.
//
void driverType_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  typedef ::xml_schema::string_sskel base;
  base::_serialize_attributes ();

  if (ctx.error_type ())
    return;

  // type
  //
  if (this->type_present ())
  {
    const ::std::string& r = this->type ();

    if (ctx.error_type ())
      return;

    if (this->type_serializer_)
    {
      this->type_serializer_->pre (r);

      if (this->type_serializer_->_error_type ())
        this->type_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("type"))
        return;

      this->type_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->type_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->type_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->type_serializer_->post ();

      if (this->type_serializer_->_error_type ())
        this->type_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // reg_chopConf
  //
  if (this->reg_chopConf_present ())
  {
    const ::std::string& r = this->reg_chopConf ();

    if (ctx.error_type ())
      return;

    if (this->reg_chopConf_serializer_)
    {
      this->reg_chopConf_serializer_->pre (r);

      if (this->reg_chopConf_serializer_->_error_type ())
        this->reg_chopConf_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("reg_chopConf"))
        return;

      this->reg_chopConf_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->reg_chopConf_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->reg_chopConf_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->reg_chopConf_serializer_->post ();

      if (this->reg_chopConf_serializer_->_error_type ())
        this->reg_chopConf_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // reg_smartEn
  //
  if (this->reg_smartEn_present ())
  {
    const ::std::string& r = this->reg_smartEn ();

    if (ctx.error_type ())
      return;

    if (this->reg_smartEn_serializer_)
    {
      this->reg_smartEn_serializer_->pre (r);

      if (this->reg_smartEn_serializer_->_error_type ())
        this->reg_smartEn_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("reg_smartEn"))
        return;

      this->reg_smartEn_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->reg_smartEn_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->reg_smartEn_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->reg_smartEn_serializer_->post ();

      if (this->reg_smartEn_serializer_->_error_type ())
        this->reg_smartEn_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // reg_sgcsConf
  //
  if (this->reg_sgcsConf_present ())
  {
    const ::std::string& r = this->reg_sgcsConf ();

    if (ctx.error_type ())
      return;

    if (this->reg_sgcsConf_serializer_)
    {
      this->reg_sgcsConf_serializer_->pre (r);

      if (this->reg_sgcsConf_serializer_->_error_type ())
        this->reg_sgcsConf_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("reg_sgcsConf"))
        return;

      this->reg_sgcsConf_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->reg_sgcsConf_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->reg_sgcsConf_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->reg_sgcsConf_serializer_->post ();

      if (this->reg_sgcsConf_serializer_->_error_type ())
        this->reg_sgcsConf_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // reg_drvConf
  //
  if (this->reg_drvConf_present ())
  {
    const ::std::string& r = this->reg_drvConf ();

    if (ctx.error_type ())
      return;

    if (this->reg_drvConf_serializer_)
    {
      this->reg_drvConf_serializer_->pre (r);

      if (this->reg_drvConf_serializer_->_error_type ())
        this->reg_drvConf_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("reg_drvConf"))
        return;

      this->reg_drvConf_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->reg_drvConf_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->reg_drvConf_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->reg_drvConf_serializer_->post ();

      if (this->reg_drvConf_serializer_->_error_type ())
        this->reg_drvConf_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;
}

// Attribute validation and serialization for motion_profileType_sskel.
//
void motion_profileType_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  typedef ::xml_schema::string_sskel base;
  base::_serialize_attributes ();

  if (ctx.error_type ())
    return;

  // speed_min
  //
  if (this->speed_min_present ())
  {
    signed char r = this->speed_min ();

    if (ctx.error_type ())
      return;

    if (this->speed_min_serializer_)
    {
      this->speed_min_serializer_->pre (r);

      if (this->speed_min_serializer_->_error_type ())
        this->speed_min_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("speed_min"))
        return;

      this->speed_min_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->speed_min_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->speed_min_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->speed_min_serializer_->post ();

      if (this->speed_min_serializer_->_error_type ())
        this->speed_min_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // speed_max
  //
  if (this->speed_max_present ())
  {
    short r = this->speed_max ();

    if (ctx.error_type ())
      return;

    if (this->speed_max_serializer_)
    {
      this->speed_max_serializer_->pre (r);

      if (this->speed_max_serializer_->_error_type ())
        this->speed_max_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("speed_max"))
        return;

      this->speed_max_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->speed_max_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->speed_max_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->speed_max_serializer_->post ();

      if (this->speed_max_serializer_->_error_type ())
        this->speed_max_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // acc
  //
  if (this->acc_present ())
  {
    short r = this->acc ();

    if (ctx.error_type ())
      return;

    if (this->acc_serializer_)
    {
      this->acc_serializer_->pre (r);

      if (this->acc_serializer_->_error_type ())
        this->acc_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("acc"))
        return;

      this->acc_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->acc_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->acc_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->acc_serializer_->post ();

      if (this->acc_serializer_->_error_type ())
        this->acc_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // dec
  //
  if (this->dec_present ())
  {
    short r = this->dec ();

    if (ctx.error_type ())
      return;

    if (this->dec_serializer_)
    {
      this->dec_serializer_->pre (r);

      if (this->dec_serializer_->_error_type ())
        this->dec_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("dec"))
        return;

      this->dec_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->dec_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->dec_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->dec_serializer_->post ();

      if (this->dec_serializer_->_error_type ())
        this->dec_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // acc_time
  //
  if (this->acc_time_present ())
  {
    signed char r = this->acc_time ();

    if (ctx.error_type ())
      return;

    if (this->acc_time_serializer_)
    {
      this->acc_time_serializer_->pre (r);

      if (this->acc_time_serializer_->_error_type ())
        this->acc_time_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("acc_time"))
        return;

      this->acc_time_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->acc_time_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->acc_time_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->acc_time_serializer_->post ();

      if (this->acc_time_serializer_->_error_type ())
        this->acc_time_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // dec_time
  //
  if (this->dec_time_present ())
  {
    signed char r = this->dec_time ();

    if (ctx.error_type ())
      return;

    if (this->dec_time_serializer_)
    {
      this->dec_time_serializer_->pre (r);

      if (this->dec_time_serializer_->_error_type ())
        this->dec_time_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("dec_time"))
        return;

      this->dec_time_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->dec_time_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->dec_time_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->dec_time_serializer_->post ();

      if (this->dec_time_serializer_->_error_type ())
        this->dec_time_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // micro_steps
  //
  if (this->micro_steps_present ())
  {
    signed char r = this->micro_steps ();

    if (ctx.error_type ())
      return;

    if (this->micro_steps_serializer_)
    {
      this->micro_steps_serializer_->pre (r);

      if (this->micro_steps_serializer_->_error_type ())
        this->micro_steps_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("micro_steps"))
        return;

      this->micro_steps_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->micro_steps_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->micro_steps_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->micro_steps_serializer_->post ();

      if (this->micro_steps_serializer_->_error_type ())
        this->micro_steps_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // ramp_type
  //
  if (this->ramp_type_present ())
  {
    signed char r = this->ramp_type ();

    if (ctx.error_type ())
      return;

    if (this->ramp_type_serializer_)
    {
      this->ramp_type_serializer_->pre (r);

      if (this->ramp_type_serializer_->_error_type ())
        this->ramp_type_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("ramp_type"))
        return;

      this->ramp_type_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->ramp_type_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->ramp_type_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->ramp_type_serializer_->post ();

      if (this->ramp_type_serializer_->_error_type ())
        this->ramp_type_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;
}

// Attribute validation and serialization for pid_controllerType_sskel.
//
void pid_controllerType_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  typedef ::xml_schema::string_sskel base;
  base::_serialize_attributes ();

  if (ctx.error_type ())
    return;

  // max_temperature
  //
  if (this->max_temperature_present ())
  {
    short r = this->max_temperature ();

    if (ctx.error_type ())
      return;

    if (this->max_temperature_serializer_)
    {
      this->max_temperature_serializer_->pre (r);

      if (this->max_temperature_serializer_->_error_type ())
        this->max_temperature_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("max_temperature"))
        return;

      this->max_temperature_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->max_temperature_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->max_temperature_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->max_temperature_serializer_->post ();

      if (this->max_temperature_serializer_->_error_type ())
        this->max_temperature_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // controller_gain
  //
  if (this->controller_gain_present ())
  {
    short r = this->controller_gain ();

    if (ctx.error_type ())
      return;

    if (this->controller_gain_serializer_)
    {
      this->controller_gain_serializer_->pre (r);

      if (this->controller_gain_serializer_->_error_type ())
        this->controller_gain_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("controller_gain"))
        return;

      this->controller_gain_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->controller_gain_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->controller_gain_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->controller_gain_serializer_->post ();

      if (this->controller_gain_serializer_->_error_type ())
        this->controller_gain_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // reset_time
  //
  if (this->reset_time_present ())
  {
    short r = this->reset_time ();

    if (ctx.error_type ())
      return;

    if (this->reset_time_serializer_)
    {
      this->reset_time_serializer_->pre (r);

      if (this->reset_time_serializer_->_error_type ())
        this->reset_time_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("reset_time"))
        return;

      this->reset_time_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->reset_time_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->reset_time_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->reset_time_serializer_->post ();

      if (this->reset_time_serializer_->_error_type ())
        this->reset_time_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // derivative_time
  //
  if (this->derivative_time_present ())
  {
    signed char r = this->derivative_time ();

    if (ctx.error_type ())
      return;

    if (this->derivative_time_serializer_)
    {
      this->derivative_time_serializer_->pre (r);

      if (this->derivative_time_serializer_->_error_type ())
        this->derivative_time_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("derivative_time"))
        return;

      this->derivative_time_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->derivative_time_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->derivative_time_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->derivative_time_serializer_->post ();

      if (this->derivative_time_serializer_->_error_type ())
        this->derivative_time_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // max_pressure
  //
  if (this->max_pressure_present ())
  {
    signed char r = this->max_pressure ();

    if (ctx.error_type ())
      return;

    if (this->max_pressure_serializer_)
    {
      this->max_pressure_serializer_->pre (r);

      if (this->max_pressure_serializer_->_error_type ())
        this->max_pressure_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("max_pressure"))
        return;

      this->max_pressure_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->max_pressure_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->max_pressure_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->max_pressure_serializer_->post ();

      if (this->max_pressure_serializer_->_error_type ())
        this->max_pressure_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // min_pressure
  //
  if (this->min_pressure_present ())
  {
    signed char r = this->min_pressure ();

    if (ctx.error_type ())
      return;

    if (this->min_pressure_serializer_)
    {
      this->min_pressure_serializer_->pre (r);

      if (this->min_pressure_serializer_->_error_type ())
        this->min_pressure_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("min_pressure"))
        return;

      this->min_pressure_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->min_pressure_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->min_pressure_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->min_pressure_serializer_->post ();

      if (this->min_pressure_serializer_->_error_type ())
        this->min_pressure_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;
}

// Attribute validation and serialization for pwm_controllerType_sskel.
//
void pwm_controllerType_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  typedef ::xml_schema::string_sskel base;
  base::_serialize_attributes ();

  if (ctx.error_type ())
    return;

  // max_actuating_value
  //
  if (this->max_actuating_value_present ())
  {
    short r = this->max_actuating_value ();

    if (ctx.error_type ())
      return;

    if (this->max_actuating_value_serializer_)
    {
      this->max_actuating_value_serializer_->pre (r);

      if (this->max_actuating_value_serializer_->_error_type ())
        this->max_actuating_value_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("max_actuating_value"))
        return;

      this->max_actuating_value_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->max_actuating_value_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->max_actuating_value_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->max_actuating_value_serializer_->post ();

      if (this->max_actuating_value_serializer_->_error_type ())
        this->max_actuating_value_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // min_actuating_value
  //
  if (this->min_actuating_value_present ())
  {
    short r = this->min_actuating_value ();

    if (ctx.error_type ())
      return;

    if (this->min_actuating_value_serializer_)
    {
      this->min_actuating_value_serializer_->pre (r);

      if (this->min_actuating_value_serializer_->_error_type ())
        this->min_actuating_value_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("min_actuating_value"))
        return;

      this->min_actuating_value_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->min_actuating_value_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->min_actuating_value_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->min_actuating_value_serializer_->post ();

      if (this->min_actuating_value_serializer_->_error_type ())
        this->min_actuating_value_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // max_pwm_duty
  //
  if (this->max_pwm_duty_present ())
  {
    signed char r = this->max_pwm_duty ();

    if (ctx.error_type ())
      return;

    if (this->max_pwm_duty_serializer_)
    {
      this->max_pwm_duty_serializer_->pre (r);

      if (this->max_pwm_duty_serializer_->_error_type ())
        this->max_pwm_duty_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("max_pwm_duty"))
        return;

      this->max_pwm_duty_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->max_pwm_duty_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->max_pwm_duty_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->max_pwm_duty_serializer_->post ();

      if (this->max_pwm_duty_serializer_->_error_type ())
        this->max_pwm_duty_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // min_pwm_duty
  //
  if (this->min_pwm_duty_present ())
  {
    signed char r = this->min_pwm_duty ();

    if (ctx.error_type ())
      return;

    if (this->min_pwm_duty_serializer_)
    {
      this->min_pwm_duty_serializer_->pre (r);

      if (this->min_pwm_duty_serializer_->_error_type ())
        this->min_pwm_duty_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("min_pwm_duty"))
        return;

      this->min_pwm_duty_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->min_pwm_duty_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->min_pwm_duty_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->min_pwm_duty_serializer_->post ();

      if (this->min_pwm_duty_serializer_->_error_type ())
        this->min_pwm_duty_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;
}

// Attribute validation and serialization for functionmoduleType_sskel.
//
void functionmoduleType_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // type
  //
  if (this->type_present ())
  {
    const ::std::string& r = this->type ();

    if (ctx.error_type ())
      return;

    if (this->type_serializer_)
    {
      this->type_serializer_->pre (r);

      if (this->type_serializer_->_error_type ())
        this->type_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("type"))
        return;

      this->type_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->type_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->type_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->type_serializer_->post ();

      if (this->type_serializer_->_error_type ())
        this->type_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // key
  //
  if (this->key_present ())
  {
    const ::std::string& r = this->key ();

    if (ctx.error_type ())
      return;

    if (this->key_serializer_)
    {
      this->key_serializer_->pre (r);

      if (this->key_serializer_->_error_type ())
        this->key_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("key"))
        return;

      this->key_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->key_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->key_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->key_serializer_->post ();

      if (this->key_serializer_->_error_type ())
        this->key_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // name
  //
  if (this->name_present ())
  {
    const ::std::string& r = this->name ();

    if (ctx.error_type ())
      return;

    if (this->name_serializer_)
    {
      this->name_serializer_->pre (r);

      if (this->name_serializer_->_error_type ())
        this->name_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("name"))
        return;

      this->name_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->name_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->name_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->name_serializer_->post ();

      if (this->name_serializer_->_error_type ())
        this->name_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // interface
  //
  if (this->interface_present ())
  {
    signed char r = this->interface ();

    if (ctx.error_type ())
      return;

    if (this->interface_serializer_)
    {
      this->interface_serializer_->pre (r);

      if (this->interface_serializer_->_error_type ())
        this->interface_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("interface"))
        return;

      this->interface_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->interface_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->interface_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->interface_serializer_->post ();

      if (this->interface_serializer_->_error_type ())
        this->interface_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // fct_instanceID
  //
  if (this->fct_instanceID_present ())
  {
    const ::std::string& r = this->fct_instanceID ();

    if (ctx.error_type ())
      return;

    if (this->fct_instanceID_serializer_)
    {
      this->fct_instanceID_serializer_->pre (r);

      if (this->fct_instanceID_serializer_->_error_type ())
        this->fct_instanceID_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("fct_instanceID"))
        return;

      this->fct_instanceID_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->fct_instanceID_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->fct_instanceID_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->fct_instanceID_serializer_->post ();

      if (this->fct_instanceID_serializer_->_error_type ())
        this->fct_instanceID_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;
}

// Attribute validation and serialization for slaveType_sskel.
//
void slaveType_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // type
  //
  if (this->type_present ())
  {
    const ::std::string& r = this->type ();

    if (ctx.error_type ())
      return;

    if (this->type_serializer_)
    {
      this->type_serializer_->pre (r);

      if (this->type_serializer_->_error_type ())
        this->type_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("type"))
        return;

      this->type_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->type_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->type_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->type_serializer_->post ();

      if (this->type_serializer_->_error_type ())
        this->type_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // key
  //
  if (this->key_present ())
  {
    const ::std::string& r = this->key ();

    if (ctx.error_type ())
      return;

    if (this->key_serializer_)
    {
      this->key_serializer_->pre (r);

      if (this->key_serializer_->_error_type ())
        this->key_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("key"))
        return;

      this->key_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->key_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->key_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->key_serializer_->post ();

      if (this->key_serializer_->_error_type ())
        this->key_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // name
  //
  if (this->name_present ())
  {
    const ::std::string& r = this->name ();

    if (ctx.error_type ())
      return;

    if (this->name_serializer_)
    {
      this->name_serializer_->pre (r);

      if (this->name_serializer_->_error_type ())
        this->name_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("name"))
        return;

      this->name_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->name_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->name_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->name_serializer_->post ();

      if (this->name_serializer_->_error_type ())
        this->name_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;

  // virtual_
  //
  if (this->virtual__present ())
  {
    signed char r = this->virtual_ ();

    if (ctx.error_type ())
      return;

    if (this->virtual__serializer_)
    {
      this->virtual__serializer_->pre (r);

      if (this->virtual__serializer_->_error_type ())
        this->virtual__serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("virtual"))
        return;

      this->virtual__serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->virtual__serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->virtual__serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->virtual__serializer_->post ();

      if (this->virtual__serializer_->_error_type ())
        this->virtual__serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;
}

// Attribute validation and serialization for hwconfigType_sskel.
//
void hwconfigType_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // version
  //
  if (this->version_present ())
  {
    float r = this->version ();

    if (ctx.error_type ())
      return;

    if (this->version_serializer_)
    {
      this->version_serializer_->pre (r);

      if (this->version_serializer_->_error_type ())
        this->version_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;

      if (!this->_start_attribute ("version"))
        return;

      this->version_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->version_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->version_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      if (!this->_end_attribute ())
        return;

      this->version_serializer_->post ();

      if (this->version_serializer_->_error_type ())
        this->version_serializer_->_copy_error (ctx);

      if (ctx.error_type ())
        return;
    }
  }

  if (ctx.error_type ())
    return;
}

// Begin epilogue.
//
//
// End epilogue.

