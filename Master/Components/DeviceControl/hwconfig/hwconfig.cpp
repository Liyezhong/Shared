// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "hwconfig.hpp"

// can_interfaceType
//

bool can_interfaceType::
interface_present () const
{
  return this->interface_present_;
}

void can_interfaceType::
interface_present (bool x)
{
  this->interface_present_ = x;
}

const ::std::string& can_interfaceType::
interface () const
{
  return this->interface_;
}

::std::string& can_interfaceType::
interface ()
{
  return this->interface_;
}

void can_interfaceType::
interface (const ::std::string& x)
{
  this->interface_ = x;
  this->interface_present_ = true;
}

// tcp_interfaceType
//

bool tcp_interfaceType::
usage_present () const
{
  return this->usage_present_;
}

void tcp_interfaceType::
usage_present (bool x)
{
  this->usage_present_ = x;
}

signed char tcp_interfaceType::
usage () const
{
  return this->usage_;
}

signed char& tcp_interfaceType::
usage ()
{
  return this->usage_;
}

void tcp_interfaceType::
usage (signed char x)
{
  this->usage_ = x;
  this->usage_present_ = true;
}

// serial_numberType
//

bool serial_numberType::
serialno_present () const
{
  return this->serialno_present_;
}

void serial_numberType::
serialno_present (bool x)
{
  this->serialno_present_ = x;
}

const ::std::string& serial_numberType::
serialno () const
{
  return this->serialno_;
}

::std::string& serial_numberType::
serialno ()
{
  return this->serialno_;
}

void serial_numberType::
serialno (const ::std::string& x)
{
  this->serialno_ = x;
  this->serialno_present_ = true;
}

// deviceType
//

bool deviceType::
name_present () const
{
  return this->name_present_;
}

void deviceType::
name_present (bool x)
{
  this->name_present_ = x;
}

const ::std::string& deviceType::
name () const
{
  return this->name_;
}

::std::string& deviceType::
name ()
{
  return this->name_;
}

void deviceType::
name (const ::std::string& x)
{
  this->name_ = x;
  this->name_present_ = true;
}

bool deviceType::
id_present () const
{
  return this->id_present_;
}

void deviceType::
id_present (bool x)
{
  this->id_present_ = x;
}

const ::std::string& deviceType::
id () const
{
  return this->id_;
}

::std::string& deviceType::
id ()
{
  return this->id_;
}

void deviceType::
id (const ::std::string& x)
{
  this->id_ = x;
  this->id_present_ = true;
}

bool deviceType::
type_present () const
{
  return this->type_present_;
}

void deviceType::
type_present (bool x)
{
  this->type_present_ = x;
}

const ::std::string& deviceType::
type () const
{
  return this->type_;
}

::std::string& deviceType::
type ()
{
  return this->type_;
}

void deviceType::
type (const ::std::string& x)
{
  this->type_ = x;
  this->type_present_ = true;
}

bool deviceType::
dev_instanceID_present () const
{
  return this->dev_instanceID_present_;
}

void deviceType::
dev_instanceID_present (bool x)
{
  this->dev_instanceID_present_ = x;
}

const ::std::string& deviceType::
dev_instanceID () const
{
  return this->dev_instanceID_;
}

::std::string& deviceType::
dev_instanceID ()
{
  return this->dev_instanceID_;
}

void deviceType::
dev_instanceID (const ::std::string& x)
{
  this->dev_instanceID_ = x;
  this->dev_instanceID_present_ = true;
}

bool deviceType::
optional_present () const
{
  return this->optional_present_;
}

void deviceType::
optional_present (bool x)
{
  this->optional_present_ = x;
}

signed char deviceType::
optional () const
{
  return this->optional_;
}

signed char& deviceType::
optional ()
{
  return this->optional_;
}

void deviceType::
optional (signed char x)
{
  this->optional_ = x;
  this->optional_present_ = true;
}

bool deviceType::
functionmodules_present () const
{
  return this->functionmodules_ != 0;
}

const ::functionmodulesType& deviceType::
functionmodules () const
{
  return *this->functionmodules_;
}

::functionmodulesType& deviceType::
functionmodules ()
{
  return *this->functionmodules_;
}

void deviceType::
functionmodules (::functionmodulesType* x)
{
  delete this->functionmodules_;
  this->functionmodules_ = x;
}

// devicesType
//

const devicesType::device_sequence& devicesType::
device () const
{
  return this->device_;
}

devicesType::device_sequence& devicesType::
device ()
{
  return this->device_;
}

// retortType
//

bool retortType::
name_present () const
{
  return this->name_present_;
}

void retortType::
name_present (bool x)
{
  this->name_present_ = x;
}

const ::std::string& retortType::
name () const
{
  return this->name_;
}

::std::string& retortType::
name ()
{
  return this->name_;
}

void retortType::
name (const ::std::string& x)
{
  this->name_ = x;
  this->name_present_ = true;
}

bool retortType::
index_present () const
{
  return this->index_present_;
}

void retortType::
index_present (bool x)
{
  this->index_present_ = x;
}

signed char retortType::
index () const
{
  return this->index_;
}

signed char& retortType::
index ()
{
  return this->index_;
}

void retortType::
index (signed char x)
{
  this->index_ = x;
  this->index_present_ = true;
}

const ::devicesType& retortType::
devices () const
{
  return *this->devices_;
}

::devicesType& retortType::
devices ()
{
  return *this->devices_;
}

void retortType::
devices (::devicesType* x)
{
  delete this->devices_;
  this->devices_ = x;
}

// retortsType
//

const retortsType::retort_sequence& retortsType::
retort () const
{
  return this->retort_;
}

retortsType::retort_sequence& retortsType::
retort ()
{
  return this->retort_;
}

// parameter_masterType
//

bool parameter_masterType::
folded_present () const
{
  return this->folded_present_;
}

void parameter_masterType::
folded_present (bool x)
{
  this->folded_present_ = x;
}

const ::std::string& parameter_masterType::
folded () const
{
  return this->folded_;
}

::std::string& parameter_masterType::
folded ()
{
  return this->folded_;
}

void parameter_masterType::
folded (const ::std::string& x)
{
  this->folded_ = x;
  this->folded_present_ = true;
}

const ::can_interfaceType& parameter_masterType::
can_interface () const
{
  return this->can_interface_;
}

::can_interfaceType& parameter_masterType::
can_interface ()
{
  return this->can_interface_;
}

void parameter_masterType::
can_interface (const ::can_interfaceType& x)
{
  this->can_interface_ = x;
}

const ::tcp_interfaceType& parameter_masterType::
tcp_interface () const
{
  return this->tcp_interface_;
}

::tcp_interfaceType& parameter_masterType::
tcp_interface ()
{
  return this->tcp_interface_;
}

void parameter_masterType::
tcp_interface (const ::tcp_interfaceType& x)
{
  this->tcp_interface_ = x;
}

signed char parameter_masterType::
nodetype () const
{
  return this->nodetype_;
}

signed char& parameter_masterType::
nodetype ()
{
  return this->nodetype_;
}

void parameter_masterType::
nodetype (signed char x)
{
  this->nodetype_ = x;
}

signed char parameter_masterType::
nodeindex () const
{
  return this->nodeindex_;
}

signed char& parameter_masterType::
nodeindex ()
{
  return this->nodeindex_;
}

void parameter_masterType::
nodeindex (signed char x)
{
  this->nodeindex_ = x;
}

const ::serial_numberType& parameter_masterType::
serial_number () const
{
  return this->serial_number_;
}

::serial_numberType& parameter_masterType::
serial_number ()
{
  return this->serial_number_;
}

void parameter_masterType::
serial_number (const ::serial_numberType& x)
{
  this->serial_number_ = x;
}

const ::retortsType& parameter_masterType::
retorts () const
{
  return *this->retorts_;
}

::retortsType& parameter_masterType::
retorts ()
{
  return *this->retorts_;
}

void parameter_masterType::
retorts (::retortsType* x)
{
  delete this->retorts_;
  this->retorts_ = x;
}

// rotationType
//

bool rotationType::
type_present () const
{
  return this->type_present_;
}

void rotationType::
type_present (bool x)
{
  this->type_present_ = x;
}

const ::std::string& rotationType::
type () const
{
  return this->type_;
}

::std::string& rotationType::
type ()
{
  return this->type_;
}

void rotationType::
type (const ::std::string& x)
{
  this->type_ = x;
  this->type_present_ = true;
}

bool rotationType::
direction_present () const
{
  return this->direction_present_;
}

void rotationType::
direction_present (bool x)
{
  this->direction_present_ = x;
}

const ::std::string& rotationType::
direction () const
{
  return this->direction_;
}

::std::string& rotationType::
direction ()
{
  return this->direction_;
}

void rotationType::
direction (const ::std::string& x)
{
  this->direction_ = x;
  this->direction_present_ = true;
}

bool rotationType::
steps_revolution_present () const
{
  return this->steps_revolution_present_;
}

void rotationType::
steps_revolution_present (bool x)
{
  this->steps_revolution_present_ = x;
}

short rotationType::
steps_revolution () const
{
  return this->steps_revolution_;
}

short& rotationType::
steps_revolution ()
{
  return this->steps_revolution_;
}

void rotationType::
steps_revolution (short x)
{
  this->steps_revolution_ = x;
  this->steps_revolution_present_ = true;
}

bool rotationType::
position_min_present () const
{
  return this->position_min_present_;
}

void rotationType::
position_min_present (bool x)
{
  this->position_min_present_ = x;
}

short rotationType::
position_min () const
{
  return this->position_min_;
}

short& rotationType::
position_min ()
{
  return this->position_min_;
}

void rotationType::
position_min (short x)
{
  this->position_min_ = x;
  this->position_min_present_ = true;
}

bool rotationType::
position_max_present () const
{
  return this->position_max_present_;
}

void rotationType::
position_max_present (bool x)
{
  this->position_max_present_ = x;
}

short rotationType::
position_max () const
{
  return this->position_max_;
}

short& rotationType::
position_max ()
{
  return this->position_max_;
}

void rotationType::
position_max (short x)
{
  this->position_max_ = x;
  this->position_max_present_ = true;
}

bool rotationType::
speed_min_present () const
{
  return this->speed_min_present_;
}

void rotationType::
speed_min_present (bool x)
{
  this->speed_min_present_ = x;
}

signed char rotationType::
speed_min () const
{
  return this->speed_min_;
}

signed char& rotationType::
speed_min ()
{
  return this->speed_min_;
}

void rotationType::
speed_min (signed char x)
{
  this->speed_min_ = x;
  this->speed_min_present_ = true;
}

bool rotationType::
speed_max_present () const
{
  return this->speed_max_present_;
}

void rotationType::
speed_max_present (bool x)
{
  this->speed_max_present_ = x;
}

short rotationType::
speed_max () const
{
  return this->speed_max_;
}

short& rotationType::
speed_max ()
{
  return this->speed_max_;
}

void rotationType::
speed_max (short x)
{
  this->speed_max_ = x;
  this->speed_max_present_ = true;
}

bool rotationType::
run_cs_present () const
{
  return this->run_cs_present_;
}

void rotationType::
run_cs_present (bool x)
{
  this->run_cs_present_ = x;
}

signed char rotationType::
run_cs () const
{
  return this->run_cs_;
}

signed char& rotationType::
run_cs ()
{
  return this->run_cs_;
}

void rotationType::
run_cs (signed char x)
{
  this->run_cs_ = x;
  this->run_cs_present_ = true;
}

bool rotationType::
stop_cs_present () const
{
  return this->stop_cs_present_;
}

void rotationType::
stop_cs_present (bool x)
{
  this->stop_cs_present_ = x;
}

signed char rotationType::
stop_cs () const
{
  return this->stop_cs_;
}

signed char& rotationType::
stop_cs ()
{
  return this->stop_cs_;
}

void rotationType::
stop_cs (signed char x)
{
  this->stop_cs_ = x;
  this->stop_cs_present_ = true;
}

bool rotationType::
stop_cs_delay_present () const
{
  return this->stop_cs_delay_present_;
}

void rotationType::
stop_cs_delay_present (bool x)
{
  this->stop_cs_delay_present_ = x;
}

short rotationType::
stop_cs_delay () const
{
  return this->stop_cs_delay_;
}

short& rotationType::
stop_cs_delay ()
{
  return this->stop_cs_delay_;
}

void rotationType::
stop_cs_delay (short x)
{
  this->stop_cs_delay_ = x;
  this->stop_cs_delay_present_ = true;
}

// reference_runType
//

bool reference_runType::
ref_position_present () const
{
  return this->ref_position_present_;
}

void reference_runType::
ref_position_present (bool x)
{
  this->ref_position_present_ = x;
}

signed char reference_runType::
ref_position () const
{
  return this->ref_position_;
}

signed char& reference_runType::
ref_position ()
{
  return this->ref_position_;
}

void reference_runType::
ref_position (signed char x)
{
  this->ref_position_ = x;
  this->ref_position_present_ = true;
}

bool reference_runType::
max_distance_present () const
{
  return this->max_distance_present_;
}

void reference_runType::
max_distance_present (bool x)
{
  this->max_distance_present_ = x;
}

short reference_runType::
max_distance () const
{
  return this->max_distance_;
}

short& reference_runType::
max_distance ()
{
  return this->max_distance_;
}

void reference_runType::
max_distance (short x)
{
  this->max_distance_ = x;
  this->max_distance_present_ = true;
}

bool reference_runType::
timeout_present () const
{
  return this->timeout_present_;
}

void reference_runType::
timeout_present (bool x)
{
  this->timeout_present_ = x;
}

int reference_runType::
timeout () const
{
  return this->timeout_;
}

int& reference_runType::
timeout ()
{
  return this->timeout_;
}

void reference_runType::
timeout (int x)
{
  this->timeout_ = x;
  this->timeout_present_ = true;
}

bool reference_runType::
reverse_distance_present () const
{
  return this->reverse_distance_present_;
}

void reference_runType::
reverse_distance_present (bool x)
{
  this->reverse_distance_present_ = x;
}

signed char reference_runType::
reverse_distance () const
{
  return this->reverse_distance_;
}

signed char& reference_runType::
reverse_distance ()
{
  return this->reverse_distance_;
}

void reference_runType::
reverse_distance (signed char x)
{
  this->reverse_distance_ = x;
  this->reverse_distance_present_ = true;
}

bool reference_runType::
slow_speed_present () const
{
  return this->slow_speed_present_;
}

void reference_runType::
slow_speed_present (bool x)
{
  this->slow_speed_present_ = x;
}

signed char reference_runType::
slow_speed () const
{
  return this->slow_speed_;
}

signed char& reference_runType::
slow_speed ()
{
  return this->slow_speed_;
}

void reference_runType::
slow_speed (signed char x)
{
  this->slow_speed_ = x;
  this->slow_speed_present_ = true;
}

bool reference_runType::
high_speed_present () const
{
  return this->high_speed_present_;
}

void reference_runType::
high_speed_present (bool x)
{
  this->high_speed_present_ = x;
}

short reference_runType::
high_speed () const
{
  return this->high_speed_;
}

short& reference_runType::
high_speed ()
{
  return this->high_speed_;
}

void reference_runType::
high_speed (short x)
{
  this->high_speed_ = x;
  this->high_speed_present_ = true;
}

bool reference_runType::
refpos_offset_present () const
{
  return this->refpos_offset_present_;
}

void reference_runType::
refpos_offset_present (bool x)
{
  this->refpos_offset_present_ = x;
}

signed char reference_runType::
refpos_offset () const
{
  return this->refpos_offset_;
}

signed char& reference_runType::
refpos_offset ()
{
  return this->refpos_offset_;
}

void reference_runType::
refpos_offset (signed char x)
{
  this->refpos_offset_ = x;
  this->refpos_offset_present_ = true;
}

// encoderType
//

bool encoderType::
type_present () const
{
  return this->type_present_;
}

void encoderType::
type_present (bool x)
{
  this->type_present_ = x;
}

signed char encoderType::
type () const
{
  return this->type_;
}

signed char& encoderType::
type ()
{
  return this->type_;
}

void encoderType::
type (signed char x)
{
  this->type_ = x;
  this->type_present_ = true;
}

bool encoderType::
resolution_present () const
{
  return this->resolution_present_;
}

void encoderType::
resolution_present (bool x)
{
  this->resolution_present_ = x;
}

short encoderType::
resolution () const
{
  return this->resolution_;
}

short& encoderType::
resolution ()
{
  return this->resolution_;
}

void encoderType::
resolution (short x)
{
  this->resolution_ = x;
  this->resolution_present_ = true;
}

bool encoderType::
rotation_present () const
{
  return this->rotation_present_;
}

void encoderType::
rotation_present (bool x)
{
  this->rotation_present_ = x;
}

const ::std::string& encoderType::
rotation () const
{
  return this->rotation_;
}

::std::string& encoderType::
rotation ()
{
  return this->rotation_;
}

void encoderType::
rotation (const ::std::string& x)
{
  this->rotation_ = x;
  this->rotation_present_ = true;
}

// configurationType
//

bool configurationType::
polarity_present () const
{
  return this->polarity_present_;
}

void configurationType::
polarity_present (bool x)
{
  this->polarity_present_ = x;
}

signed char configurationType::
polarity () const
{
  return this->polarity_;
}

signed char& configurationType::
polarity ()
{
  return this->polarity_;
}

void configurationType::
polarity (signed char x)
{
  this->polarity_ = x;
  this->polarity_present_ = true;
}

bool configurationType::
sample_rate_present () const
{
  return this->sample_rate_present_;
}

void configurationType::
sample_rate_present (bool x)
{
  this->sample_rate_present_ = x;
}

signed char configurationType::
sample_rate () const
{
  return this->sample_rate_;
}

signed char& configurationType::
sample_rate ()
{
  return this->sample_rate_;
}

void configurationType::
sample_rate (signed char x)
{
  this->sample_rate_ = x;
  this->sample_rate_present_ = true;
}

bool configurationType::
debounce_present () const
{
  return this->debounce_present_;
}

void configurationType::
debounce_present (bool x)
{
  this->debounce_present_ = x;
}

signed char configurationType::
debounce () const
{
  return this->debounce_;
}

signed char& configurationType::
debounce ()
{
  return this->debounce_;
}

void configurationType::
debounce (signed char x)
{
  this->debounce_ = x;
  this->debounce_present_ = true;
}

bool configurationType::
temp_tolerance_present () const
{
  return this->temp_tolerance_present_;
}

void configurationType::
temp_tolerance_present (bool x)
{
  this->temp_tolerance_present_ = x;
}

signed char configurationType::
temp_tolerance () const
{
  return this->temp_tolerance_;
}

signed char& configurationType::
temp_tolerance ()
{
  return this->temp_tolerance_;
}

void configurationType::
temp_tolerance (signed char x)
{
  this->temp_tolerance_ = x;
  this->temp_tolerance_present_ = true;
}

bool configurationType::
sampling_period_present () const
{
  return this->sampling_period_present_;
}

void configurationType::
sampling_period_present (bool x)
{
  this->sampling_period_present_ = x;
}

short configurationType::
sampling_period () const
{
  return this->sampling_period_;
}

short& configurationType::
sampling_period ()
{
  return this->sampling_period_;
}

void configurationType::
sampling_period (short x)
{
  this->sampling_period_ = x;
  this->sampling_period_present_ = true;
}

bool configurationType::
fan_speed_present () const
{
  return this->fan_speed_present_;
}

void configurationType::
fan_speed_present (bool x)
{
  this->fan_speed_present_ = x;
}

short configurationType::
fan_speed () const
{
  return this->fan_speed_;
}

short& configurationType::
fan_speed ()
{
  return this->fan_speed_;
}

void configurationType::
fan_speed (short x)
{
  this->fan_speed_ = x;
  this->fan_speed_present_ = true;
}

bool configurationType::
fan_threshold_present () const
{
  return this->fan_threshold_present_;
}

void configurationType::
fan_threshold_present (bool x)
{
  this->fan_threshold_present_ = x;
}

short configurationType::
fan_threshold () const
{
  return this->fan_threshold_;
}

short& configurationType::
fan_threshold ()
{
  return this->fan_threshold_;
}

void configurationType::
fan_threshold (short x)
{
  this->fan_threshold_ = x;
  this->fan_threshold_present_ = true;
}

bool configurationType::
current_gain_present () const
{
  return this->current_gain_present_;
}

void configurationType::
current_gain_present (bool x)
{
  this->current_gain_present_ = x;
}

short configurationType::
current_gain () const
{
  return this->current_gain_;
}

short& configurationType::
current_gain ()
{
  return this->current_gain_;
}

void configurationType::
current_gain (short x)
{
  this->current_gain_ = x;
  this->current_gain_present_ = true;
}

bool configurationType::
heater_current_present () const
{
  return this->heater_current_present_;
}

void configurationType::
heater_current_present (bool x)
{
  this->heater_current_present_ = x;
}

short configurationType::
heater_current () const
{
  return this->heater_current_;
}

short& configurationType::
heater_current ()
{
  return this->heater_current_;
}

void configurationType::
heater_current (short x)
{
  this->heater_current_ = x;
  this->heater_current_present_ = true;
}

bool configurationType::
heater_threshold_present () const
{
  return this->heater_threshold_present_;
}

void configurationType::
heater_threshold_present (bool x)
{
  this->heater_threshold_present_ = x;
}

short configurationType::
heater_threshold () const
{
  return this->heater_threshold_;
}

short& configurationType::
heater_threshold ()
{
  return this->heater_threshold_;
}

void configurationType::
heater_threshold (short x)
{
  this->heater_threshold_ = x;
  this->heater_threshold_present_ = true;
}

bool configurationType::
current_deviation_present () const
{
  return this->current_deviation_present_;
}

void configurationType::
current_deviation_present (bool x)
{
  this->current_deviation_present_ = x;
}

short configurationType::
current_deviation () const
{
  return this->current_deviation_;
}

short& configurationType::
current_deviation ()
{
  return this->current_deviation_;
}

void configurationType::
current_deviation (short x)
{
  this->current_deviation_ = x;
  this->current_deviation_present_ = true;
}

bool configurationType::
current_min_230_serial_present () const
{
  return this->current_min_230_serial_present_;
}

void configurationType::
current_min_230_serial_present (bool x)
{
  this->current_min_230_serial_present_ = x;
}

short configurationType::
current_min_230_serial () const
{
  return this->current_min_230_serial_;
}

short& configurationType::
current_min_230_serial ()
{
  return this->current_min_230_serial_;
}

void configurationType::
current_min_230_serial (short x)
{
  this->current_min_230_serial_ = x;
  this->current_min_230_serial_present_ = true;
}

bool configurationType::
current_max_230_serial_present () const
{
  return this->current_max_230_serial_present_;
}

void configurationType::
current_max_230_serial_present (bool x)
{
  this->current_max_230_serial_present_ = x;
}

short configurationType::
current_max_230_serial () const
{
  return this->current_max_230_serial_;
}

short& configurationType::
current_max_230_serial ()
{
  return this->current_max_230_serial_;
}

void configurationType::
current_max_230_serial (short x)
{
  this->current_max_230_serial_ = x;
  this->current_max_230_serial_present_ = true;
}

bool configurationType::
current_min_100_serial_present () const
{
  return this->current_min_100_serial_present_;
}

void configurationType::
current_min_100_serial_present (bool x)
{
  this->current_min_100_serial_present_ = x;
}

short configurationType::
current_min_100_serial () const
{
  return this->current_min_100_serial_;
}

short& configurationType::
current_min_100_serial ()
{
  return this->current_min_100_serial_;
}

void configurationType::
current_min_100_serial (short x)
{
  this->current_min_100_serial_ = x;
  this->current_min_100_serial_present_ = true;
}

bool configurationType::
current_max_100_serial_present () const
{
  return this->current_max_100_serial_present_;
}

void configurationType::
current_max_100_serial_present (bool x)
{
  this->current_max_100_serial_present_ = x;
}

short configurationType::
current_max_100_serial () const
{
  return this->current_max_100_serial_;
}

short& configurationType::
current_max_100_serial ()
{
  return this->current_max_100_serial_;
}

void configurationType::
current_max_100_serial (short x)
{
  this->current_max_100_serial_ = x;
  this->current_max_100_serial_present_ = true;
}

bool configurationType::
current_min_100_parallel_present () const
{
  return this->current_min_100_parallel_present_;
}

void configurationType::
current_min_100_parallel_present (bool x)
{
  this->current_min_100_parallel_present_ = x;
}

short configurationType::
current_min_100_parallel () const
{
  return this->current_min_100_parallel_;
}

short& configurationType::
current_min_100_parallel ()
{
  return this->current_min_100_parallel_;
}

void configurationType::
current_min_100_parallel (short x)
{
  this->current_min_100_parallel_ = x;
  this->current_min_100_parallel_present_ = true;
}

bool configurationType::
current_max_100_parallel_present () const
{
  return this->current_max_100_parallel_present_;
}

void configurationType::
current_max_100_parallel_present (bool x)
{
  this->current_max_100_parallel_present_ = x;
}

short configurationType::
current_max_100_parallel () const
{
  return this->current_max_100_parallel_;
}

short& configurationType::
current_max_100_parallel ()
{
  return this->current_max_100_parallel_;
}

void configurationType::
current_max_100_parallel (short x)
{
  this->current_max_100_parallel_ = x;
  this->current_max_100_parallel_present_ = true;
}

bool configurationType::
pressure_tolerance_present () const
{
  return this->pressure_tolerance_present_;
}

void configurationType::
pressure_tolerance_present (bool x)
{
  this->pressure_tolerance_present_ = x;
}

signed char configurationType::
pressure_tolerance () const
{
  return this->pressure_tolerance_;
}

signed char& configurationType::
pressure_tolerance ()
{
  return this->pressure_tolerance_;
}

void configurationType::
pressure_tolerance (signed char x)
{
  this->pressure_tolerance_ = x;
  this->pressure_tolerance_present_ = true;
}

bool configurationType::
fan_current_gain_present () const
{
  return this->fan_current_gain_present_;
}

void configurationType::
fan_current_gain_present (bool x)
{
  this->fan_current_gain_present_ = x;
}

signed char configurationType::
fan_current_gain () const
{
  return this->fan_current_gain_;
}

signed char& configurationType::
fan_current_gain ()
{
  return this->fan_current_gain_;
}

void configurationType::
fan_current_gain (signed char x)
{
  this->fan_current_gain_ = x;
  this->fan_current_gain_present_ = true;
}

bool configurationType::
fan_current_present () const
{
  return this->fan_current_present_;
}

void configurationType::
fan_current_present (bool x)
{
  this->fan_current_present_ = x;
}

short configurationType::
fan_current () const
{
  return this->fan_current_;
}

short& configurationType::
fan_current ()
{
  return this->fan_current_;
}

void configurationType::
fan_current (short x)
{
  this->fan_current_ = x;
  this->fan_current_present_ = true;
}

bool configurationType::
pump_current_present () const
{
  return this->pump_current_present_;
}

void configurationType::
pump_current_present (bool x)
{
  this->pump_current_present_ = x;
}

short configurationType::
pump_current () const
{
  return this->pump_current_;
}

short& configurationType::
pump_current ()
{
  return this->pump_current_;
}

void configurationType::
pump_current (short x)
{
  this->pump_current_ = x;
  this->pump_current_present_ = true;
}

bool configurationType::
pump_threshold_present () const
{
  return this->pump_threshold_present_;
}

void configurationType::
pump_threshold_present (bool x)
{
  this->pump_threshold_present_ = x;
}

short configurationType::
pump_threshold () const
{
  return this->pump_threshold_;
}

short& configurationType::
pump_threshold ()
{
  return this->pump_threshold_;
}

void configurationType::
pump_threshold (short x)
{
  this->pump_threshold_ = x;
  this->pump_threshold_present_ = true;
}

bool configurationType::
enabled_present () const
{
  return this->enabled_present_;
}

void configurationType::
enabled_present (bool x)
{
  this->enabled_present_ = x;
}

signed char configurationType::
enabled () const
{
  return this->enabled_;
}

signed char& configurationType::
enabled ()
{
  return this->enabled_;
}

void configurationType::
enabled (signed char x)
{
  this->enabled_ = x;
  this->enabled_present_ = true;
}

bool configurationType::
inactiv_shutdown_present () const
{
  return this->inactiv_shutdown_present_;
}

void configurationType::
inactiv_shutdown_present (bool x)
{
  this->inactiv_shutdown_present_ = x;
}

signed char configurationType::
inactiv_shutdown () const
{
  return this->inactiv_shutdown_;
}

signed char& configurationType::
inactiv_shutdown ()
{
  return this->inactiv_shutdown_;
}

void configurationType::
inactiv_shutdown (signed char x)
{
  this->inactiv_shutdown_ = x;
  this->inactiv_shutdown_present_ = true;
}

bool configurationType::
inactiv_emcy_present () const
{
  return this->inactiv_emcy_present_;
}

void configurationType::
inactiv_emcy_present (bool x)
{
  this->inactiv_emcy_present_ = x;
}

signed char configurationType::
inactiv_emcy () const
{
  return this->inactiv_emcy_;
}

signed char& configurationType::
inactiv_emcy ()
{
  return this->inactiv_emcy_;
}

void configurationType::
inactiv_emcy (signed char x)
{
  this->inactiv_emcy_ = x;
  this->inactiv_emcy_present_ = true;
}

bool configurationType::
outval_inactiv_present () const
{
  return this->outval_inactiv_present_;
}

void configurationType::
outval_inactiv_present (bool x)
{
  this->outval_inactiv_present_ = x;
}

signed char configurationType::
outval_inactiv () const
{
  return this->outval_inactiv_;
}

signed char& configurationType::
outval_inactiv ()
{
  return this->outval_inactiv_;
}

void configurationType::
outval_inactiv (signed char x)
{
  this->outval_inactiv_ = x;
  this->outval_inactiv_present_ = true;
}

bool configurationType::
livetime_limit_present () const
{
  return this->livetime_limit_present_;
}

void configurationType::
livetime_limit_present (bool x)
{
  this->livetime_limit_present_ = x;
}

signed char configurationType::
livetime_limit () const
{
  return this->livetime_limit_;
}

signed char& configurationType::
livetime_limit ()
{
  return this->livetime_limit_;
}

void configurationType::
livetime_limit (signed char x)
{
  this->livetime_limit_ = x;
  this->livetime_limit_present_ = true;
}

bool configurationType::
timestamp_present () const
{
  return this->timestamp_present_;
}

void configurationType::
timestamp_present (bool x)
{
  this->timestamp_present_ = x;
}

signed char configurationType::
timestamp () const
{
  return this->timestamp_;
}

signed char& configurationType::
timestamp ()
{
  return this->timestamp_;
}

void configurationType::
timestamp (signed char x)
{
  this->timestamp_ = x;
  this->timestamp_present_ = true;
}

bool configurationType::
threshold_present () const
{
  return this->threshold_present_;
}

void configurationType::
threshold_present (bool x)
{
  this->threshold_present_ = x;
}

signed char configurationType::
threshold () const
{
  return this->threshold_;
}

signed char& configurationType::
threshold ()
{
  return this->threshold_;
}

void configurationType::
threshold (signed char x)
{
  this->threshold_ = x;
  this->threshold_present_ = true;
}

bool configurationType::
interval_present () const
{
  return this->interval_present_;
}

void configurationType::
interval_present (bool x)
{
  this->interval_present_ = x;
}

signed char configurationType::
interval () const
{
  return this->interval_;
}

signed char& configurationType::
interval ()
{
  return this->interval_;
}

void configurationType::
interval (signed char x)
{
  this->interval_ = x;
  this->interval_present_ = true;
}

// limitswitchType
//

bool limitswitchType::
index_present () const
{
  return this->index_present_;
}

void limitswitchType::
index_present (bool x)
{
  this->index_present_ = x;
}

signed char limitswitchType::
index () const
{
  return this->index_;
}

signed char& limitswitchType::
index ()
{
  return this->index_;
}

void limitswitchType::
index (signed char x)
{
  this->index_ = x;
  this->index_present_ = true;
}

const ::configurationType& limitswitchType::
configuration () const
{
  return this->configuration_;
}

::configurationType& limitswitchType::
configuration ()
{
  return this->configuration_;
}

void limitswitchType::
configuration (const ::configurationType& x)
{
  this->configuration_ = x;
}

// position_codeType
//

bool position_codeType::
value_present () const
{
  return this->value_present_;
}

void position_codeType::
value_present (bool x)
{
  this->value_present_ = x;
}

signed char position_codeType::
value () const
{
  return this->value_;
}

signed char& position_codeType::
value ()
{
  return this->value_;
}

void position_codeType::
value (signed char x)
{
  this->value_ = x;
  this->value_present_ = true;
}

bool position_codeType::
stop_present () const
{
  return this->stop_present_;
}

void position_codeType::
stop_present (bool x)
{
  this->stop_present_ = x;
}

signed char position_codeType::
stop () const
{
  return this->stop_;
}

signed char& position_codeType::
stop ()
{
  return this->stop_;
}

void position_codeType::
stop (signed char x)
{
  this->stop_ = x;
  this->stop_present_ = true;
}

bool position_codeType::
stop_dir_present () const
{
  return this->stop_dir_present_;
}

void position_codeType::
stop_dir_present (bool x)
{
  this->stop_dir_present_ = x;
}

const ::std::string& position_codeType::
stop_dir () const
{
  return this->stop_dir_;
}

::std::string& position_codeType::
stop_dir ()
{
  return this->stop_dir_;
}

void position_codeType::
stop_dir (const ::std::string& x)
{
  this->stop_dir_ = x;
  this->stop_dir_present_ = true;
}

bool position_codeType::
position_present () const
{
  return this->position_present_;
}

void position_codeType::
position_present (bool x)
{
  this->position_present_ = x;
}

signed char position_codeType::
position () const
{
  return this->position_;
}

signed char& position_codeType::
position ()
{
  return this->position_;
}

void position_codeType::
position (signed char x)
{
  this->position_ = x;
  this->position_present_ = true;
}

bool position_codeType::
width_present () const
{
  return this->width_present_;
}

void position_codeType::
width_present (bool x)
{
  this->width_present_ = x;
}

signed char position_codeType::
width () const
{
  return this->width_;
}

signed char& position_codeType::
width ()
{
  return this->width_;
}

void position_codeType::
width (signed char x)
{
  this->width_ = x;
  this->width_present_ = true;
}

bool position_codeType::
deviation_present () const
{
  return this->deviation_present_;
}

void position_codeType::
deviation_present (bool x)
{
  this->deviation_present_ = x;
}

signed char position_codeType::
deviation () const
{
  return this->deviation_;
}

signed char& position_codeType::
deviation ()
{
  return this->deviation_;
}

void position_codeType::
deviation (signed char x)
{
  this->deviation_ = x;
  this->deviation_present_ = true;
}

bool position_codeType::
dir_check_present () const
{
  return this->dir_check_present_;
}

void position_codeType::
dir_check_present (bool x)
{
  this->dir_check_present_ = x;
}

signed char position_codeType::
dir_check () const
{
  return this->dir_check_;
}

signed char& position_codeType::
dir_check ()
{
  return this->dir_check_;
}

void position_codeType::
dir_check (signed char x)
{
  this->dir_check_ = x;
  this->dir_check_present_ = true;
}

bool position_codeType::
hit_skip_present () const
{
  return this->hit_skip_present_;
}

void position_codeType::
hit_skip_present (bool x)
{
  this->hit_skip_present_ = x;
}

signed char position_codeType::
hit_skip () const
{
  return this->hit_skip_;
}

signed char& position_codeType::
hit_skip ()
{
  return this->hit_skip_;
}

void position_codeType::
hit_skip (signed char x)
{
  this->hit_skip_ = x;
  this->hit_skip_present_ = true;
}

// limitswitchesType
//

const limitswitchesType::limitswitch_sequence& limitswitchesType::
limitswitch () const
{
  return this->limitswitch_;
}

limitswitchesType::limitswitch_sequence& limitswitchesType::
limitswitch ()
{
  return this->limitswitch_;
}

const limitswitchesType::position_code_sequence& limitswitchesType::
position_code () const
{
  return this->position_code_;
}

limitswitchesType::position_code_sequence& limitswitchesType::
position_code ()
{
  return this->position_code_;
}

// position_coverageType
//

const ::encoderType& position_coverageType::
encoder () const
{
  return this->encoder_;
}

::encoderType& position_coverageType::
encoder ()
{
  return this->encoder_;
}

void position_coverageType::
encoder (const ::encoderType& x)
{
  this->encoder_ = x;
}

const ::limitswitchesType& position_coverageType::
limitswitches () const
{
  return *this->limitswitches_;
}

::limitswitchesType& position_coverageType::
limitswitches ()
{
  return *this->limitswitches_;
}

void position_coverageType::
limitswitches (::limitswitchesType* x)
{
  delete this->limitswitches_;
  this->limitswitches_ = x;
}

// supervisionType
//

bool supervisionType::
steploss_warn_limit_present () const
{
  return this->steploss_warn_limit_present_;
}

void supervisionType::
steploss_warn_limit_present (bool x)
{
  this->steploss_warn_limit_present_ = x;
}

signed char supervisionType::
steploss_warn_limit () const
{
  return this->steploss_warn_limit_;
}

signed char& supervisionType::
steploss_warn_limit ()
{
  return this->steploss_warn_limit_;
}

void supervisionType::
steploss_warn_limit (signed char x)
{
  this->steploss_warn_limit_ = x;
  this->steploss_warn_limit_present_ = true;
}

bool supervisionType::
steploss_error_limit_present () const
{
  return this->steploss_error_limit_present_;
}

void supervisionType::
steploss_error_limit_present (bool x)
{
  this->steploss_error_limit_present_ = x;
}

signed char supervisionType::
steploss_error_limit () const
{
  return this->steploss_error_limit_;
}

signed char& supervisionType::
steploss_error_limit ()
{
  return this->steploss_error_limit_;
}

void supervisionType::
steploss_error_limit (signed char x)
{
  this->steploss_error_limit_ = x;
  this->steploss_error_limit_present_ = true;
}

bool supervisionType::
current_limit_present () const
{
  return this->current_limit_present_;
}

void supervisionType::
current_limit_present (bool x)
{
  this->current_limit_present_ = x;
}

short supervisionType::
current_limit () const
{
  return this->current_limit_;
}

short& supervisionType::
current_limit ()
{
  return this->current_limit_;
}

void supervisionType::
current_limit (short x)
{
  this->current_limit_ = x;
  this->current_limit_present_ = true;
}

// driverType
//

bool driverType::
type_present () const
{
  return this->type_present_;
}

void driverType::
type_present (bool x)
{
  this->type_present_ = x;
}

const ::std::string& driverType::
type () const
{
  return this->type_;
}

::std::string& driverType::
type ()
{
  return this->type_;
}

void driverType::
type (const ::std::string& x)
{
  this->type_ = x;
  this->type_present_ = true;
}

bool driverType::
reg_chopConf_present () const
{
  return this->reg_chopConf_present_;
}

void driverType::
reg_chopConf_present (bool x)
{
  this->reg_chopConf_present_ = x;
}

const ::std::string& driverType::
reg_chopConf () const
{
  return this->reg_chopConf_;
}

::std::string& driverType::
reg_chopConf ()
{
  return this->reg_chopConf_;
}

void driverType::
reg_chopConf (const ::std::string& x)
{
  this->reg_chopConf_ = x;
  this->reg_chopConf_present_ = true;
}

bool driverType::
reg_smartEn_present () const
{
  return this->reg_smartEn_present_;
}

void driverType::
reg_smartEn_present (bool x)
{
  this->reg_smartEn_present_ = x;
}

const ::std::string& driverType::
reg_smartEn () const
{
  return this->reg_smartEn_;
}

::std::string& driverType::
reg_smartEn ()
{
  return this->reg_smartEn_;
}

void driverType::
reg_smartEn (const ::std::string& x)
{
  this->reg_smartEn_ = x;
  this->reg_smartEn_present_ = true;
}

bool driverType::
reg_sgcsConf_present () const
{
  return this->reg_sgcsConf_present_;
}

void driverType::
reg_sgcsConf_present (bool x)
{
  this->reg_sgcsConf_present_ = x;
}

const ::std::string& driverType::
reg_sgcsConf () const
{
  return this->reg_sgcsConf_;
}

::std::string& driverType::
reg_sgcsConf ()
{
  return this->reg_sgcsConf_;
}

void driverType::
reg_sgcsConf (const ::std::string& x)
{
  this->reg_sgcsConf_ = x;
  this->reg_sgcsConf_present_ = true;
}

bool driverType::
reg_drvConf_present () const
{
  return this->reg_drvConf_present_;
}

void driverType::
reg_drvConf_present (bool x)
{
  this->reg_drvConf_present_ = x;
}

const ::std::string& driverType::
reg_drvConf () const
{
  return this->reg_drvConf_;
}

::std::string& driverType::
reg_drvConf ()
{
  return this->reg_drvConf_;
}

void driverType::
reg_drvConf (const ::std::string& x)
{
  this->reg_drvConf_ = x;
  this->reg_drvConf_present_ = true;
}

// motion_profileType
//

bool motion_profileType::
speed_min_present () const
{
  return this->speed_min_present_;
}

void motion_profileType::
speed_min_present (bool x)
{
  this->speed_min_present_ = x;
}

signed char motion_profileType::
speed_min () const
{
  return this->speed_min_;
}

signed char& motion_profileType::
speed_min ()
{
  return this->speed_min_;
}

void motion_profileType::
speed_min (signed char x)
{
  this->speed_min_ = x;
  this->speed_min_present_ = true;
}

bool motion_profileType::
speed_max_present () const
{
  return this->speed_max_present_;
}

void motion_profileType::
speed_max_present (bool x)
{
  this->speed_max_present_ = x;
}

short motion_profileType::
speed_max () const
{
  return this->speed_max_;
}

short& motion_profileType::
speed_max ()
{
  return this->speed_max_;
}

void motion_profileType::
speed_max (short x)
{
  this->speed_max_ = x;
  this->speed_max_present_ = true;
}

bool motion_profileType::
acc_present () const
{
  return this->acc_present_;
}

void motion_profileType::
acc_present (bool x)
{
  this->acc_present_ = x;
}

short motion_profileType::
acc () const
{
  return this->acc_;
}

short& motion_profileType::
acc ()
{
  return this->acc_;
}

void motion_profileType::
acc (short x)
{
  this->acc_ = x;
  this->acc_present_ = true;
}

bool motion_profileType::
dec_present () const
{
  return this->dec_present_;
}

void motion_profileType::
dec_present (bool x)
{
  this->dec_present_ = x;
}

short motion_profileType::
dec () const
{
  return this->dec_;
}

short& motion_profileType::
dec ()
{
  return this->dec_;
}

void motion_profileType::
dec (short x)
{
  this->dec_ = x;
  this->dec_present_ = true;
}

bool motion_profileType::
acc_time_present () const
{
  return this->acc_time_present_;
}

void motion_profileType::
acc_time_present (bool x)
{
  this->acc_time_present_ = x;
}

signed char motion_profileType::
acc_time () const
{
  return this->acc_time_;
}

signed char& motion_profileType::
acc_time ()
{
  return this->acc_time_;
}

void motion_profileType::
acc_time (signed char x)
{
  this->acc_time_ = x;
  this->acc_time_present_ = true;
}

bool motion_profileType::
dec_time_present () const
{
  return this->dec_time_present_;
}

void motion_profileType::
dec_time_present (bool x)
{
  this->dec_time_present_ = x;
}

signed char motion_profileType::
dec_time () const
{
  return this->dec_time_;
}

signed char& motion_profileType::
dec_time ()
{
  return this->dec_time_;
}

void motion_profileType::
dec_time (signed char x)
{
  this->dec_time_ = x;
  this->dec_time_present_ = true;
}

bool motion_profileType::
micro_steps_present () const
{
  return this->micro_steps_present_;
}

void motion_profileType::
micro_steps_present (bool x)
{
  this->micro_steps_present_ = x;
}

signed char motion_profileType::
micro_steps () const
{
  return this->micro_steps_;
}

signed char& motion_profileType::
micro_steps ()
{
  return this->micro_steps_;
}

void motion_profileType::
micro_steps (signed char x)
{
  this->micro_steps_ = x;
  this->micro_steps_present_ = true;
}

bool motion_profileType::
ramp_type_present () const
{
  return this->ramp_type_present_;
}

void motion_profileType::
ramp_type_present (bool x)
{
  this->ramp_type_present_ = x;
}

signed char motion_profileType::
ramp_type () const
{
  return this->ramp_type_;
}

signed char& motion_profileType::
ramp_type ()
{
  return this->ramp_type_;
}

void motion_profileType::
ramp_type (signed char x)
{
  this->ramp_type_ = x;
  this->ramp_type_present_ = true;
}

// motion_profilesType
//

const motion_profilesType::motion_profile_sequence& motion_profilesType::
motion_profile () const
{
  return this->motion_profile_;
}

motion_profilesType::motion_profile_sequence& motion_profilesType::
motion_profile ()
{
  return this->motion_profile_;
}

// pid_controllerType
//

bool pid_controllerType::
max_temperature_present () const
{
  return this->max_temperature_present_;
}

void pid_controllerType::
max_temperature_present (bool x)
{
  this->max_temperature_present_ = x;
}

short pid_controllerType::
max_temperature () const
{
  return this->max_temperature_;
}

short& pid_controllerType::
max_temperature ()
{
  return this->max_temperature_;
}

void pid_controllerType::
max_temperature (short x)
{
  this->max_temperature_ = x;
  this->max_temperature_present_ = true;
}

bool pid_controllerType::
controller_gain_present () const
{
  return this->controller_gain_present_;
}

void pid_controllerType::
controller_gain_present (bool x)
{
  this->controller_gain_present_ = x;
}

short pid_controllerType::
controller_gain () const
{
  return this->controller_gain_;
}

short& pid_controllerType::
controller_gain ()
{
  return this->controller_gain_;
}

void pid_controllerType::
controller_gain (short x)
{
  this->controller_gain_ = x;
  this->controller_gain_present_ = true;
}

bool pid_controllerType::
reset_time_present () const
{
  return this->reset_time_present_;
}

void pid_controllerType::
reset_time_present (bool x)
{
  this->reset_time_present_ = x;
}

short pid_controllerType::
reset_time () const
{
  return this->reset_time_;
}

short& pid_controllerType::
reset_time ()
{
  return this->reset_time_;
}

void pid_controllerType::
reset_time (short x)
{
  this->reset_time_ = x;
  this->reset_time_present_ = true;
}

bool pid_controllerType::
derivative_time_present () const
{
  return this->derivative_time_present_;
}

void pid_controllerType::
derivative_time_present (bool x)
{
  this->derivative_time_present_ = x;
}

signed char pid_controllerType::
derivative_time () const
{
  return this->derivative_time_;
}

signed char& pid_controllerType::
derivative_time ()
{
  return this->derivative_time_;
}

void pid_controllerType::
derivative_time (signed char x)
{
  this->derivative_time_ = x;
  this->derivative_time_present_ = true;
}

bool pid_controllerType::
max_pressure_present () const
{
  return this->max_pressure_present_;
}

void pid_controllerType::
max_pressure_present (bool x)
{
  this->max_pressure_present_ = x;
}

signed char pid_controllerType::
max_pressure () const
{
  return this->max_pressure_;
}

signed char& pid_controllerType::
max_pressure ()
{
  return this->max_pressure_;
}

void pid_controllerType::
max_pressure (signed char x)
{
  this->max_pressure_ = x;
  this->max_pressure_present_ = true;
}

bool pid_controllerType::
min_pressure_present () const
{
  return this->min_pressure_present_;
}

void pid_controllerType::
min_pressure_present (bool x)
{
  this->min_pressure_present_ = x;
}

signed char pid_controllerType::
min_pressure () const
{
  return this->min_pressure_;
}

signed char& pid_controllerType::
min_pressure ()
{
  return this->min_pressure_;
}

void pid_controllerType::
min_pressure (signed char x)
{
  this->min_pressure_ = x;
  this->min_pressure_present_ = true;
}

// pid_controllersType
//

const ::pid_controllerType& pid_controllersType::
pid_controller () const
{
  return this->pid_controller_;
}

::pid_controllerType& pid_controllersType::
pid_controller ()
{
  return this->pid_controller_;
}

void pid_controllersType::
pid_controller (const ::pid_controllerType& x)
{
  this->pid_controller_ = x;
}

// pwm_controllerType
//

bool pwm_controllerType::
max_actuating_value_present () const
{
  return this->max_actuating_value_present_;
}

void pwm_controllerType::
max_actuating_value_present (bool x)
{
  this->max_actuating_value_present_ = x;
}

short pwm_controllerType::
max_actuating_value () const
{
  return this->max_actuating_value_;
}

short& pwm_controllerType::
max_actuating_value ()
{
  return this->max_actuating_value_;
}

void pwm_controllerType::
max_actuating_value (short x)
{
  this->max_actuating_value_ = x;
  this->max_actuating_value_present_ = true;
}

bool pwm_controllerType::
min_actuating_value_present () const
{
  return this->min_actuating_value_present_;
}

void pwm_controllerType::
min_actuating_value_present (bool x)
{
  this->min_actuating_value_present_ = x;
}

short pwm_controllerType::
min_actuating_value () const
{
  return this->min_actuating_value_;
}

short& pwm_controllerType::
min_actuating_value ()
{
  return this->min_actuating_value_;
}

void pwm_controllerType::
min_actuating_value (short x)
{
  this->min_actuating_value_ = x;
  this->min_actuating_value_present_ = true;
}

bool pwm_controllerType::
max_pwm_duty_present () const
{
  return this->max_pwm_duty_present_;
}

void pwm_controllerType::
max_pwm_duty_present (bool x)
{
  this->max_pwm_duty_present_ = x;
}

signed char pwm_controllerType::
max_pwm_duty () const
{
  return this->max_pwm_duty_;
}

signed char& pwm_controllerType::
max_pwm_duty ()
{
  return this->max_pwm_duty_;
}

void pwm_controllerType::
max_pwm_duty (signed char x)
{
  this->max_pwm_duty_ = x;
  this->max_pwm_duty_present_ = true;
}

bool pwm_controllerType::
min_pwm_duty_present () const
{
  return this->min_pwm_duty_present_;
}

void pwm_controllerType::
min_pwm_duty_present (bool x)
{
  this->min_pwm_duty_present_ = x;
}

signed char pwm_controllerType::
min_pwm_duty () const
{
  return this->min_pwm_duty_;
}

signed char& pwm_controllerType::
min_pwm_duty ()
{
  return this->min_pwm_duty_;
}

void pwm_controllerType::
min_pwm_duty (signed char x)
{
  this->min_pwm_duty_ = x;
  this->min_pwm_duty_present_ = true;
}

// functionmoduleType
//

bool functionmoduleType::
type_present () const
{
  return this->type_present_;
}

void functionmoduleType::
type_present (bool x)
{
  this->type_present_ = x;
}

const ::std::string& functionmoduleType::
type () const
{
  return this->type_;
}

::std::string& functionmoduleType::
type ()
{
  return this->type_;
}

void functionmoduleType::
type (const ::std::string& x)
{
  this->type_ = x;
  this->type_present_ = true;
}

bool functionmoduleType::
key_present () const
{
  return this->key_present_;
}

void functionmoduleType::
key_present (bool x)
{
  this->key_present_ = x;
}

const ::std::string& functionmoduleType::
key () const
{
  return this->key_;
}

::std::string& functionmoduleType::
key ()
{
  return this->key_;
}

void functionmoduleType::
key (const ::std::string& x)
{
  this->key_ = x;
  this->key_present_ = true;
}

bool functionmoduleType::
name_present () const
{
  return this->name_present_;
}

void functionmoduleType::
name_present (bool x)
{
  this->name_present_ = x;
}

const ::std::string& functionmoduleType::
name () const
{
  return this->name_;
}

::std::string& functionmoduleType::
name ()
{
  return this->name_;
}

void functionmoduleType::
name (const ::std::string& x)
{
  this->name_ = x;
  this->name_present_ = true;
}

bool functionmoduleType::
interface_present () const
{
  return this->interface_present_;
}

void functionmoduleType::
interface_present (bool x)
{
  this->interface_present_ = x;
}

signed char functionmoduleType::
interface () const
{
  return this->interface_;
}

signed char& functionmoduleType::
interface ()
{
  return this->interface_;
}

void functionmoduleType::
interface (signed char x)
{
  this->interface_ = x;
  this->interface_present_ = true;
}

bool functionmoduleType::
fct_instanceID_present () const
{
  return this->fct_instanceID_present_;
}

void functionmoduleType::
fct_instanceID_present (bool x)
{
  this->fct_instanceID_present_ = x;
}

const ::std::string& functionmoduleType::
fct_instanceID () const
{
  return this->fct_instanceID_;
}

::std::string& functionmoduleType::
fct_instanceID ()
{
  return this->fct_instanceID_;
}

void functionmoduleType::
fct_instanceID (const ::std::string& x)
{
  this->fct_instanceID_ = x;
  this->fct_instanceID_present_ = true;
}

bool functionmoduleType::
rotation_present () const
{
  return this->rotation_present_;
}

void functionmoduleType::
rotation_present (bool x)
{
  this->rotation_present_ = x;
}

const ::rotationType& functionmoduleType::
rotation () const
{
  return this->rotation_;
}

::rotationType& functionmoduleType::
rotation ()
{
  return this->rotation_;
}

void functionmoduleType::
rotation (const ::rotationType& x)
{
  this->rotation_ = x;
  this->rotation_present_ = true;
}

bool functionmoduleType::
reference_run_present () const
{
  return this->reference_run_present_;
}

void functionmoduleType::
reference_run_present (bool x)
{
  this->reference_run_present_ = x;
}

const ::reference_runType& functionmoduleType::
reference_run () const
{
  return this->reference_run_;
}

::reference_runType& functionmoduleType::
reference_run ()
{
  return this->reference_run_;
}

void functionmoduleType::
reference_run (const ::reference_runType& x)
{
  this->reference_run_ = x;
  this->reference_run_present_ = true;
}

bool functionmoduleType::
position_coverage_present () const
{
  return this->position_coverage_ != 0;
}

const ::position_coverageType& functionmoduleType::
position_coverage () const
{
  return *this->position_coverage_;
}

::position_coverageType& functionmoduleType::
position_coverage ()
{
  return *this->position_coverage_;
}

void functionmoduleType::
position_coverage (::position_coverageType* x)
{
  delete this->position_coverage_;
  this->position_coverage_ = x;
}

bool functionmoduleType::
supervision_present () const
{
  return this->supervision_present_;
}

void functionmoduleType::
supervision_present (bool x)
{
  this->supervision_present_ = x;
}

const ::supervisionType& functionmoduleType::
supervision () const
{
  return this->supervision_;
}

::supervisionType& functionmoduleType::
supervision ()
{
  return this->supervision_;
}

void functionmoduleType::
supervision (const ::supervisionType& x)
{
  this->supervision_ = x;
  this->supervision_present_ = true;
}

bool functionmoduleType::
driver_present () const
{
  return this->driver_present_;
}

void functionmoduleType::
driver_present (bool x)
{
  this->driver_present_ = x;
}

const ::driverType& functionmoduleType::
driver () const
{
  return this->driver_;
}

::driverType& functionmoduleType::
driver ()
{
  return this->driver_;
}

void functionmoduleType::
driver (const ::driverType& x)
{
  this->driver_ = x;
  this->driver_present_ = true;
}

bool functionmoduleType::
motion_profiles_present () const
{
  return this->motion_profiles_ != 0;
}

const ::motion_profilesType& functionmoduleType::
motion_profiles () const
{
  return *this->motion_profiles_;
}

::motion_profilesType& functionmoduleType::
motion_profiles ()
{
  return *this->motion_profiles_;
}

void functionmoduleType::
motion_profiles (::motion_profilesType* x)
{
  delete this->motion_profiles_;
  this->motion_profiles_ = x;
}

bool functionmoduleType::
configuration_present () const
{
  return this->configuration_present_;
}

void functionmoduleType::
configuration_present (bool x)
{
  this->configuration_present_ = x;
}

const ::configurationType& functionmoduleType::
configuration () const
{
  return this->configuration_;
}

::configurationType& functionmoduleType::
configuration ()
{
  return this->configuration_;
}

void functionmoduleType::
configuration (const ::configurationType& x)
{
  this->configuration_ = x;
  this->configuration_present_ = true;
}

bool functionmoduleType::
pid_controllers_present () const
{
  return this->pid_controllers_present_;
}

void functionmoduleType::
pid_controllers_present (bool x)
{
  this->pid_controllers_present_ = x;
}

const ::pid_controllersType& functionmoduleType::
pid_controllers () const
{
  return this->pid_controllers_;
}

::pid_controllersType& functionmoduleType::
pid_controllers ()
{
  return this->pid_controllers_;
}

void functionmoduleType::
pid_controllers (const ::pid_controllersType& x)
{
  this->pid_controllers_ = x;
  this->pid_controllers_present_ = true;
}

bool functionmoduleType::
pwm_controller_present () const
{
  return this->pwm_controller_present_;
}

void functionmoduleType::
pwm_controller_present (bool x)
{
  this->pwm_controller_present_ = x;
}

const ::pwm_controllerType& functionmoduleType::
pwm_controller () const
{
  return this->pwm_controller_;
}

::pwm_controllerType& functionmoduleType::
pwm_controller ()
{
  return this->pwm_controller_;
}

void functionmoduleType::
pwm_controller (const ::pwm_controllerType& x)
{
  this->pwm_controller_ = x;
  this->pwm_controller_present_ = true;
}

// functionmodulesType
//

const functionmodulesType::functionmodule_sequence& functionmodulesType::
functionmodule () const
{
  return this->functionmodule_;
}

functionmodulesType::functionmodule_sequence& functionmodulesType::
functionmodule ()
{
  return this->functionmodule_;
}

// slaveType
//

bool slaveType::
type_present () const
{
  return this->type_present_;
}

void slaveType::
type_present (bool x)
{
  this->type_present_ = x;
}

const ::std::string& slaveType::
type () const
{
  return this->type_;
}

::std::string& slaveType::
type ()
{
  return this->type_;
}

void slaveType::
type (const ::std::string& x)
{
  this->type_ = x;
  this->type_present_ = true;
}

bool slaveType::
key_present () const
{
  return this->key_present_;
}

void slaveType::
key_present (bool x)
{
  this->key_present_ = x;
}

const ::std::string& slaveType::
key () const
{
  return this->key_;
}

::std::string& slaveType::
key ()
{
  return this->key_;
}

void slaveType::
key (const ::std::string& x)
{
  this->key_ = x;
  this->key_present_ = true;
}

bool slaveType::
name_present () const
{
  return this->name_present_;
}

void slaveType::
name_present (bool x)
{
  this->name_present_ = x;
}

const ::std::string& slaveType::
name () const
{
  return this->name_;
}

::std::string& slaveType::
name ()
{
  return this->name_;
}

void slaveType::
name (const ::std::string& x)
{
  this->name_ = x;
  this->name_present_ = true;
}

bool slaveType::
virtual__present () const
{
  return this->virtual__present_;
}

void slaveType::
virtual__present (bool x)
{
  this->virtual__present_ = x;
}

signed char slaveType::
virtual_ () const
{
  return this->virtual__;
}

signed char& slaveType::
virtual_ ()
{
  return this->virtual__;
}

void slaveType::
virtual_ (signed char x)
{
  this->virtual__ = x;
  this->virtual__present_ = true;
}

signed char slaveType::
nodetype () const
{
  return this->nodetype_;
}

signed char& slaveType::
nodetype ()
{
  return this->nodetype_;
}

void slaveType::
nodetype (signed char x)
{
  this->nodetype_ = x;
}

signed char slaveType::
nodeindex () const
{
  return this->nodeindex_;
}

signed char& slaveType::
nodeindex ()
{
  return this->nodeindex_;
}

void slaveType::
nodeindex (signed char x)
{
  this->nodeindex_ = x;
}

const ::functionmodulesType& slaveType::
functionmodules () const
{
  return *this->functionmodules_;
}

::functionmodulesType& slaveType::
functionmodules ()
{
  return *this->functionmodules_;
}

void slaveType::
functionmodules (::functionmodulesType* x)
{
  delete this->functionmodules_;
  this->functionmodules_ = x;
}

// parameter_slavesType
//

const parameter_slavesType::slave_sequence& parameter_slavesType::
slave () const
{
  return this->slave_;
}

parameter_slavesType::slave_sequence& parameter_slavesType::
slave ()
{
  return this->slave_;
}

// hwconfigType
//

bool hwconfigType::
version_present () const
{
  return this->version_present_;
}

void hwconfigType::
version_present (bool x)
{
  this->version_present_ = x;
}

float hwconfigType::
version () const
{
  return this->version_;
}

float& hwconfigType::
version ()
{
  return this->version_;
}

void hwconfigType::
version (float x)
{
  this->version_ = x;
  this->version_present_ = true;
}

const ::parameter_masterType& hwconfigType::
parameter_master () const
{
  return *this->parameter_master_;
}

::parameter_masterType& hwconfigType::
parameter_master ()
{
  return *this->parameter_master_;
}

void hwconfigType::
parameter_master (::parameter_masterType* x)
{
  delete this->parameter_master_;
  this->parameter_master_ = x;
}

const ::parameter_slavesType& hwconfigType::
parameter_slaves () const
{
  return *this->parameter_slaves_;
}

::parameter_slavesType& hwconfigType::
parameter_slaves ()
{
  return *this->parameter_slaves_;
}

void hwconfigType::
parameter_slaves (::parameter_slavesType* x)
{
  delete this->parameter_slaves_;
  this->parameter_slaves_ = x;
}

const ::devicesType& hwconfigType::
devices () const
{
  return *this->devices_;
}

::devicesType& hwconfigType::
devices ()
{
  return *this->devices_;
}

void hwconfigType::
devices (::devicesType* x)
{
  delete this->devices_;
  this->devices_ = x;
}

#include <stdlib.h>
#include <assert.h>
#include <new>

// can_interfaceType
//

can_interfaceType::
can_interfaceType ()
{
  this->interface_present_ = false;
}

can_interfaceType::
~can_interfaceType ()
{
}

can_interfaceType::
can_interfaceType (const can_interfaceType& x)
: ::std::string (x)
{
  XSDE_UNUSED (x);
  this->interface_present_ = x.interface_present_;
  if (this->interface_present_)
    this->interface_ = x.interface_;
}

can_interfaceType& can_interfaceType::
operator= (const can_interfaceType& x)
{
  XSDE_UNUSED (x);
  static_cast< ::std::string& > (*this) = x;
  this->interface_present_ = x.interface_present_;
  if (this->interface_present_)
    this->interface_ = x.interface_;
  return *this;
}

// tcp_interfaceType
//

tcp_interfaceType::
tcp_interfaceType ()
{
  this->usage_present_ = false;
}

tcp_interfaceType::
~tcp_interfaceType ()
{
}

tcp_interfaceType::
tcp_interfaceType (const tcp_interfaceType& x)
: ::std::string (x)
{
  XSDE_UNUSED (x);
  this->usage_present_ = x.usage_present_;
  if (this->usage_present_)
    this->usage_ = x.usage_;
}

tcp_interfaceType& tcp_interfaceType::
operator= (const tcp_interfaceType& x)
{
  XSDE_UNUSED (x);
  static_cast< ::std::string& > (*this) = x;
  this->usage_present_ = x.usage_present_;
  if (this->usage_present_)
    this->usage_ = x.usage_;
  return *this;
}

// serial_numberType
//

serial_numberType::
serial_numberType ()
{
  this->serialno_present_ = false;
}

serial_numberType::
~serial_numberType ()
{
}

serial_numberType::
serial_numberType (const serial_numberType& x)
: ::std::string (x)
{
  XSDE_UNUSED (x);
  this->serialno_present_ = x.serialno_present_;
  if (this->serialno_present_)
    this->serialno_ = x.serialno_;
}

serial_numberType& serial_numberType::
operator= (const serial_numberType& x)
{
  XSDE_UNUSED (x);
  static_cast< ::std::string& > (*this) = x;
  this->serialno_present_ = x.serialno_present_;
  if (this->serialno_present_)
    this->serialno_ = x.serialno_;
  return *this;
}

// deviceType
//

deviceType::
deviceType ()
{
  this->name_present_ = false;
  this->id_present_ = false;
  this->type_present_ = false;
  this->dev_instanceID_present_ = false;
  this->optional_present_ = false;
  this->functionmodules_ = 0;
}

deviceType::
~deviceType ()
{
  delete this->functionmodules_;
}

// devicesType
//

devicesType::
devicesType ()
{
}

devicesType::
~devicesType ()
{
}

// retortType
//

retortType::
retortType ()
{
  this->name_present_ = false;
  this->index_present_ = false;
  this->devices_ = 0;
}

retortType::
~retortType ()
{
  delete this->devices_;
}

// retortsType
//

retortsType::
retortsType ()
{
}

retortsType::
~retortsType ()
{
}

// parameter_masterType
//

parameter_masterType::
parameter_masterType ()
{
  this->folded_present_ = false;
  this->retorts_ = 0;
}

parameter_masterType::
~parameter_masterType ()
{
  delete this->retorts_;
}

// rotationType
//

rotationType::
rotationType ()
{
  this->type_present_ = false;
  this->direction_present_ = false;
  this->steps_revolution_present_ = false;
  this->position_min_present_ = false;
  this->position_max_present_ = false;
  this->speed_min_present_ = false;
  this->speed_max_present_ = false;
  this->run_cs_present_ = false;
  this->stop_cs_present_ = false;
  this->stop_cs_delay_present_ = false;
}

rotationType::
~rotationType ()
{
}

rotationType::
rotationType (const rotationType& x)
: ::std::string (x)
{
  XSDE_UNUSED (x);
  this->type_present_ = x.type_present_;
  if (this->type_present_)
    this->type_ = x.type_;
  this->direction_present_ = x.direction_present_;
  if (this->direction_present_)
    this->direction_ = x.direction_;
  this->steps_revolution_present_ = x.steps_revolution_present_;
  if (this->steps_revolution_present_)
    this->steps_revolution_ = x.steps_revolution_;
  this->position_min_present_ = x.position_min_present_;
  if (this->position_min_present_)
    this->position_min_ = x.position_min_;
  this->position_max_present_ = x.position_max_present_;
  if (this->position_max_present_)
    this->position_max_ = x.position_max_;
  this->speed_min_present_ = x.speed_min_present_;
  if (this->speed_min_present_)
    this->speed_min_ = x.speed_min_;
  this->speed_max_present_ = x.speed_max_present_;
  if (this->speed_max_present_)
    this->speed_max_ = x.speed_max_;
  this->run_cs_present_ = x.run_cs_present_;
  if (this->run_cs_present_)
    this->run_cs_ = x.run_cs_;
  this->stop_cs_present_ = x.stop_cs_present_;
  if (this->stop_cs_present_)
    this->stop_cs_ = x.stop_cs_;
  this->stop_cs_delay_present_ = x.stop_cs_delay_present_;
  if (this->stop_cs_delay_present_)
    this->stop_cs_delay_ = x.stop_cs_delay_;
}

rotationType& rotationType::
operator= (const rotationType& x)
{
  XSDE_UNUSED (x);
  static_cast< ::std::string& > (*this) = x;
  this->type_present_ = x.type_present_;
  if (this->type_present_)
    this->type_ = x.type_;
  this->direction_present_ = x.direction_present_;
  if (this->direction_present_)
    this->direction_ = x.direction_;
  this->steps_revolution_present_ = x.steps_revolution_present_;
  if (this->steps_revolution_present_)
    this->steps_revolution_ = x.steps_revolution_;
  this->position_min_present_ = x.position_min_present_;
  if (this->position_min_present_)
    this->position_min_ = x.position_min_;
  this->position_max_present_ = x.position_max_present_;
  if (this->position_max_present_)
    this->position_max_ = x.position_max_;
  this->speed_min_present_ = x.speed_min_present_;
  if (this->speed_min_present_)
    this->speed_min_ = x.speed_min_;
  this->speed_max_present_ = x.speed_max_present_;
  if (this->speed_max_present_)
    this->speed_max_ = x.speed_max_;
  this->run_cs_present_ = x.run_cs_present_;
  if (this->run_cs_present_)
    this->run_cs_ = x.run_cs_;
  this->stop_cs_present_ = x.stop_cs_present_;
  if (this->stop_cs_present_)
    this->stop_cs_ = x.stop_cs_;
  this->stop_cs_delay_present_ = x.stop_cs_delay_present_;
  if (this->stop_cs_delay_present_)
    this->stop_cs_delay_ = x.stop_cs_delay_;
  return *this;
}

// reference_runType
//

reference_runType::
reference_runType ()
{
  this->ref_position_present_ = false;
  this->max_distance_present_ = false;
  this->timeout_present_ = false;
  this->reverse_distance_present_ = false;
  this->slow_speed_present_ = false;
  this->high_speed_present_ = false;
  this->refpos_offset_present_ = false;
}

reference_runType::
~reference_runType ()
{
}

reference_runType::
reference_runType (const reference_runType& x)
: ::std::string (x)
{
  XSDE_UNUSED (x);
  this->ref_position_present_ = x.ref_position_present_;
  if (this->ref_position_present_)
    this->ref_position_ = x.ref_position_;
  this->max_distance_present_ = x.max_distance_present_;
  if (this->max_distance_present_)
    this->max_distance_ = x.max_distance_;
  this->timeout_present_ = x.timeout_present_;
  if (this->timeout_present_)
    this->timeout_ = x.timeout_;
  this->reverse_distance_present_ = x.reverse_distance_present_;
  if (this->reverse_distance_present_)
    this->reverse_distance_ = x.reverse_distance_;
  this->slow_speed_present_ = x.slow_speed_present_;
  if (this->slow_speed_present_)
    this->slow_speed_ = x.slow_speed_;
  this->high_speed_present_ = x.high_speed_present_;
  if (this->high_speed_present_)
    this->high_speed_ = x.high_speed_;
  this->refpos_offset_present_ = x.refpos_offset_present_;
  if (this->refpos_offset_present_)
    this->refpos_offset_ = x.refpos_offset_;
}

reference_runType& reference_runType::
operator= (const reference_runType& x)
{
  XSDE_UNUSED (x);
  static_cast< ::std::string& > (*this) = x;
  this->ref_position_present_ = x.ref_position_present_;
  if (this->ref_position_present_)
    this->ref_position_ = x.ref_position_;
  this->max_distance_present_ = x.max_distance_present_;
  if (this->max_distance_present_)
    this->max_distance_ = x.max_distance_;
  this->timeout_present_ = x.timeout_present_;
  if (this->timeout_present_)
    this->timeout_ = x.timeout_;
  this->reverse_distance_present_ = x.reverse_distance_present_;
  if (this->reverse_distance_present_)
    this->reverse_distance_ = x.reverse_distance_;
  this->slow_speed_present_ = x.slow_speed_present_;
  if (this->slow_speed_present_)
    this->slow_speed_ = x.slow_speed_;
  this->high_speed_present_ = x.high_speed_present_;
  if (this->high_speed_present_)
    this->high_speed_ = x.high_speed_;
  this->refpos_offset_present_ = x.refpos_offset_present_;
  if (this->refpos_offset_present_)
    this->refpos_offset_ = x.refpos_offset_;
  return *this;
}

// encoderType
//

encoderType::
encoderType ()
{
  this->type_present_ = false;
  this->resolution_present_ = false;
  this->rotation_present_ = false;
}

encoderType::
~encoderType ()
{
}

encoderType::
encoderType (const encoderType& x)
: ::std::string (x)
{
  XSDE_UNUSED (x);
  this->type_present_ = x.type_present_;
  if (this->type_present_)
    this->type_ = x.type_;
  this->resolution_present_ = x.resolution_present_;
  if (this->resolution_present_)
    this->resolution_ = x.resolution_;
  this->rotation_present_ = x.rotation_present_;
  if (this->rotation_present_)
    this->rotation_ = x.rotation_;
}

encoderType& encoderType::
operator= (const encoderType& x)
{
  XSDE_UNUSED (x);
  static_cast< ::std::string& > (*this) = x;
  this->type_present_ = x.type_present_;
  if (this->type_present_)
    this->type_ = x.type_;
  this->resolution_present_ = x.resolution_present_;
  if (this->resolution_present_)
    this->resolution_ = x.resolution_;
  this->rotation_present_ = x.rotation_present_;
  if (this->rotation_present_)
    this->rotation_ = x.rotation_;
  return *this;
}

// configurationType
//

configurationType::
configurationType ()
{
  this->polarity_present_ = false;
  this->sample_rate_present_ = false;
  this->debounce_present_ = false;
  this->temp_tolerance_present_ = false;
  this->sampling_period_present_ = false;
  this->fan_speed_present_ = false;
  this->fan_threshold_present_ = false;
  this->current_gain_present_ = false;
  this->heater_current_present_ = false;
  this->heater_threshold_present_ = false;
  this->current_deviation_present_ = false;
  this->current_min_230_serial_present_ = false;
  this->current_max_230_serial_present_ = false;
  this->current_min_100_serial_present_ = false;
  this->current_max_100_serial_present_ = false;
  this->current_min_100_parallel_present_ = false;
  this->current_max_100_parallel_present_ = false;
  this->pressure_tolerance_present_ = false;
  this->fan_current_gain_present_ = false;
  this->fan_current_present_ = false;
  this->pump_current_present_ = false;
  this->pump_threshold_present_ = false;
  this->enabled_present_ = false;
  this->inactiv_shutdown_present_ = false;
  this->inactiv_emcy_present_ = false;
  this->outval_inactiv_present_ = false;
  this->livetime_limit_present_ = false;
  this->timestamp_present_ = false;
  this->threshold_present_ = false;
  this->interval_present_ = false;
}

configurationType::
~configurationType ()
{
}

configurationType::
configurationType (const configurationType& x)
: ::std::string (x)
{
  XSDE_UNUSED (x);
  this->polarity_present_ = x.polarity_present_;
  if (this->polarity_present_)
    this->polarity_ = x.polarity_;
  this->sample_rate_present_ = x.sample_rate_present_;
  if (this->sample_rate_present_)
    this->sample_rate_ = x.sample_rate_;
  this->debounce_present_ = x.debounce_present_;
  if (this->debounce_present_)
    this->debounce_ = x.debounce_;
  this->temp_tolerance_present_ = x.temp_tolerance_present_;
  if (this->temp_tolerance_present_)
    this->temp_tolerance_ = x.temp_tolerance_;
  this->sampling_period_present_ = x.sampling_period_present_;
  if (this->sampling_period_present_)
    this->sampling_period_ = x.sampling_period_;
  this->fan_speed_present_ = x.fan_speed_present_;
  if (this->fan_speed_present_)
    this->fan_speed_ = x.fan_speed_;
  this->fan_threshold_present_ = x.fan_threshold_present_;
  if (this->fan_threshold_present_)
    this->fan_threshold_ = x.fan_threshold_;
  this->current_gain_present_ = x.current_gain_present_;
  if (this->current_gain_present_)
    this->current_gain_ = x.current_gain_;
  this->heater_current_present_ = x.heater_current_present_;
  if (this->heater_current_present_)
    this->heater_current_ = x.heater_current_;
  this->heater_threshold_present_ = x.heater_threshold_present_;
  if (this->heater_threshold_present_)
    this->heater_threshold_ = x.heater_threshold_;
  this->current_deviation_present_ = x.current_deviation_present_;
  if (this->current_deviation_present_)
    this->current_deviation_ = x.current_deviation_;
  this->current_min_230_serial_present_ = x.current_min_230_serial_present_;
  if (this->current_min_230_serial_present_)
    this->current_min_230_serial_ = x.current_min_230_serial_;
  this->current_max_230_serial_present_ = x.current_max_230_serial_present_;
  if (this->current_max_230_serial_present_)
    this->current_max_230_serial_ = x.current_max_230_serial_;
  this->current_min_100_serial_present_ = x.current_min_100_serial_present_;
  if (this->current_min_100_serial_present_)
    this->current_min_100_serial_ = x.current_min_100_serial_;
  this->current_max_100_serial_present_ = x.current_max_100_serial_present_;
  if (this->current_max_100_serial_present_)
    this->current_max_100_serial_ = x.current_max_100_serial_;
  this->current_min_100_parallel_present_ = x.current_min_100_parallel_present_;
  if (this->current_min_100_parallel_present_)
    this->current_min_100_parallel_ = x.current_min_100_parallel_;
  this->current_max_100_parallel_present_ = x.current_max_100_parallel_present_;
  if (this->current_max_100_parallel_present_)
    this->current_max_100_parallel_ = x.current_max_100_parallel_;
  this->pressure_tolerance_present_ = x.pressure_tolerance_present_;
  if (this->pressure_tolerance_present_)
    this->pressure_tolerance_ = x.pressure_tolerance_;
  this->fan_current_gain_present_ = x.fan_current_gain_present_;
  if (this->fan_current_gain_present_)
    this->fan_current_gain_ = x.fan_current_gain_;
  this->fan_current_present_ = x.fan_current_present_;
  if (this->fan_current_present_)
    this->fan_current_ = x.fan_current_;
  this->pump_current_present_ = x.pump_current_present_;
  if (this->pump_current_present_)
    this->pump_current_ = x.pump_current_;
  this->pump_threshold_present_ = x.pump_threshold_present_;
  if (this->pump_threshold_present_)
    this->pump_threshold_ = x.pump_threshold_;
  this->enabled_present_ = x.enabled_present_;
  if (this->enabled_present_)
    this->enabled_ = x.enabled_;
  this->inactiv_shutdown_present_ = x.inactiv_shutdown_present_;
  if (this->inactiv_shutdown_present_)
    this->inactiv_shutdown_ = x.inactiv_shutdown_;
  this->inactiv_emcy_present_ = x.inactiv_emcy_present_;
  if (this->inactiv_emcy_present_)
    this->inactiv_emcy_ = x.inactiv_emcy_;
  this->outval_inactiv_present_ = x.outval_inactiv_present_;
  if (this->outval_inactiv_present_)
    this->outval_inactiv_ = x.outval_inactiv_;
  this->livetime_limit_present_ = x.livetime_limit_present_;
  if (this->livetime_limit_present_)
    this->livetime_limit_ = x.livetime_limit_;
  this->timestamp_present_ = x.timestamp_present_;
  if (this->timestamp_present_)
    this->timestamp_ = x.timestamp_;
  this->threshold_present_ = x.threshold_present_;
  if (this->threshold_present_)
    this->threshold_ = x.threshold_;
  this->interval_present_ = x.interval_present_;
  if (this->interval_present_)
    this->interval_ = x.interval_;
}

configurationType& configurationType::
operator= (const configurationType& x)
{
  XSDE_UNUSED (x);
  static_cast< ::std::string& > (*this) = x;
  this->polarity_present_ = x.polarity_present_;
  if (this->polarity_present_)
    this->polarity_ = x.polarity_;
  this->sample_rate_present_ = x.sample_rate_present_;
  if (this->sample_rate_present_)
    this->sample_rate_ = x.sample_rate_;
  this->debounce_present_ = x.debounce_present_;
  if (this->debounce_present_)
    this->debounce_ = x.debounce_;
  this->temp_tolerance_present_ = x.temp_tolerance_present_;
  if (this->temp_tolerance_present_)
    this->temp_tolerance_ = x.temp_tolerance_;
  this->sampling_period_present_ = x.sampling_period_present_;
  if (this->sampling_period_present_)
    this->sampling_period_ = x.sampling_period_;
  this->fan_speed_present_ = x.fan_speed_present_;
  if (this->fan_speed_present_)
    this->fan_speed_ = x.fan_speed_;
  this->fan_threshold_present_ = x.fan_threshold_present_;
  if (this->fan_threshold_present_)
    this->fan_threshold_ = x.fan_threshold_;
  this->current_gain_present_ = x.current_gain_present_;
  if (this->current_gain_present_)
    this->current_gain_ = x.current_gain_;
  this->heater_current_present_ = x.heater_current_present_;
  if (this->heater_current_present_)
    this->heater_current_ = x.heater_current_;
  this->heater_threshold_present_ = x.heater_threshold_present_;
  if (this->heater_threshold_present_)
    this->heater_threshold_ = x.heater_threshold_;
  this->current_deviation_present_ = x.current_deviation_present_;
  if (this->current_deviation_present_)
    this->current_deviation_ = x.current_deviation_;
  this->current_min_230_serial_present_ = x.current_min_230_serial_present_;
  if (this->current_min_230_serial_present_)
    this->current_min_230_serial_ = x.current_min_230_serial_;
  this->current_max_230_serial_present_ = x.current_max_230_serial_present_;
  if (this->current_max_230_serial_present_)
    this->current_max_230_serial_ = x.current_max_230_serial_;
  this->current_min_100_serial_present_ = x.current_min_100_serial_present_;
  if (this->current_min_100_serial_present_)
    this->current_min_100_serial_ = x.current_min_100_serial_;
  this->current_max_100_serial_present_ = x.current_max_100_serial_present_;
  if (this->current_max_100_serial_present_)
    this->current_max_100_serial_ = x.current_max_100_serial_;
  this->current_min_100_parallel_present_ = x.current_min_100_parallel_present_;
  if (this->current_min_100_parallel_present_)
    this->current_min_100_parallel_ = x.current_min_100_parallel_;
  this->current_max_100_parallel_present_ = x.current_max_100_parallel_present_;
  if (this->current_max_100_parallel_present_)
    this->current_max_100_parallel_ = x.current_max_100_parallel_;
  this->pressure_tolerance_present_ = x.pressure_tolerance_present_;
  if (this->pressure_tolerance_present_)
    this->pressure_tolerance_ = x.pressure_tolerance_;
  this->fan_current_gain_present_ = x.fan_current_gain_present_;
  if (this->fan_current_gain_present_)
    this->fan_current_gain_ = x.fan_current_gain_;
  this->fan_current_present_ = x.fan_current_present_;
  if (this->fan_current_present_)
    this->fan_current_ = x.fan_current_;
  this->pump_current_present_ = x.pump_current_present_;
  if (this->pump_current_present_)
    this->pump_current_ = x.pump_current_;
  this->pump_threshold_present_ = x.pump_threshold_present_;
  if (this->pump_threshold_present_)
    this->pump_threshold_ = x.pump_threshold_;
  this->enabled_present_ = x.enabled_present_;
  if (this->enabled_present_)
    this->enabled_ = x.enabled_;
  this->inactiv_shutdown_present_ = x.inactiv_shutdown_present_;
  if (this->inactiv_shutdown_present_)
    this->inactiv_shutdown_ = x.inactiv_shutdown_;
  this->inactiv_emcy_present_ = x.inactiv_emcy_present_;
  if (this->inactiv_emcy_present_)
    this->inactiv_emcy_ = x.inactiv_emcy_;
  this->outval_inactiv_present_ = x.outval_inactiv_present_;
  if (this->outval_inactiv_present_)
    this->outval_inactiv_ = x.outval_inactiv_;
  this->livetime_limit_present_ = x.livetime_limit_present_;
  if (this->livetime_limit_present_)
    this->livetime_limit_ = x.livetime_limit_;
  this->timestamp_present_ = x.timestamp_present_;
  if (this->timestamp_present_)
    this->timestamp_ = x.timestamp_;
  this->threshold_present_ = x.threshold_present_;
  if (this->threshold_present_)
    this->threshold_ = x.threshold_;
  this->interval_present_ = x.interval_present_;
  if (this->interval_present_)
    this->interval_ = x.interval_;
  return *this;
}

// limitswitchType
//

limitswitchType::
limitswitchType ()
{
  this->index_present_ = false;
}

limitswitchType::
~limitswitchType ()
{
}

limitswitchType::
limitswitchType (const limitswitchType& x)
{
  XSDE_UNUSED (x);
  this->index_present_ = x.index_present_;
  if (this->index_present_)
    this->index_ = x.index_;
  this->configuration_ = x.configuration_;
}

limitswitchType& limitswitchType::
operator= (const limitswitchType& x)
{
  XSDE_UNUSED (x);
  this->index_present_ = x.index_present_;
  if (this->index_present_)
    this->index_ = x.index_;
  this->configuration_ = x.configuration_;
  return *this;
}

// position_codeType
//

position_codeType::
position_codeType ()
{
  this->value_present_ = false;
  this->stop_present_ = false;
  this->stop_dir_present_ = false;
  this->position_present_ = false;
  this->width_present_ = false;
  this->deviation_present_ = false;
  this->dir_check_present_ = false;
  this->hit_skip_present_ = false;
}

position_codeType::
~position_codeType ()
{
}

position_codeType::
position_codeType (const position_codeType& x)
: ::std::string (x)
{
  XSDE_UNUSED (x);
  this->value_present_ = x.value_present_;
  if (this->value_present_)
    this->value_ = x.value_;
  this->stop_present_ = x.stop_present_;
  if (this->stop_present_)
    this->stop_ = x.stop_;
  this->stop_dir_present_ = x.stop_dir_present_;
  if (this->stop_dir_present_)
    this->stop_dir_ = x.stop_dir_;
  this->position_present_ = x.position_present_;
  if (this->position_present_)
    this->position_ = x.position_;
  this->width_present_ = x.width_present_;
  if (this->width_present_)
    this->width_ = x.width_;
  this->deviation_present_ = x.deviation_present_;
  if (this->deviation_present_)
    this->deviation_ = x.deviation_;
  this->dir_check_present_ = x.dir_check_present_;
  if (this->dir_check_present_)
    this->dir_check_ = x.dir_check_;
  this->hit_skip_present_ = x.hit_skip_present_;
  if (this->hit_skip_present_)
    this->hit_skip_ = x.hit_skip_;
}

position_codeType& position_codeType::
operator= (const position_codeType& x)
{
  XSDE_UNUSED (x);
  static_cast< ::std::string& > (*this) = x;
  this->value_present_ = x.value_present_;
  if (this->value_present_)
    this->value_ = x.value_;
  this->stop_present_ = x.stop_present_;
  if (this->stop_present_)
    this->stop_ = x.stop_;
  this->stop_dir_present_ = x.stop_dir_present_;
  if (this->stop_dir_present_)
    this->stop_dir_ = x.stop_dir_;
  this->position_present_ = x.position_present_;
  if (this->position_present_)
    this->position_ = x.position_;
  this->width_present_ = x.width_present_;
  if (this->width_present_)
    this->width_ = x.width_;
  this->deviation_present_ = x.deviation_present_;
  if (this->deviation_present_)
    this->deviation_ = x.deviation_;
  this->dir_check_present_ = x.dir_check_present_;
  if (this->dir_check_present_)
    this->dir_check_ = x.dir_check_;
  this->hit_skip_present_ = x.hit_skip_present_;
  if (this->hit_skip_present_)
    this->hit_skip_ = x.hit_skip_;
  return *this;
}

// limitswitchesType
//

limitswitchesType::
limitswitchesType ()
{
}

limitswitchesType::
~limitswitchesType ()
{
}

// position_coverageType
//

position_coverageType::
position_coverageType ()
{
  this->limitswitches_ = 0;
}

position_coverageType::
~position_coverageType ()
{
  delete this->limitswitches_;
}

// supervisionType
//

supervisionType::
supervisionType ()
{
  this->steploss_warn_limit_present_ = false;
  this->steploss_error_limit_present_ = false;
  this->current_limit_present_ = false;
}

supervisionType::
~supervisionType ()
{
}

supervisionType::
supervisionType (const supervisionType& x)
: ::std::string (x)
{
  XSDE_UNUSED (x);
  this->steploss_warn_limit_present_ = x.steploss_warn_limit_present_;
  if (this->steploss_warn_limit_present_)
    this->steploss_warn_limit_ = x.steploss_warn_limit_;
  this->steploss_error_limit_present_ = x.steploss_error_limit_present_;
  if (this->steploss_error_limit_present_)
    this->steploss_error_limit_ = x.steploss_error_limit_;
  this->current_limit_present_ = x.current_limit_present_;
  if (this->current_limit_present_)
    this->current_limit_ = x.current_limit_;
}

supervisionType& supervisionType::
operator= (const supervisionType& x)
{
  XSDE_UNUSED (x);
  static_cast< ::std::string& > (*this) = x;
  this->steploss_warn_limit_present_ = x.steploss_warn_limit_present_;
  if (this->steploss_warn_limit_present_)
    this->steploss_warn_limit_ = x.steploss_warn_limit_;
  this->steploss_error_limit_present_ = x.steploss_error_limit_present_;
  if (this->steploss_error_limit_present_)
    this->steploss_error_limit_ = x.steploss_error_limit_;
  this->current_limit_present_ = x.current_limit_present_;
  if (this->current_limit_present_)
    this->current_limit_ = x.current_limit_;
  return *this;
}

// driverType
//

driverType::
driverType ()
{
  this->type_present_ = false;
  this->reg_chopConf_present_ = false;
  this->reg_smartEn_present_ = false;
  this->reg_sgcsConf_present_ = false;
  this->reg_drvConf_present_ = false;
}

driverType::
~driverType ()
{
}

driverType::
driverType (const driverType& x)
: ::std::string (x)
{
  XSDE_UNUSED (x);
  this->type_present_ = x.type_present_;
  if (this->type_present_)
    this->type_ = x.type_;
  this->reg_chopConf_present_ = x.reg_chopConf_present_;
  if (this->reg_chopConf_present_)
    this->reg_chopConf_ = x.reg_chopConf_;
  this->reg_smartEn_present_ = x.reg_smartEn_present_;
  if (this->reg_smartEn_present_)
    this->reg_smartEn_ = x.reg_smartEn_;
  this->reg_sgcsConf_present_ = x.reg_sgcsConf_present_;
  if (this->reg_sgcsConf_present_)
    this->reg_sgcsConf_ = x.reg_sgcsConf_;
  this->reg_drvConf_present_ = x.reg_drvConf_present_;
  if (this->reg_drvConf_present_)
    this->reg_drvConf_ = x.reg_drvConf_;
}

driverType& driverType::
operator= (const driverType& x)
{
  XSDE_UNUSED (x);
  static_cast< ::std::string& > (*this) = x;
  this->type_present_ = x.type_present_;
  if (this->type_present_)
    this->type_ = x.type_;
  this->reg_chopConf_present_ = x.reg_chopConf_present_;
  if (this->reg_chopConf_present_)
    this->reg_chopConf_ = x.reg_chopConf_;
  this->reg_smartEn_present_ = x.reg_smartEn_present_;
  if (this->reg_smartEn_present_)
    this->reg_smartEn_ = x.reg_smartEn_;
  this->reg_sgcsConf_present_ = x.reg_sgcsConf_present_;
  if (this->reg_sgcsConf_present_)
    this->reg_sgcsConf_ = x.reg_sgcsConf_;
  this->reg_drvConf_present_ = x.reg_drvConf_present_;
  if (this->reg_drvConf_present_)
    this->reg_drvConf_ = x.reg_drvConf_;
  return *this;
}

// motion_profileType
//

motion_profileType::
motion_profileType ()
{
  this->speed_min_present_ = false;
  this->speed_max_present_ = false;
  this->acc_present_ = false;
  this->dec_present_ = false;
  this->acc_time_present_ = false;
  this->dec_time_present_ = false;
  this->micro_steps_present_ = false;
  this->ramp_type_present_ = false;
}

motion_profileType::
~motion_profileType ()
{
}

motion_profileType::
motion_profileType (const motion_profileType& x)
: ::std::string (x)
{
  XSDE_UNUSED (x);
  this->speed_min_present_ = x.speed_min_present_;
  if (this->speed_min_present_)
    this->speed_min_ = x.speed_min_;
  this->speed_max_present_ = x.speed_max_present_;
  if (this->speed_max_present_)
    this->speed_max_ = x.speed_max_;
  this->acc_present_ = x.acc_present_;
  if (this->acc_present_)
    this->acc_ = x.acc_;
  this->dec_present_ = x.dec_present_;
  if (this->dec_present_)
    this->dec_ = x.dec_;
  this->acc_time_present_ = x.acc_time_present_;
  if (this->acc_time_present_)
    this->acc_time_ = x.acc_time_;
  this->dec_time_present_ = x.dec_time_present_;
  if (this->dec_time_present_)
    this->dec_time_ = x.dec_time_;
  this->micro_steps_present_ = x.micro_steps_present_;
  if (this->micro_steps_present_)
    this->micro_steps_ = x.micro_steps_;
  this->ramp_type_present_ = x.ramp_type_present_;
  if (this->ramp_type_present_)
    this->ramp_type_ = x.ramp_type_;
}

motion_profileType& motion_profileType::
operator= (const motion_profileType& x)
{
  XSDE_UNUSED (x);
  static_cast< ::std::string& > (*this) = x;
  this->speed_min_present_ = x.speed_min_present_;
  if (this->speed_min_present_)
    this->speed_min_ = x.speed_min_;
  this->speed_max_present_ = x.speed_max_present_;
  if (this->speed_max_present_)
    this->speed_max_ = x.speed_max_;
  this->acc_present_ = x.acc_present_;
  if (this->acc_present_)
    this->acc_ = x.acc_;
  this->dec_present_ = x.dec_present_;
  if (this->dec_present_)
    this->dec_ = x.dec_;
  this->acc_time_present_ = x.acc_time_present_;
  if (this->acc_time_present_)
    this->acc_time_ = x.acc_time_;
  this->dec_time_present_ = x.dec_time_present_;
  if (this->dec_time_present_)
    this->dec_time_ = x.dec_time_;
  this->micro_steps_present_ = x.micro_steps_present_;
  if (this->micro_steps_present_)
    this->micro_steps_ = x.micro_steps_;
  this->ramp_type_present_ = x.ramp_type_present_;
  if (this->ramp_type_present_)
    this->ramp_type_ = x.ramp_type_;
  return *this;
}

// motion_profilesType
//

motion_profilesType::
motion_profilesType ()
{
}

motion_profilesType::
~motion_profilesType ()
{
}

// pid_controllerType
//

pid_controllerType::
pid_controllerType ()
{
  this->max_temperature_present_ = false;
  this->controller_gain_present_ = false;
  this->reset_time_present_ = false;
  this->derivative_time_present_ = false;
  this->max_pressure_present_ = false;
  this->min_pressure_present_ = false;
}

pid_controllerType::
~pid_controllerType ()
{
}

pid_controllerType::
pid_controllerType (const pid_controllerType& x)
: ::std::string (x)
{
  XSDE_UNUSED (x);
  this->max_temperature_present_ = x.max_temperature_present_;
  if (this->max_temperature_present_)
    this->max_temperature_ = x.max_temperature_;
  this->controller_gain_present_ = x.controller_gain_present_;
  if (this->controller_gain_present_)
    this->controller_gain_ = x.controller_gain_;
  this->reset_time_present_ = x.reset_time_present_;
  if (this->reset_time_present_)
    this->reset_time_ = x.reset_time_;
  this->derivative_time_present_ = x.derivative_time_present_;
  if (this->derivative_time_present_)
    this->derivative_time_ = x.derivative_time_;
  this->max_pressure_present_ = x.max_pressure_present_;
  if (this->max_pressure_present_)
    this->max_pressure_ = x.max_pressure_;
  this->min_pressure_present_ = x.min_pressure_present_;
  if (this->min_pressure_present_)
    this->min_pressure_ = x.min_pressure_;
}

pid_controllerType& pid_controllerType::
operator= (const pid_controllerType& x)
{
  XSDE_UNUSED (x);
  static_cast< ::std::string& > (*this) = x;
  this->max_temperature_present_ = x.max_temperature_present_;
  if (this->max_temperature_present_)
    this->max_temperature_ = x.max_temperature_;
  this->controller_gain_present_ = x.controller_gain_present_;
  if (this->controller_gain_present_)
    this->controller_gain_ = x.controller_gain_;
  this->reset_time_present_ = x.reset_time_present_;
  if (this->reset_time_present_)
    this->reset_time_ = x.reset_time_;
  this->derivative_time_present_ = x.derivative_time_present_;
  if (this->derivative_time_present_)
    this->derivative_time_ = x.derivative_time_;
  this->max_pressure_present_ = x.max_pressure_present_;
  if (this->max_pressure_present_)
    this->max_pressure_ = x.max_pressure_;
  this->min_pressure_present_ = x.min_pressure_present_;
  if (this->min_pressure_present_)
    this->min_pressure_ = x.min_pressure_;
  return *this;
}

// pid_controllersType
//

pid_controllersType::
pid_controllersType ()
{
}

pid_controllersType::
~pid_controllersType ()
{
}

pid_controllersType::
pid_controllersType (const pid_controllersType& x)
{
  XSDE_UNUSED (x);
  this->pid_controller_ = x.pid_controller_;
}

pid_controllersType& pid_controllersType::
operator= (const pid_controllersType& x)
{
  XSDE_UNUSED (x);
  this->pid_controller_ = x.pid_controller_;
  return *this;
}

// pwm_controllerType
//

pwm_controllerType::
pwm_controllerType ()
{
  this->max_actuating_value_present_ = false;
  this->min_actuating_value_present_ = false;
  this->max_pwm_duty_present_ = false;
  this->min_pwm_duty_present_ = false;
}

pwm_controllerType::
~pwm_controllerType ()
{
}

pwm_controllerType::
pwm_controllerType (const pwm_controllerType& x)
: ::std::string (x)
{
  XSDE_UNUSED (x);
  this->max_actuating_value_present_ = x.max_actuating_value_present_;
  if (this->max_actuating_value_present_)
    this->max_actuating_value_ = x.max_actuating_value_;
  this->min_actuating_value_present_ = x.min_actuating_value_present_;
  if (this->min_actuating_value_present_)
    this->min_actuating_value_ = x.min_actuating_value_;
  this->max_pwm_duty_present_ = x.max_pwm_duty_present_;
  if (this->max_pwm_duty_present_)
    this->max_pwm_duty_ = x.max_pwm_duty_;
  this->min_pwm_duty_present_ = x.min_pwm_duty_present_;
  if (this->min_pwm_duty_present_)
    this->min_pwm_duty_ = x.min_pwm_duty_;
}

pwm_controllerType& pwm_controllerType::
operator= (const pwm_controllerType& x)
{
  XSDE_UNUSED (x);
  static_cast< ::std::string& > (*this) = x;
  this->max_actuating_value_present_ = x.max_actuating_value_present_;
  if (this->max_actuating_value_present_)
    this->max_actuating_value_ = x.max_actuating_value_;
  this->min_actuating_value_present_ = x.min_actuating_value_present_;
  if (this->min_actuating_value_present_)
    this->min_actuating_value_ = x.min_actuating_value_;
  this->max_pwm_duty_present_ = x.max_pwm_duty_present_;
  if (this->max_pwm_duty_present_)
    this->max_pwm_duty_ = x.max_pwm_duty_;
  this->min_pwm_duty_present_ = x.min_pwm_duty_present_;
  if (this->min_pwm_duty_present_)
    this->min_pwm_duty_ = x.min_pwm_duty_;
  return *this;
}

// functionmoduleType
//

functionmoduleType::
functionmoduleType ()
{
  this->type_present_ = false;
  this->key_present_ = false;
  this->name_present_ = false;
  this->interface_present_ = false;
  this->fct_instanceID_present_ = false;
  this->rotation_present_ = false;
  this->reference_run_present_ = false;
  this->position_coverage_ = 0;
  this->supervision_present_ = false;
  this->driver_present_ = false;
  this->motion_profiles_ = 0;
  this->configuration_present_ = false;
  this->pid_controllers_present_ = false;
  this->pwm_controller_present_ = false;
}

functionmoduleType::
~functionmoduleType ()
{
  delete this->position_coverage_;
  delete this->motion_profiles_;
}

// functionmodulesType
//

functionmodulesType::
functionmodulesType ()
{
}

functionmodulesType::
~functionmodulesType ()
{
}

// slaveType
//

slaveType::
slaveType ()
{
  this->type_present_ = false;
  this->key_present_ = false;
  this->name_present_ = false;
  this->virtual__present_ = false;
  this->functionmodules_ = 0;
}

slaveType::
~slaveType ()
{
  delete this->functionmodules_;
}

// parameter_slavesType
//

parameter_slavesType::
parameter_slavesType ()
{
}

parameter_slavesType::
~parameter_slavesType ()
{
}

// hwconfigType
//

hwconfigType::
hwconfigType ()
{
  this->version_present_ = false;
  this->parameter_master_ = 0;
  this->parameter_slaves_ = 0;
  this->devices_ = 0;
}

hwconfigType::
~hwconfigType ()
{
  delete this->parameter_master_;
  delete this->parameter_slaves_;
  delete this->devices_;
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

