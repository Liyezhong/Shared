// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef HWCONFIG_SSKEL_HPP
#define HWCONFIG_SSKEL_HPP

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifdef XSDE_EXCEPTIONS
#error the XSD/e runtime uses exceptions while the generated code does not (reconfigure the runtime or remove --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_SERIALIZER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//

#include <xsde/cxx/hybrid/any-type.hxx>
#include <xsde/cxx/hybrid/any-type-sskel.hxx>
#include <xsde/cxx/hybrid/any-type-simpl.hxx>

namespace xml_schema
{
  using ::xsde::cxx::hybrid::any_type;

  using ::xsde::cxx::hybrid::any_type_sskel;
  using ::xsde::cxx::hybrid::any_type_simpl;
}


//
// End prologue.

// Forward declarations
//
class can_interfaceType_sskel;
class tcp_interfaceType_sskel;
class serial_numberType_sskel;
class deviceType_sskel;
class devicesType_sskel;
class retortType_sskel;
class retortsType_sskel;
class parameter_masterType_sskel;
class rotationType_sskel;
class reference_runType_sskel;
class encoderType_sskel;
class configurationType_sskel;
class limitswitchType_sskel;
class position_codeType_sskel;
class limitswitchesType_sskel;
class position_coverageType_sskel;
class supervisionType_sskel;
class driverType_sskel;
class motion_profileType_sskel;
class motion_profilesType_sskel;
class pid_controllerType_sskel;
class pid_controllersType_sskel;
class pwm_controllerType_sskel;
class functionmoduleType_sskel;
class functionmodulesType_sskel;
class slaveType_sskel;
class parameter_slavesType_sskel;
class hwconfigType_sskel;

#include <string>

#include <xsde/cxx/serializer/xml-schema.hxx>

#include <xsde/cxx/sys-error.hxx>
#include <xsde/cxx/schema-error.hxx>
#include <xsde/cxx/serializer/error.hxx>
#include <xsde/cxx/serializer/genx/xml-error.hxx>

#include <xsde/cxx/serializer/validating/serializer.hxx>
#include <xsde/cxx/serializer/validating/xml-schema-sskel.hxx>
#include <xsde/cxx/serializer/validating/xml-schema-simpl.hxx>

#include <xsde/cxx/serializer/genx/document.hxx>

#include "hwconfig.hpp"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base serializer skeletons.
  //
  using ::xsde::cxx::serializer::serializer_base;
  typedef ::xsde::cxx::serializer::validating::empty_content serializer_empty_content;
  typedef ::xsde::cxx::serializer::validating::simple_content serializer_simple_content;
  typedef ::xsde::cxx::serializer::validating::complex_content serializer_complex_content;

  // Serializer skeletons and implementations for the
  // XML Schema built-in types.
  //
  using ::xsde::cxx::serializer::validating::any_simple_type_sskel;
  using ::xsde::cxx::serializer::validating::any_simple_type_simpl;

  using ::xsde::cxx::serializer::validating::byte_sskel;
  using ::xsde::cxx::serializer::validating::byte_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_byte_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_byte_simpl;

  using ::xsde::cxx::serializer::validating::short_sskel;
  using ::xsde::cxx::serializer::validating::short_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_short_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_short_simpl;

  using ::xsde::cxx::serializer::validating::int_sskel;
  using ::xsde::cxx::serializer::validating::int_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_int_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_int_simpl;

  using ::xsde::cxx::serializer::validating::long_sskel;
  using ::xsde::cxx::serializer::validating::long_simpl;

  using ::xsde::cxx::serializer::validating::unsigned_long_sskel;
  using ::xsde::cxx::serializer::validating::unsigned_long_simpl;

  using ::xsde::cxx::serializer::validating::integer_sskel;
  using ::xsde::cxx::serializer::validating::integer_simpl;

  using ::xsde::cxx::serializer::validating::non_positive_integer_sskel;
  using ::xsde::cxx::serializer::validating::non_positive_integer_simpl;

  using ::xsde::cxx::serializer::validating::non_negative_integer_sskel;
  using ::xsde::cxx::serializer::validating::non_negative_integer_simpl;

  using ::xsde::cxx::serializer::validating::positive_integer_sskel;
  using ::xsde::cxx::serializer::validating::positive_integer_simpl;

  using ::xsde::cxx::serializer::validating::negative_integer_sskel;
  using ::xsde::cxx::serializer::validating::negative_integer_simpl;

  using ::xsde::cxx::serializer::validating::boolean_sskel;
  using ::xsde::cxx::serializer::validating::boolean_simpl;

  using ::xsde::cxx::serializer::validating::float_sskel;
  using ::xsde::cxx::serializer::validating::float_simpl;

  using ::xsde::cxx::serializer::validating::double_sskel;
  using ::xsde::cxx::serializer::validating::double_simpl;

  using ::xsde::cxx::serializer::validating::decimal_sskel;
  using ::xsde::cxx::serializer::validating::decimal_simpl;

  using ::xsde::cxx::serializer::validating::string_sskel;
  using ::xsde::cxx::serializer::validating::string_simpl;

  using ::xsde::cxx::serializer::validating::normalized_string_sskel;
  using ::xsde::cxx::serializer::validating::normalized_string_simpl;

  using ::xsde::cxx::serializer::validating::token_sskel;
  using ::xsde::cxx::serializer::validating::token_simpl;

  using ::xsde::cxx::serializer::validating::name_sskel;
  using ::xsde::cxx::serializer::validating::name_simpl;

  using ::xsde::cxx::serializer::validating::nmtoken_sskel;
  using ::xsde::cxx::serializer::validating::nmtoken_simpl;

  using ::xsde::cxx::serializer::validating::nmtokens_sskel;
  using ::xsde::cxx::serializer::validating::nmtokens_simpl;

  using ::xsde::cxx::serializer::validating::ncname_sskel;
  using ::xsde::cxx::serializer::validating::ncname_simpl;

  using ::xsde::cxx::serializer::validating::language_sskel;
  using ::xsde::cxx::serializer::validating::language_simpl;

  using ::xsde::cxx::serializer::validating::id_sskel;
  using ::xsde::cxx::serializer::validating::id_simpl;

  using ::xsde::cxx::serializer::validating::idref_sskel;
  using ::xsde::cxx::serializer::validating::idref_simpl;

  using ::xsde::cxx::serializer::validating::idrefs_sskel;
  using ::xsde::cxx::serializer::validating::idrefs_simpl;

  using ::xsde::cxx::serializer::validating::uri_sskel;
  using ::xsde::cxx::serializer::validating::uri_simpl;

  using ::xsde::cxx::serializer::validating::qname_sskel;
  using ::xsde::cxx::serializer::validating::qname_simpl;

  using ::xsde::cxx::serializer::validating::base64_binary_sskel;
  using ::xsde::cxx::serializer::validating::base64_binary_simpl;

  using ::xsde::cxx::serializer::validating::hex_binary_sskel;
  using ::xsde::cxx::serializer::validating::hex_binary_simpl;

  using ::xsde::cxx::serializer::validating::date_sskel;
  using ::xsde::cxx::serializer::validating::date_simpl;

  using ::xsde::cxx::serializer::validating::date_time_sskel;
  using ::xsde::cxx::serializer::validating::date_time_simpl;

  using ::xsde::cxx::serializer::validating::duration_sskel;
  using ::xsde::cxx::serializer::validating::duration_simpl;

  using ::xsde::cxx::serializer::validating::gday_sskel;
  using ::xsde::cxx::serializer::validating::gday_simpl;

  using ::xsde::cxx::serializer::validating::gmonth_sskel;
  using ::xsde::cxx::serializer::validating::gmonth_simpl;

  using ::xsde::cxx::serializer::validating::gmonth_day_sskel;
  using ::xsde::cxx::serializer::validating::gmonth_day_simpl;

  using ::xsde::cxx::serializer::validating::gyear_sskel;
  using ::xsde::cxx::serializer::validating::gyear_simpl;

  using ::xsde::cxx::serializer::validating::gyear_month_sskel;
  using ::xsde::cxx::serializer::validating::gyear_month_simpl;

  using ::xsde::cxx::serializer::validating::time_sskel;
  using ::xsde::cxx::serializer::validating::time_simpl;

  // Error codes.
  //
  using xsde::cxx::sys_error;
  typedef xsde::cxx::serializer::genx::xml_error serializer_xml_error;
  typedef xsde::cxx::schema_error serializer_schema_error;

  // Error object.
  //
  typedef xsde::cxx::serializer::error serializer_error;

  // Document serializer.
  //
  using xsde::cxx::serializer::genx::writer;
  using xsde::cxx::serializer::genx::document_simpl;

  // Serializer context.
  //
  typedef xsde::cxx::serializer::context serializer_context;
}

class can_interfaceType_sskel: public ::xml_schema::string_sskel
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::can_interfaceType&) = 0;

  // Attributes.
  //
  virtual bool
  interface_present ();

  virtual ::std::string
  interface () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::string_sskel& /* interface */);

  // Individual attribute serializers.
  //
  void
  interface_serializer (::xml_schema::string_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  can_interfaceType_sskel (::xml_schema::string_sskel* tiein);

  // Implementation.
  //
  public:
  virtual void
  pre (const ::std::string&);

  virtual void
  _serialize_attributes ();

  protected:
  can_interfaceType_sskel* can_interfaceType_impl_;
  can_interfaceType_sskel (can_interfaceType_sskel*, void*);

  protected:
  ::xml_schema::string_sskel* interface_serializer_;
};

class tcp_interfaceType_sskel: public ::xml_schema::string_sskel
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::tcp_interfaceType&) = 0;

  // Attributes.
  //
  virtual bool
  usage_present ();

  virtual signed char
  usage () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::byte_sskel& /* usage */);

  // Individual attribute serializers.
  //
  void
  usage_serializer (::xml_schema::byte_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  tcp_interfaceType_sskel (::xml_schema::string_sskel* tiein);

  // Implementation.
  //
  public:
  virtual void
  pre (const ::std::string&);

  virtual void
  _serialize_attributes ();

  protected:
  tcp_interfaceType_sskel* tcp_interfaceType_impl_;
  tcp_interfaceType_sskel (tcp_interfaceType_sskel*, void*);

  protected:
  ::xml_schema::byte_sskel* usage_serializer_;
};

class serial_numberType_sskel: public ::xml_schema::string_sskel
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::serial_numberType&) = 0;

  // Attributes.
  //
  virtual bool
  serialno_present ();

  virtual ::std::string
  serialno () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::string_sskel& /* serialno */);

  // Individual attribute serializers.
  //
  void
  serialno_serializer (::xml_schema::string_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  serial_numberType_sskel (::xml_schema::string_sskel* tiein);

  // Implementation.
  //
  public:
  virtual void
  pre (const ::std::string&);

  virtual void
  _serialize_attributes ();

  protected:
  serial_numberType_sskel* serial_numberType_impl_;
  serial_numberType_sskel (serial_numberType_sskel*, void*);

  protected:
  ::xml_schema::string_sskel* serialno_serializer_;
};

class deviceType_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::deviceType&) = 0;

  // Attributes.
  //
  virtual bool
  name_present ();

  virtual ::std::string
  name () = 0;

  virtual bool
  id_present ();

  virtual ::std::string
  id () = 0;

  virtual bool
  type_present ();

  virtual ::std::string
  type () = 0;

  virtual bool
  dev_instanceID_present ();

  virtual ::std::string
  dev_instanceID () = 0;

  virtual bool
  optional_present ();

  virtual signed char
  optional () = 0;

  // Elements.
  //
  virtual bool
  functionmodules_present ();

  virtual const ::functionmodulesType&
  functionmodules () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::string_sskel& /* name */,
               ::xml_schema::string_sskel& /* id */,
               ::xml_schema::string_sskel& /* type */,
               ::xml_schema::string_sskel& /* dev_instanceID */,
               ::xml_schema::byte_sskel& /* optional */,
               ::functionmodulesType_sskel& /* functionmodules */);

  // Individual attribute serializers.
  //
  void
  name_serializer (::xml_schema::string_sskel&);

  void
  id_serializer (::xml_schema::string_sskel&);

  void
  type_serializer (::xml_schema::string_sskel&);

  void
  dev_instanceID_serializer (::xml_schema::string_sskel&);

  void
  optional_serializer (::xml_schema::byte_sskel&);

  // Individual element serializers.
  //
  void
  functionmodules_serializer (::functionmodulesType_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  deviceType_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_attributes ();

  virtual void
  _serialize_content ();

  protected:
  deviceType_sskel* deviceType_impl_;
  deviceType_sskel (deviceType_sskel*, void*);

  protected:
  ::xml_schema::string_sskel* name_serializer_;
  ::xml_schema::string_sskel* id_serializer_;
  ::xml_schema::string_sskel* type_serializer_;
  ::xml_schema::string_sskel* dev_instanceID_serializer_;
  ::xml_schema::byte_sskel* optional_serializer_;
  ::functionmodulesType_sskel* functionmodules_serializer_;
};

class devicesType_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::devicesType&) = 0;

  // Elements.
  //
  virtual bool
  device_next ();

  virtual const ::deviceType&
  device () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::deviceType_sskel& /* device */);

  // Individual element serializers.
  //
  void
  device_serializer (::deviceType_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  devicesType_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_content ();

  protected:
  devicesType_sskel* devicesType_impl_;
  devicesType_sskel (devicesType_sskel*, void*);

  protected:
  ::deviceType_sskel* device_serializer_;
};

class retortType_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::retortType&) = 0;

  // Attributes.
  //
  virtual bool
  name_present ();

  virtual ::std::string
  name () = 0;

  virtual bool
  index_present ();

  virtual signed char
  index () = 0;

  // Elements.
  //
  virtual const ::devicesType&
  devices () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::string_sskel& /* name */,
               ::xml_schema::byte_sskel& /* index */,
               ::devicesType_sskel& /* devices */);

  // Individual attribute serializers.
  //
  void
  name_serializer (::xml_schema::string_sskel&);

  void
  index_serializer (::xml_schema::byte_sskel&);

  // Individual element serializers.
  //
  void
  devices_serializer (::devicesType_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  retortType_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_attributes ();

  virtual void
  _serialize_content ();

  protected:
  retortType_sskel* retortType_impl_;
  retortType_sskel (retortType_sskel*, void*);

  protected:
  ::xml_schema::string_sskel* name_serializer_;
  ::xml_schema::byte_sskel* index_serializer_;
  ::devicesType_sskel* devices_serializer_;
};

class retortsType_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::retortsType&) = 0;

  // Elements.
  //
  virtual bool
  retort_next ();

  virtual const ::retortType&
  retort () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::retortType_sskel& /* retort */);

  // Individual element serializers.
  //
  void
  retort_serializer (::retortType_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  retortsType_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_content ();

  protected:
  retortsType_sskel* retortsType_impl_;
  retortsType_sskel (retortsType_sskel*, void*);

  protected:
  ::retortType_sskel* retort_serializer_;
};

class parameter_masterType_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::parameter_masterType&) = 0;

  // Attributes.
  //
  virtual bool
  folded_present ();

  virtual ::std::string
  folded () = 0;

  // Elements.
  //
  virtual const ::can_interfaceType&
  can_interface () = 0;

  virtual const ::tcp_interfaceType&
  tcp_interface () = 0;

  virtual signed char
  nodetype () = 0;

  virtual signed char
  nodeindex () = 0;

  virtual const ::serial_numberType&
  serial_number () = 0;

  virtual const ::retortsType&
  retorts () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::string_sskel& /* folded */,
               ::can_interfaceType_sskel& /* can_interface */,
               ::tcp_interfaceType_sskel& /* tcp_interface */,
               ::xml_schema::byte_sskel& /* nodetype */,
               ::xml_schema::byte_sskel& /* nodeindex */,
               ::serial_numberType_sskel& /* serial_number */,
               ::retortsType_sskel& /* retorts */);

  // Individual attribute serializers.
  //
  void
  folded_serializer (::xml_schema::string_sskel&);

  // Individual element serializers.
  //
  void
  can_interface_serializer (::can_interfaceType_sskel&);

  void
  tcp_interface_serializer (::tcp_interfaceType_sskel&);

  void
  nodetype_serializer (::xml_schema::byte_sskel&);

  void
  nodeindex_serializer (::xml_schema::byte_sskel&);

  void
  serial_number_serializer (::serial_numberType_sskel&);

  void
  retorts_serializer (::retortsType_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  parameter_masterType_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_attributes ();

  virtual void
  _serialize_content ();

  protected:
  parameter_masterType_sskel* parameter_masterType_impl_;
  parameter_masterType_sskel (parameter_masterType_sskel*, void*);

  protected:
  ::xml_schema::string_sskel* folded_serializer_;
  ::can_interfaceType_sskel* can_interface_serializer_;
  ::tcp_interfaceType_sskel* tcp_interface_serializer_;
  ::xml_schema::byte_sskel* nodetype_serializer_;
  ::xml_schema::byte_sskel* nodeindex_serializer_;
  ::serial_numberType_sskel* serial_number_serializer_;
  ::retortsType_sskel* retorts_serializer_;
};

class rotationType_sskel: public ::xml_schema::string_sskel
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::rotationType&) = 0;

  // Attributes.
  //
  virtual bool
  type_present ();

  virtual ::std::string
  type () = 0;

  virtual bool
  direction_present ();

  virtual ::std::string
  direction () = 0;

  virtual bool
  steps_revolution_present ();

  virtual short
  steps_revolution () = 0;

  virtual bool
  position_min_present ();

  virtual short
  position_min () = 0;

  virtual bool
  position_max_present ();

  virtual short
  position_max () = 0;

  virtual bool
  speed_min_present ();

  virtual signed char
  speed_min () = 0;

  virtual bool
  speed_max_present ();

  virtual short
  speed_max () = 0;

  virtual bool
  run_cs_present ();

  virtual signed char
  run_cs () = 0;

  virtual bool
  stop_cs_present ();

  virtual signed char
  stop_cs () = 0;

  virtual bool
  stop_cs_delay_present ();

  virtual short
  stop_cs_delay () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::string_sskel& /* type */,
               ::xml_schema::string_sskel& /* direction */,
               ::xml_schema::short_sskel& /* steps_revolution */,
               ::xml_schema::short_sskel& /* position_min */,
               ::xml_schema::short_sskel& /* position_max */,
               ::xml_schema::byte_sskel& /* speed_min */,
               ::xml_schema::short_sskel& /* speed_max */,
               ::xml_schema::byte_sskel& /* run_cs */,
               ::xml_schema::byte_sskel& /* stop_cs */,
               ::xml_schema::short_sskel& /* stop_cs_delay */);

  // Individual attribute serializers.
  //
  void
  type_serializer (::xml_schema::string_sskel&);

  void
  direction_serializer (::xml_schema::string_sskel&);

  void
  steps_revolution_serializer (::xml_schema::short_sskel&);

  void
  position_min_serializer (::xml_schema::short_sskel&);

  void
  position_max_serializer (::xml_schema::short_sskel&);

  void
  speed_min_serializer (::xml_schema::byte_sskel&);

  void
  speed_max_serializer (::xml_schema::short_sskel&);

  void
  run_cs_serializer (::xml_schema::byte_sskel&);

  void
  stop_cs_serializer (::xml_schema::byte_sskel&);

  void
  stop_cs_delay_serializer (::xml_schema::short_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  rotationType_sskel (::xml_schema::string_sskel* tiein);

  // Implementation.
  //
  public:
  virtual void
  pre (const ::std::string&);

  virtual void
  _serialize_attributes ();

  protected:
  rotationType_sskel* rotationType_impl_;
  rotationType_sskel (rotationType_sskel*, void*);

  protected:
  ::xml_schema::string_sskel* type_serializer_;
  ::xml_schema::string_sskel* direction_serializer_;
  ::xml_schema::short_sskel* steps_revolution_serializer_;
  ::xml_schema::short_sskel* position_min_serializer_;
  ::xml_schema::short_sskel* position_max_serializer_;
  ::xml_schema::byte_sskel* speed_min_serializer_;
  ::xml_schema::short_sskel* speed_max_serializer_;
  ::xml_schema::byte_sskel* run_cs_serializer_;
  ::xml_schema::byte_sskel* stop_cs_serializer_;
  ::xml_schema::short_sskel* stop_cs_delay_serializer_;
};

class reference_runType_sskel: public ::xml_schema::string_sskel
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::reference_runType&) = 0;

  // Attributes.
  //
  virtual bool
  ref_position_present ();

  virtual signed char
  ref_position () = 0;

  virtual bool
  max_distance_present ();

  virtual short
  max_distance () = 0;

  virtual bool
  timeout_present ();

  virtual int
  timeout () = 0;

  virtual bool
  reverse_distance_present ();

  virtual signed char
  reverse_distance () = 0;

  virtual bool
  slow_speed_present ();

  virtual signed char
  slow_speed () = 0;

  virtual bool
  high_speed_present ();

  virtual short
  high_speed () = 0;

  virtual bool
  refpos_offset_present ();

  virtual signed char
  refpos_offset () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::byte_sskel& /* ref_position */,
               ::xml_schema::short_sskel& /* max_distance */,
               ::xml_schema::int_sskel& /* timeout */,
               ::xml_schema::byte_sskel& /* reverse_distance */,
               ::xml_schema::byte_sskel& /* slow_speed */,
               ::xml_schema::short_sskel& /* high_speed */,
               ::xml_schema::byte_sskel& /* refpos_offset */);

  // Individual attribute serializers.
  //
  void
  ref_position_serializer (::xml_schema::byte_sskel&);

  void
  max_distance_serializer (::xml_schema::short_sskel&);

  void
  timeout_serializer (::xml_schema::int_sskel&);

  void
  reverse_distance_serializer (::xml_schema::byte_sskel&);

  void
  slow_speed_serializer (::xml_schema::byte_sskel&);

  void
  high_speed_serializer (::xml_schema::short_sskel&);

  void
  refpos_offset_serializer (::xml_schema::byte_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  reference_runType_sskel (::xml_schema::string_sskel* tiein);

  // Implementation.
  //
  public:
  virtual void
  pre (const ::std::string&);

  virtual void
  _serialize_attributes ();

  protected:
  reference_runType_sskel* reference_runType_impl_;
  reference_runType_sskel (reference_runType_sskel*, void*);

  protected:
  ::xml_schema::byte_sskel* ref_position_serializer_;
  ::xml_schema::short_sskel* max_distance_serializer_;
  ::xml_schema::int_sskel* timeout_serializer_;
  ::xml_schema::byte_sskel* reverse_distance_serializer_;
  ::xml_schema::byte_sskel* slow_speed_serializer_;
  ::xml_schema::short_sskel* high_speed_serializer_;
  ::xml_schema::byte_sskel* refpos_offset_serializer_;
};

class encoderType_sskel: public ::xml_schema::string_sskel
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::encoderType&) = 0;

  // Attributes.
  //
  virtual bool
  type_present ();

  virtual signed char
  type () = 0;

  virtual bool
  resolution_present ();

  virtual short
  resolution () = 0;

  virtual bool
  rotation_present ();

  virtual ::std::string
  rotation () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::byte_sskel& /* type */,
               ::xml_schema::short_sskel& /* resolution */,
               ::xml_schema::string_sskel& /* rotation */);

  // Individual attribute serializers.
  //
  void
  type_serializer (::xml_schema::byte_sskel&);

  void
  resolution_serializer (::xml_schema::short_sskel&);

  void
  rotation_serializer (::xml_schema::string_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  encoderType_sskel (::xml_schema::string_sskel* tiein);

  // Implementation.
  //
  public:
  virtual void
  pre (const ::std::string&);

  virtual void
  _serialize_attributes ();

  protected:
  encoderType_sskel* encoderType_impl_;
  encoderType_sskel (encoderType_sskel*, void*);

  protected:
  ::xml_schema::byte_sskel* type_serializer_;
  ::xml_schema::short_sskel* resolution_serializer_;
  ::xml_schema::string_sskel* rotation_serializer_;
};

class configurationType_sskel: public ::xml_schema::string_sskel
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::configurationType&) = 0;

  // Attributes.
  //
  virtual bool
  polarity_present ();

  virtual signed char
  polarity () = 0;

  virtual bool
  sample_rate_present ();

  virtual signed char
  sample_rate () = 0;

  virtual bool
  debounce_present ();

  virtual signed char
  debounce () = 0;

  virtual bool
  temp_tolerance_present ();

  virtual signed char
  temp_tolerance () = 0;

  virtual bool
  sampling_period_present ();

  virtual short
  sampling_period () = 0;

  virtual bool
  fan_speed_present ();

  virtual short
  fan_speed () = 0;

  virtual bool
  fan_threshold_present ();

  virtual short
  fan_threshold () = 0;

  virtual bool
  current_gain_present ();

  virtual short
  current_gain () = 0;

  virtual bool
  heater_current_present ();

  virtual short
  heater_current () = 0;

  virtual bool
  heater_threshold_present ();

  virtual short
  heater_threshold () = 0;

  virtual bool
  current_deviation_present ();

  virtual short
  current_deviation () = 0;

  virtual bool
  current_min_230_serial_present ();

  virtual short
  current_min_230_serial () = 0;

  virtual bool
  current_max_230_serial_present ();

  virtual short
  current_max_230_serial () = 0;

  virtual bool
  current_min_100_serial_present ();

  virtual short
  current_min_100_serial () = 0;

  virtual bool
  current_max_100_serial_present ();

  virtual short
  current_max_100_serial () = 0;

  virtual bool
  current_min_100_parallel_present ();

  virtual short
  current_min_100_parallel () = 0;

  virtual bool
  current_max_100_parallel_present ();

  virtual short
  current_max_100_parallel () = 0;

  virtual bool
  pressure_tolerance_present ();

  virtual signed char
  pressure_tolerance () = 0;

  virtual bool
  fan_current_gain_present ();

  virtual signed char
  fan_current_gain () = 0;

  virtual bool
  fan_current_present ();

  virtual short
  fan_current () = 0;

  virtual bool
  pump_current_present ();

  virtual short
  pump_current () = 0;

  virtual bool
  pump_threshold_present ();

  virtual short
  pump_threshold () = 0;

  virtual bool
  enabled_present ();

  virtual signed char
  enabled () = 0;

  virtual bool
  inactiv_shutdown_present ();

  virtual signed char
  inactiv_shutdown () = 0;

  virtual bool
  inactiv_emcy_present ();

  virtual signed char
  inactiv_emcy () = 0;

  virtual bool
  outval_inactiv_present ();

  virtual signed char
  outval_inactiv () = 0;

  virtual bool
  livetime_limit_present ();

  virtual signed char
  livetime_limit () = 0;

  virtual bool
  timestamp_present ();

  virtual signed char
  timestamp () = 0;

  virtual bool
  threshold_present ();

  virtual signed char
  threshold () = 0;

  virtual bool
  interval_present ();

  virtual signed char
  interval () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::byte_sskel& /* polarity */,
               ::xml_schema::byte_sskel& /* sample_rate */,
               ::xml_schema::byte_sskel& /* debounce */,
               ::xml_schema::byte_sskel& /* temp_tolerance */,
               ::xml_schema::short_sskel& /* sampling_period */,
               ::xml_schema::short_sskel& /* fan_speed */,
               ::xml_schema::short_sskel& /* fan_threshold */,
               ::xml_schema::short_sskel& /* current_gain */,
               ::xml_schema::short_sskel& /* heater_current */,
               ::xml_schema::short_sskel& /* heater_threshold */,
               ::xml_schema::short_sskel& /* current_deviation */,
               ::xml_schema::short_sskel& /* current_min_230_serial */,
               ::xml_schema::short_sskel& /* current_max_230_serial */,
               ::xml_schema::short_sskel& /* current_min_100_serial */,
               ::xml_schema::short_sskel& /* current_max_100_serial */,
               ::xml_schema::short_sskel& /* current_min_100_parallel */,
               ::xml_schema::short_sskel& /* current_max_100_parallel */,
               ::xml_schema::byte_sskel& /* pressure_tolerance */,
               ::xml_schema::byte_sskel& /* fan_current_gain */,
               ::xml_schema::short_sskel& /* fan_current */,
               ::xml_schema::short_sskel& /* pump_current */,
               ::xml_schema::short_sskel& /* pump_threshold */,
               ::xml_schema::byte_sskel& /* enabled */,
               ::xml_schema::byte_sskel& /* inactiv_shutdown */,
               ::xml_schema::byte_sskel& /* inactiv_emcy */,
               ::xml_schema::byte_sskel& /* outval_inactiv */,
               ::xml_schema::byte_sskel& /* livetime_limit */,
               ::xml_schema::byte_sskel& /* timestamp */,
               ::xml_schema::byte_sskel& /* threshold */,
               ::xml_schema::byte_sskel& /* interval */);

  // Individual attribute serializers.
  //
  void
  polarity_serializer (::xml_schema::byte_sskel&);

  void
  sample_rate_serializer (::xml_schema::byte_sskel&);

  void
  debounce_serializer (::xml_schema::byte_sskel&);

  void
  temp_tolerance_serializer (::xml_schema::byte_sskel&);

  void
  sampling_period_serializer (::xml_schema::short_sskel&);

  void
  fan_speed_serializer (::xml_schema::short_sskel&);

  void
  fan_threshold_serializer (::xml_schema::short_sskel&);

  void
  current_gain_serializer (::xml_schema::short_sskel&);

  void
  heater_current_serializer (::xml_schema::short_sskel&);

  void
  heater_threshold_serializer (::xml_schema::short_sskel&);

  void
  current_deviation_serializer (::xml_schema::short_sskel&);

  void
  current_min_230_serial_serializer (::xml_schema::short_sskel&);

  void
  current_max_230_serial_serializer (::xml_schema::short_sskel&);

  void
  current_min_100_serial_serializer (::xml_schema::short_sskel&);

  void
  current_max_100_serial_serializer (::xml_schema::short_sskel&);

  void
  current_min_100_parallel_serializer (::xml_schema::short_sskel&);

  void
  current_max_100_parallel_serializer (::xml_schema::short_sskel&);

  void
  pressure_tolerance_serializer (::xml_schema::byte_sskel&);

  void
  fan_current_gain_serializer (::xml_schema::byte_sskel&);

  void
  fan_current_serializer (::xml_schema::short_sskel&);

  void
  pump_current_serializer (::xml_schema::short_sskel&);

  void
  pump_threshold_serializer (::xml_schema::short_sskel&);

  void
  enabled_serializer (::xml_schema::byte_sskel&);

  void
  inactiv_shutdown_serializer (::xml_schema::byte_sskel&);

  void
  inactiv_emcy_serializer (::xml_schema::byte_sskel&);

  void
  outval_inactiv_serializer (::xml_schema::byte_sskel&);

  void
  livetime_limit_serializer (::xml_schema::byte_sskel&);

  void
  timestamp_serializer (::xml_schema::byte_sskel&);

  void
  threshold_serializer (::xml_schema::byte_sskel&);

  void
  interval_serializer (::xml_schema::byte_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  configurationType_sskel (::xml_schema::string_sskel* tiein);

  // Implementation.
  //
  public:
  virtual void
  pre (const ::std::string&);

  virtual void
  _serialize_attributes ();

  protected:
  configurationType_sskel* configurationType_impl_;
  configurationType_sskel (configurationType_sskel*, void*);

  protected:
  ::xml_schema::byte_sskel* polarity_serializer_;
  ::xml_schema::byte_sskel* sample_rate_serializer_;
  ::xml_schema::byte_sskel* debounce_serializer_;
  ::xml_schema::byte_sskel* temp_tolerance_serializer_;
  ::xml_schema::short_sskel* sampling_period_serializer_;
  ::xml_schema::short_sskel* fan_speed_serializer_;
  ::xml_schema::short_sskel* fan_threshold_serializer_;
  ::xml_schema::short_sskel* current_gain_serializer_;
  ::xml_schema::short_sskel* heater_current_serializer_;
  ::xml_schema::short_sskel* heater_threshold_serializer_;
  ::xml_schema::short_sskel* current_deviation_serializer_;
  ::xml_schema::short_sskel* current_min_230_serial_serializer_;
  ::xml_schema::short_sskel* current_max_230_serial_serializer_;
  ::xml_schema::short_sskel* current_min_100_serial_serializer_;
  ::xml_schema::short_sskel* current_max_100_serial_serializer_;
  ::xml_schema::short_sskel* current_min_100_parallel_serializer_;
  ::xml_schema::short_sskel* current_max_100_parallel_serializer_;
  ::xml_schema::byte_sskel* pressure_tolerance_serializer_;
  ::xml_schema::byte_sskel* fan_current_gain_serializer_;
  ::xml_schema::short_sskel* fan_current_serializer_;
  ::xml_schema::short_sskel* pump_current_serializer_;
  ::xml_schema::short_sskel* pump_threshold_serializer_;
  ::xml_schema::byte_sskel* enabled_serializer_;
  ::xml_schema::byte_sskel* inactiv_shutdown_serializer_;
  ::xml_schema::byte_sskel* inactiv_emcy_serializer_;
  ::xml_schema::byte_sskel* outval_inactiv_serializer_;
  ::xml_schema::byte_sskel* livetime_limit_serializer_;
  ::xml_schema::byte_sskel* timestamp_serializer_;
  ::xml_schema::byte_sskel* threshold_serializer_;
  ::xml_schema::byte_sskel* interval_serializer_;
};

class limitswitchType_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::limitswitchType&) = 0;

  // Attributes.
  //
  virtual bool
  index_present ();

  virtual signed char
  index () = 0;

  // Elements.
  //
  virtual const ::configurationType&
  configuration () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::byte_sskel& /* index */,
               ::configurationType_sskel& /* configuration */);

  // Individual attribute serializers.
  //
  void
  index_serializer (::xml_schema::byte_sskel&);

  // Individual element serializers.
  //
  void
  configuration_serializer (::configurationType_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  limitswitchType_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_attributes ();

  virtual void
  _serialize_content ();

  protected:
  limitswitchType_sskel* limitswitchType_impl_;
  limitswitchType_sskel (limitswitchType_sskel*, void*);

  protected:
  ::xml_schema::byte_sskel* index_serializer_;
  ::configurationType_sskel* configuration_serializer_;
};

class position_codeType_sskel: public ::xml_schema::string_sskel
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::position_codeType&) = 0;

  // Attributes.
  //
  virtual bool
  value_present ();

  virtual signed char
  value () = 0;

  virtual bool
  stop_present ();

  virtual signed char
  stop () = 0;

  virtual bool
  stop_dir_present ();

  virtual ::std::string
  stop_dir () = 0;

  virtual bool
  position_present ();

  virtual signed char
  position () = 0;

  virtual bool
  width_present ();

  virtual signed char
  width () = 0;

  virtual bool
  deviation_present ();

  virtual signed char
  deviation () = 0;

  virtual bool
  dir_check_present ();

  virtual signed char
  dir_check () = 0;

  virtual bool
  hit_skip_present ();

  virtual signed char
  hit_skip () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::byte_sskel& /* value */,
               ::xml_schema::byte_sskel& /* stop */,
               ::xml_schema::string_sskel& /* stop_dir */,
               ::xml_schema::byte_sskel& /* position */,
               ::xml_schema::byte_sskel& /* width */,
               ::xml_schema::byte_sskel& /* deviation */,
               ::xml_schema::byte_sskel& /* dir_check */,
               ::xml_schema::byte_sskel& /* hit_skip */);

  // Individual attribute serializers.
  //
  void
  value_serializer (::xml_schema::byte_sskel&);

  void
  stop_serializer (::xml_schema::byte_sskel&);

  void
  stop_dir_serializer (::xml_schema::string_sskel&);

  void
  position_serializer (::xml_schema::byte_sskel&);

  void
  width_serializer (::xml_schema::byte_sskel&);

  void
  deviation_serializer (::xml_schema::byte_sskel&);

  void
  dir_check_serializer (::xml_schema::byte_sskel&);

  void
  hit_skip_serializer (::xml_schema::byte_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  position_codeType_sskel (::xml_schema::string_sskel* tiein);

  // Implementation.
  //
  public:
  virtual void
  pre (const ::std::string&);

  virtual void
  _serialize_attributes ();

  protected:
  position_codeType_sskel* position_codeType_impl_;
  position_codeType_sskel (position_codeType_sskel*, void*);

  protected:
  ::xml_schema::byte_sskel* value_serializer_;
  ::xml_schema::byte_sskel* stop_serializer_;
  ::xml_schema::string_sskel* stop_dir_serializer_;
  ::xml_schema::byte_sskel* position_serializer_;
  ::xml_schema::byte_sskel* width_serializer_;
  ::xml_schema::byte_sskel* deviation_serializer_;
  ::xml_schema::byte_sskel* dir_check_serializer_;
  ::xml_schema::byte_sskel* hit_skip_serializer_;
};

class limitswitchesType_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::limitswitchesType&) = 0;

  // Elements.
  //
  virtual bool
  limitswitch_next ();

  virtual const ::limitswitchType&
  limitswitch () = 0;

  virtual bool
  position_code_next ();

  virtual const ::position_codeType&
  position_code () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::limitswitchType_sskel& /* limitswitch */,
               ::position_codeType_sskel& /* position_code */);

  // Individual element serializers.
  //
  void
  limitswitch_serializer (::limitswitchType_sskel&);

  void
  position_code_serializer (::position_codeType_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  limitswitchesType_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_content ();

  protected:
  limitswitchesType_sskel* limitswitchesType_impl_;
  limitswitchesType_sskel (limitswitchesType_sskel*, void*);

  protected:
  ::limitswitchType_sskel* limitswitch_serializer_;
  ::position_codeType_sskel* position_code_serializer_;
};

class position_coverageType_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::position_coverageType&) = 0;

  // Elements.
  //
  virtual const ::encoderType&
  encoder () = 0;

  virtual const ::limitswitchesType&
  limitswitches () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::encoderType_sskel& /* encoder */,
               ::limitswitchesType_sskel& /* limitswitches */);

  // Individual element serializers.
  //
  void
  encoder_serializer (::encoderType_sskel&);

  void
  limitswitches_serializer (::limitswitchesType_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  position_coverageType_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_content ();

  protected:
  position_coverageType_sskel* position_coverageType_impl_;
  position_coverageType_sskel (position_coverageType_sskel*, void*);

  protected:
  ::encoderType_sskel* encoder_serializer_;
  ::limitswitchesType_sskel* limitswitches_serializer_;
};

class supervisionType_sskel: public ::xml_schema::string_sskel
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::supervisionType&) = 0;

  // Attributes.
  //
  virtual bool
  steploss_warn_limit_present ();

  virtual signed char
  steploss_warn_limit () = 0;

  virtual bool
  steploss_error_limit_present ();

  virtual signed char
  steploss_error_limit () = 0;

  virtual bool
  current_limit_present ();

  virtual short
  current_limit () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::byte_sskel& /* steploss_warn_limit */,
               ::xml_schema::byte_sskel& /* steploss_error_limit */,
               ::xml_schema::short_sskel& /* current_limit */);

  // Individual attribute serializers.
  //
  void
  steploss_warn_limit_serializer (::xml_schema::byte_sskel&);

  void
  steploss_error_limit_serializer (::xml_schema::byte_sskel&);

  void
  current_limit_serializer (::xml_schema::short_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  supervisionType_sskel (::xml_schema::string_sskel* tiein);

  // Implementation.
  //
  public:
  virtual void
  pre (const ::std::string&);

  virtual void
  _serialize_attributes ();

  protected:
  supervisionType_sskel* supervisionType_impl_;
  supervisionType_sskel (supervisionType_sskel*, void*);

  protected:
  ::xml_schema::byte_sskel* steploss_warn_limit_serializer_;
  ::xml_schema::byte_sskel* steploss_error_limit_serializer_;
  ::xml_schema::short_sskel* current_limit_serializer_;
};

class driverType_sskel: public ::xml_schema::string_sskel
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::driverType&) = 0;

  // Attributes.
  //
  virtual bool
  type_present ();

  virtual ::std::string
  type () = 0;

  virtual bool
  reg_chopConf_present ();

  virtual ::std::string
  reg_chopConf () = 0;

  virtual bool
  reg_smartEn_present ();

  virtual ::std::string
  reg_smartEn () = 0;

  virtual bool
  reg_sgcsConf_present ();

  virtual ::std::string
  reg_sgcsConf () = 0;

  virtual bool
  reg_drvConf_present ();

  virtual ::std::string
  reg_drvConf () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::string_sskel& /* type */,
               ::xml_schema::string_sskel& /* reg_chopConf */,
               ::xml_schema::string_sskel& /* reg_smartEn */,
               ::xml_schema::string_sskel& /* reg_sgcsConf */,
               ::xml_schema::string_sskel& /* reg_drvConf */);

  // Individual attribute serializers.
  //
  void
  type_serializer (::xml_schema::string_sskel&);

  void
  reg_chopConf_serializer (::xml_schema::string_sskel&);

  void
  reg_smartEn_serializer (::xml_schema::string_sskel&);

  void
  reg_sgcsConf_serializer (::xml_schema::string_sskel&);

  void
  reg_drvConf_serializer (::xml_schema::string_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  driverType_sskel (::xml_schema::string_sskel* tiein);

  // Implementation.
  //
  public:
  virtual void
  pre (const ::std::string&);

  virtual void
  _serialize_attributes ();

  protected:
  driverType_sskel* driverType_impl_;
  driverType_sskel (driverType_sskel*, void*);

  protected:
  ::xml_schema::string_sskel* type_serializer_;
  ::xml_schema::string_sskel* reg_chopConf_serializer_;
  ::xml_schema::string_sskel* reg_smartEn_serializer_;
  ::xml_schema::string_sskel* reg_sgcsConf_serializer_;
  ::xml_schema::string_sskel* reg_drvConf_serializer_;
};

class motion_profileType_sskel: public ::xml_schema::string_sskel
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::motion_profileType&) = 0;

  // Attributes.
  //
  virtual bool
  speed_min_present ();

  virtual signed char
  speed_min () = 0;

  virtual bool
  speed_max_present ();

  virtual short
  speed_max () = 0;

  virtual bool
  acc_present ();

  virtual short
  acc () = 0;

  virtual bool
  dec_present ();

  virtual short
  dec () = 0;

  virtual bool
  acc_time_present ();

  virtual signed char
  acc_time () = 0;

  virtual bool
  dec_time_present ();

  virtual signed char
  dec_time () = 0;

  virtual bool
  micro_steps_present ();

  virtual signed char
  micro_steps () = 0;

  virtual bool
  ramp_type_present ();

  virtual signed char
  ramp_type () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::byte_sskel& /* speed_min */,
               ::xml_schema::short_sskel& /* speed_max */,
               ::xml_schema::short_sskel& /* acc */,
               ::xml_schema::short_sskel& /* dec */,
               ::xml_schema::byte_sskel& /* acc_time */,
               ::xml_schema::byte_sskel& /* dec_time */,
               ::xml_schema::byte_sskel& /* micro_steps */,
               ::xml_schema::byte_sskel& /* ramp_type */);

  // Individual attribute serializers.
  //
  void
  speed_min_serializer (::xml_schema::byte_sskel&);

  void
  speed_max_serializer (::xml_schema::short_sskel&);

  void
  acc_serializer (::xml_schema::short_sskel&);

  void
  dec_serializer (::xml_schema::short_sskel&);

  void
  acc_time_serializer (::xml_schema::byte_sskel&);

  void
  dec_time_serializer (::xml_schema::byte_sskel&);

  void
  micro_steps_serializer (::xml_schema::byte_sskel&);

  void
  ramp_type_serializer (::xml_schema::byte_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  motion_profileType_sskel (::xml_schema::string_sskel* tiein);

  // Implementation.
  //
  public:
  virtual void
  pre (const ::std::string&);

  virtual void
  _serialize_attributes ();

  protected:
  motion_profileType_sskel* motion_profileType_impl_;
  motion_profileType_sskel (motion_profileType_sskel*, void*);

  protected:
  ::xml_schema::byte_sskel* speed_min_serializer_;
  ::xml_schema::short_sskel* speed_max_serializer_;
  ::xml_schema::short_sskel* acc_serializer_;
  ::xml_schema::short_sskel* dec_serializer_;
  ::xml_schema::byte_sskel* acc_time_serializer_;
  ::xml_schema::byte_sskel* dec_time_serializer_;
  ::xml_schema::byte_sskel* micro_steps_serializer_;
  ::xml_schema::byte_sskel* ramp_type_serializer_;
};

class motion_profilesType_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::motion_profilesType&) = 0;

  // Elements.
  //
  virtual bool
  motion_profile_next ();

  virtual const ::motion_profileType&
  motion_profile () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::motion_profileType_sskel& /* motion_profile */);

  // Individual element serializers.
  //
  void
  motion_profile_serializer (::motion_profileType_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  motion_profilesType_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_content ();

  protected:
  motion_profilesType_sskel* motion_profilesType_impl_;
  motion_profilesType_sskel (motion_profilesType_sskel*, void*);

  protected:
  ::motion_profileType_sskel* motion_profile_serializer_;
};

class pid_controllerType_sskel: public ::xml_schema::string_sskel
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::pid_controllerType&) = 0;

  // Attributes.
  //
  virtual bool
  max_temperature_present ();

  virtual short
  max_temperature () = 0;

  virtual bool
  controller_gain_present ();

  virtual short
  controller_gain () = 0;

  virtual bool
  reset_time_present ();

  virtual short
  reset_time () = 0;

  virtual bool
  derivative_time_present ();

  virtual signed char
  derivative_time () = 0;

  virtual bool
  max_pressure_present ();

  virtual signed char
  max_pressure () = 0;

  virtual bool
  min_pressure_present ();

  virtual signed char
  min_pressure () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::short_sskel& /* max_temperature */,
               ::xml_schema::short_sskel& /* controller_gain */,
               ::xml_schema::short_sskel& /* reset_time */,
               ::xml_schema::byte_sskel& /* derivative_time */,
               ::xml_schema::byte_sskel& /* max_pressure */,
               ::xml_schema::byte_sskel& /* min_pressure */);

  // Individual attribute serializers.
  //
  void
  max_temperature_serializer (::xml_schema::short_sskel&);

  void
  controller_gain_serializer (::xml_schema::short_sskel&);

  void
  reset_time_serializer (::xml_schema::short_sskel&);

  void
  derivative_time_serializer (::xml_schema::byte_sskel&);

  void
  max_pressure_serializer (::xml_schema::byte_sskel&);

  void
  min_pressure_serializer (::xml_schema::byte_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  pid_controllerType_sskel (::xml_schema::string_sskel* tiein);

  // Implementation.
  //
  public:
  virtual void
  pre (const ::std::string&);

  virtual void
  _serialize_attributes ();

  protected:
  pid_controllerType_sskel* pid_controllerType_impl_;
  pid_controllerType_sskel (pid_controllerType_sskel*, void*);

  protected:
  ::xml_schema::short_sskel* max_temperature_serializer_;
  ::xml_schema::short_sskel* controller_gain_serializer_;
  ::xml_schema::short_sskel* reset_time_serializer_;
  ::xml_schema::byte_sskel* derivative_time_serializer_;
  ::xml_schema::byte_sskel* max_pressure_serializer_;
  ::xml_schema::byte_sskel* min_pressure_serializer_;
};

class pid_controllersType_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::pid_controllersType&) = 0;

  // Elements.
  //
  virtual const ::pid_controllerType&
  pid_controller () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::pid_controllerType_sskel& /* pid_controller */);

  // Individual element serializers.
  //
  void
  pid_controller_serializer (::pid_controllerType_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  pid_controllersType_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_content ();

  protected:
  pid_controllersType_sskel* pid_controllersType_impl_;
  pid_controllersType_sskel (pid_controllersType_sskel*, void*);

  protected:
  ::pid_controllerType_sskel* pid_controller_serializer_;
};

class pwm_controllerType_sskel: public ::xml_schema::string_sskel
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::pwm_controllerType&) = 0;

  // Attributes.
  //
  virtual bool
  max_actuating_value_present ();

  virtual short
  max_actuating_value () = 0;

  virtual bool
  min_actuating_value_present ();

  virtual short
  min_actuating_value () = 0;

  virtual bool
  max_pwm_duty_present ();

  virtual signed char
  max_pwm_duty () = 0;

  virtual bool
  min_pwm_duty_present ();

  virtual signed char
  min_pwm_duty () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::short_sskel& /* max_actuating_value */,
               ::xml_schema::short_sskel& /* min_actuating_value */,
               ::xml_schema::byte_sskel& /* max_pwm_duty */,
               ::xml_schema::byte_sskel& /* min_pwm_duty */);

  // Individual attribute serializers.
  //
  void
  max_actuating_value_serializer (::xml_schema::short_sskel&);

  void
  min_actuating_value_serializer (::xml_schema::short_sskel&);

  void
  max_pwm_duty_serializer (::xml_schema::byte_sskel&);

  void
  min_pwm_duty_serializer (::xml_schema::byte_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  pwm_controllerType_sskel (::xml_schema::string_sskel* tiein);

  // Implementation.
  //
  public:
  virtual void
  pre (const ::std::string&);

  virtual void
  _serialize_attributes ();

  protected:
  pwm_controllerType_sskel* pwm_controllerType_impl_;
  pwm_controllerType_sskel (pwm_controllerType_sskel*, void*);

  protected:
  ::xml_schema::short_sskel* max_actuating_value_serializer_;
  ::xml_schema::short_sskel* min_actuating_value_serializer_;
  ::xml_schema::byte_sskel* max_pwm_duty_serializer_;
  ::xml_schema::byte_sskel* min_pwm_duty_serializer_;
};

class functionmoduleType_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::functionmoduleType&) = 0;

  // Attributes.
  //
  virtual bool
  type_present ();

  virtual ::std::string
  type () = 0;

  virtual bool
  key_present ();

  virtual ::std::string
  key () = 0;

  virtual bool
  name_present ();

  virtual ::std::string
  name () = 0;

  virtual bool
  interface_present ();

  virtual signed char
  interface () = 0;

  virtual bool
  fct_instanceID_present ();

  virtual ::std::string
  fct_instanceID () = 0;

  // Elements.
  //
  virtual bool
  rotation_present ();

  virtual const ::rotationType&
  rotation () = 0;

  virtual bool
  reference_run_present ();

  virtual const ::reference_runType&
  reference_run () = 0;

  virtual bool
  position_coverage_present ();

  virtual const ::position_coverageType&
  position_coverage () = 0;

  virtual bool
  supervision_present ();

  virtual const ::supervisionType&
  supervision () = 0;

  virtual bool
  driver_present ();

  virtual const ::driverType&
  driver () = 0;

  virtual bool
  motion_profiles_present ();

  virtual const ::motion_profilesType&
  motion_profiles () = 0;

  virtual bool
  configuration_present ();

  virtual const ::configurationType&
  configuration () = 0;

  virtual bool
  pid_controllers_present ();

  virtual const ::pid_controllersType&
  pid_controllers () = 0;

  virtual bool
  pwm_controller_present ();

  virtual const ::pwm_controllerType&
  pwm_controller () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::string_sskel& /* type */,
               ::xml_schema::string_sskel& /* key */,
               ::xml_schema::string_sskel& /* name */,
               ::xml_schema::byte_sskel& /* interface */,
               ::xml_schema::string_sskel& /* fct_instanceID */,
               ::rotationType_sskel& /* rotation */,
               ::reference_runType_sskel& /* reference_run */,
               ::position_coverageType_sskel& /* position_coverage */,
               ::supervisionType_sskel& /* supervision */,
               ::driverType_sskel& /* driver */,
               ::motion_profilesType_sskel& /* motion_profiles */,
               ::configurationType_sskel& /* configuration */,
               ::pid_controllersType_sskel& /* pid_controllers */,
               ::pwm_controllerType_sskel& /* pwm_controller */);

  // Individual attribute serializers.
  //
  void
  type_serializer (::xml_schema::string_sskel&);

  void
  key_serializer (::xml_schema::string_sskel&);

  void
  name_serializer (::xml_schema::string_sskel&);

  void
  interface_serializer (::xml_schema::byte_sskel&);

  void
  fct_instanceID_serializer (::xml_schema::string_sskel&);

  // Individual element serializers.
  //
  void
  rotation_serializer (::rotationType_sskel&);

  void
  reference_run_serializer (::reference_runType_sskel&);

  void
  position_coverage_serializer (::position_coverageType_sskel&);

  void
  supervision_serializer (::supervisionType_sskel&);

  void
  driver_serializer (::driverType_sskel&);

  void
  motion_profiles_serializer (::motion_profilesType_sskel&);

  void
  configuration_serializer (::configurationType_sskel&);

  void
  pid_controllers_serializer (::pid_controllersType_sskel&);

  void
  pwm_controller_serializer (::pwm_controllerType_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  functionmoduleType_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_attributes ();

  virtual void
  _serialize_content ();

  protected:
  functionmoduleType_sskel* functionmoduleType_impl_;
  functionmoduleType_sskel (functionmoduleType_sskel*, void*);

  protected:
  ::xml_schema::string_sskel* type_serializer_;
  ::xml_schema::string_sskel* key_serializer_;
  ::xml_schema::string_sskel* name_serializer_;
  ::xml_schema::byte_sskel* interface_serializer_;
  ::xml_schema::string_sskel* fct_instanceID_serializer_;
  ::rotationType_sskel* rotation_serializer_;
  ::reference_runType_sskel* reference_run_serializer_;
  ::position_coverageType_sskel* position_coverage_serializer_;
  ::supervisionType_sskel* supervision_serializer_;
  ::driverType_sskel* driver_serializer_;
  ::motion_profilesType_sskel* motion_profiles_serializer_;
  ::configurationType_sskel* configuration_serializer_;
  ::pid_controllersType_sskel* pid_controllers_serializer_;
  ::pwm_controllerType_sskel* pwm_controller_serializer_;
};

class functionmodulesType_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::functionmodulesType&) = 0;

  // Elements.
  //
  virtual bool
  functionmodule_next ();

  virtual const ::functionmoduleType&
  functionmodule () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::functionmoduleType_sskel& /* functionmodule */);

  // Individual element serializers.
  //
  void
  functionmodule_serializer (::functionmoduleType_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  functionmodulesType_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_content ();

  protected:
  functionmodulesType_sskel* functionmodulesType_impl_;
  functionmodulesType_sskel (functionmodulesType_sskel*, void*);

  protected:
  ::functionmoduleType_sskel* functionmodule_serializer_;
};

class slaveType_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::slaveType&) = 0;

  // Attributes.
  //
  virtual bool
  type_present ();

  virtual ::std::string
  type () = 0;

  virtual bool
  key_present ();

  virtual ::std::string
  key () = 0;

  virtual bool
  name_present ();

  virtual ::std::string
  name () = 0;

  virtual bool
  virtual__present ();

  virtual signed char
  virtual_ () = 0;

  // Elements.
  //
  virtual signed char
  nodetype () = 0;

  virtual signed char
  nodeindex () = 0;

  virtual const ::functionmodulesType&
  functionmodules () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::string_sskel& /* type */,
               ::xml_schema::string_sskel& /* key */,
               ::xml_schema::string_sskel& /* name */,
               ::xml_schema::byte_sskel& /* virtual */,
               ::xml_schema::byte_sskel& /* nodetype */,
               ::xml_schema::byte_sskel& /* nodeindex */,
               ::functionmodulesType_sskel& /* functionmodules */);

  // Individual attribute serializers.
  //
  void
  type_serializer (::xml_schema::string_sskel&);

  void
  key_serializer (::xml_schema::string_sskel&);

  void
  name_serializer (::xml_schema::string_sskel&);

  void
  virtual__serializer (::xml_schema::byte_sskel&);

  // Individual element serializers.
  //
  void
  nodetype_serializer (::xml_schema::byte_sskel&);

  void
  nodeindex_serializer (::xml_schema::byte_sskel&);

  void
  functionmodules_serializer (::functionmodulesType_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  slaveType_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_attributes ();

  virtual void
  _serialize_content ();

  protected:
  slaveType_sskel* slaveType_impl_;
  slaveType_sskel (slaveType_sskel*, void*);

  protected:
  ::xml_schema::string_sskel* type_serializer_;
  ::xml_schema::string_sskel* key_serializer_;
  ::xml_schema::string_sskel* name_serializer_;
  ::xml_schema::byte_sskel* virtual__serializer_;
  ::xml_schema::byte_sskel* nodetype_serializer_;
  ::xml_schema::byte_sskel* nodeindex_serializer_;
  ::functionmodulesType_sskel* functionmodules_serializer_;
};

class parameter_slavesType_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::parameter_slavesType&) = 0;

  // Elements.
  //
  virtual bool
  slave_next ();

  virtual const ::slaveType&
  slave () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::slaveType_sskel& /* slave */);

  // Individual element serializers.
  //
  void
  slave_serializer (::slaveType_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  parameter_slavesType_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_content ();

  protected:
  parameter_slavesType_sskel* parameter_slavesType_impl_;
  parameter_slavesType_sskel (parameter_slavesType_sskel*, void*);

  protected:
  ::slaveType_sskel* slave_serializer_;
};

class hwconfigType_sskel: public ::xsde::cxx::serializer::validating::complex_content
{
  public:
  // Serializer callbacks. Override them in your implementation.
  //

  virtual void
  pre (const ::hwconfigType&) = 0;

  // Attributes.
  //
  virtual bool
  version_present ();

  virtual float
  version () = 0;

  // Elements.
  //
  virtual const ::parameter_masterType&
  parameter_master () = 0;

  virtual const ::parameter_slavesType&
  parameter_slaves () = 0;

  virtual const ::devicesType&
  devices () = 0;

  // virtual void
  // post ();

  // Serializer construction API.
  //
  void
  serializers (::xml_schema::float_sskel& /* version */,
               ::parameter_masterType_sskel& /* parameter_master */,
               ::parameter_slavesType_sskel& /* parameter_slaves */,
               ::devicesType_sskel& /* devices */);

  // Individual attribute serializers.
  //
  void
  version_serializer (::xml_schema::float_sskel&);

  // Individual element serializers.
  //
  void
  parameter_master_serializer (::parameter_masterType_sskel&);

  void
  parameter_slaves_serializer (::parameter_slavesType_sskel&);

  void
  devices_serializer (::devicesType_sskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  hwconfigType_sskel ();

  // Implementation.
  //
  public:
  virtual void
  _serialize_attributes ();

  virtual void
  _serialize_content ();

  protected:
  hwconfigType_sskel* hwconfigType_impl_;
  hwconfigType_sskel (hwconfigType_sskel*, void*);

  protected:
  ::xml_schema::float_sskel* version_serializer_;
  ::parameter_masterType_sskel* parameter_master_serializer_;
  ::parameter_slavesType_sskel* parameter_slaves_serializer_;
  ::devicesType_sskel* devices_serializer_;
};

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // HWCONFIG_SSKEL_HPP
