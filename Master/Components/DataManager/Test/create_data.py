#!/usr/bin/env python
# -*- coding: utf-8 -*-
# R.Wobst, @(#) Nov 24 2010, 16:59:26
#
# Create C++ data definitions from error output;
# usage: create_data.py >data.cpp
# XML test files must reside in parent directory

# TODO: pickle actual dirs, load if args are given --> overwrite

import sys, os, os.path, time, ConfigParser

PROG = 'gentest'
wrt = sys.stdout.write

def fatal(s):
    sys.stderr.write(s)
    sys.exit(1)

if len(sys.argv) < 2:
    fatal("Usage: %s _config_file_" % os.path.basename(sys.argv[0]))

cfg = ConfigParser.ConfigParser()
cfg.read(sys.argv[1])
if not cfg:
    fatal("error processing %s - stop.\n" % sys.argv[1])

if not cfg.has_section('CONFIG') or not cfg.has_option('CONFIG', 'dir') \
        or not cfg.has_option('CONFIG', 'testfct'):
    fatal('missing option "dir" or "testfct" in section CONFIG - stop.\n')

subdir = cfg.get('CONFIG', 'dir')
testfct = cfg.get('CONFIG', 'testfct')

namlst = []

wrt("""// *** This file was generated by %s
// %s

#include "DataManagement/Test/TestXMLParser.h"

namespace DataManagement {

void TestXML::%s()
{
""" % (os.path.basename(sys.argv[0]), time.asctime(), testfct))

## @brief write expected output
#
# @param fd - file descriptor from popen with test command

def write_exp_out(fd):
    begl = '"'
    for lin in fd:
        wrt(begl + lin.replace('\n', r'\n').replace('\t', r'\t') + '"\n')
        begl = '\t"'

    if begl != '"':
        wrt('\t);\n\n')
    else:
        wrt('"");\n\n')

for roottag in cfg.sections():
    if roottag == 'CONFIG' or roottag == 'MULTI':
        continue

    if not cfg.has_option(roottag, 'files'):
        fatal('missing option "files" in section %s - stop.\n' % roottag)

    # check output file for file
    for fil in cfg.get(roottag, 'files').split():
        name = fil[:-4]
        namlst.append((name, name))
        wrt('QString expect_%s =\n\tQString(' % name)

        # execute program, catch output
        fd = os.popen('%s/%s %s/%s' % \
                (subdir, PROG, subdir, fil), 'r')

        write_exp_out(fd)

if 'MULTI' in cfg.sections():   # later: MULTI*
    # join output for several files
    wrt('QString expect_MULTI =\n\tQString(')
    testargs = ''

    space = ''
    for fil in cfg.get('MULTI', 'files').split():
        testargs += '%s%s/%s' % (space, subdir, fil)
        space = ' '

    namlst.append(('MULTI', testargs))
    # execute program, catch output
    fd = os.popen('%s/%s "%s"' % (subdir, PROG, testargs), 'r')
    write_exp_out(fd)

wrt("""
    QTest::addColumn<QString>("testname");
    QTest::addColumn<QString>("expected");

""")

for (testname, arg) in namlst:
    wrt('QTest::newRow("%s") << "%s" << expect_%s;\n' %
            (testname, arg, testname))

wrt("""}

}       // end namespace DataManagement
""")
