'*****************************************************************************/
'*  File: TestFramework.pem
'* 
'*  Brief: Test Framework for Leica Slave Boards
'*
'*  Version: 0.1
'*  Date:    23.02.2011
'*  Author:  Martin Scherer
'*
'*  Description:
'*
'*      This script includes classes that help with the automatic creation and
'*      execution of test cases for the Leica slave software. Every case
'*      consists of one or more test steps. Within each step at least one CAN
'*      message has to be sent to the slave board that runs the software. 
'*      After that, the script waits for incoming CAN messages and evaluates
'*      the data they contain.
'*      
'*  Company:
'*
'*      Leica Biosystems Nussloch GmbH
'* 
'*  (C) Copyright 2010 by Leica Biosystems Nussloch GmbH. All rights reserved.
'*  This is unpublished proprietary source code of Leica. The copyright notice 
'*  does not evidence any actual or intended publication.
'*
'****************************************************************************/

'------------------------------------------------------------------------------
'FILE DESCRIPTION: Test Framework for Leica Slave Boards
'------------------------------------------------------------------------------

'*****************************************************************************/
'* Global Variables 
'*****************************************************************************/

' The name of the symbol collection
Dim SymbolCollection
' The name of the target board
Dim TargetBoard
' Number of errors found during tests
Dim ErrorCount
ErrorCount = 0

'*****************************************************************************/
'* Private Type Definitions 
'*****************************************************************************/

'*****************************************************************************/
'*
'*  CAN message class
'*  
'*      An instance of this class represents a single CAN message. There is no
'*      difference if this is an incoming or an outgoing message. Before a
'*      message can be received or transmitted, its symbol name has to be
'*      specified. After that, the data values must be defined for outgoing
'*      messages. The class is also able to check, if incoming messages
'*      contain the expected data values.
'*
'*****************************************************************************/

Class CanMessage
    Private SymbolName       ' Symbol name of the message
    Private Names            ' Array of variable names
    Private Values           ' Array of expected values
    Private sym              ' Symbol object
    Private var              ' Variables object

'*****************************************************************************/
'*
'*  Constructor of the class
'*  
'*      This function initializes the arrays containing the information for
'*      the expected value check at the end of a test case.
'*
'*****************************************************************************/
    Private Sub Class_Initialize
        Names = Array()
        Values = Array()
    End Sub

'*****************************************************************************/
'*
'*  Adds data values
'*  
'*      This method adds the name and the value for an expected data value
'*      and the data that is going to be sent within a transmit message. The
'*      expected data is compared to the data of the incoming message at the
'*      end of every test step.
'*
'*****************************************************************************/
    Public Sub AddData(n, v)
        Redim Preserve Names(UBound(Names)+1)
        Redim Preserve Values(UBound(Values)+1)
        Names(UBound(Names)) = n
        Values(UBound(Values)) = v
    End Sub

'*****************************************************************************/
'*
'*  Compares expected data to real data
'*  
'*      This function compares the expected data to the data in the real
'*      message received from the CAN bus interface. It returns whether the
'*      check was successful or not.
'*
'*  Returns: True (sucessful) or False (failed)
'*
'*****************************************************************************/    
    Private Function CheckData(variables)
        Dim Success
        Success = True
        For i=0 to UBound(Names)
            For Each item In variables
                If item = variables(Names(i)) Then
                    If variables(Names(i)).Value <> Values(i) Then
                        Success = False
                    End If
                End If
            Next
        Next
        CheckData = Success
    End Function

'*****************************************************************************/
'*
'*  Sets the message symbol
'*  
'*      This method sets the symbol name for incoming and outgoing CAN
'*      messages. The name must not contain the whole symbol name. Only the
'*      part behind the two colons is required, e.g. MsgSysAckHardwareID.
'*
'*****************************************************************************/    
    Public Sub SetSymbol(name)
        SymbolName = TargetBoard & "::" & name
        Set sym = SymbolsManager(SymbolCollection).Item(SymbolName)
        Set var = sym.Multiplexers("<Empty>").Variables
    End Sub

'*****************************************************************************/
'*
'*  Transmit an outgoing message
'*  
'*      This funtion simply sends a prepared outgoing message.
'*
'*****************************************************************************/      
    Public Sub Transmit()
        For i=0 to UBound(Names)
            var(Names(i)).AutoTransmit = 0
            var(Names(i)).Value = Values(i)
        Next
        sym.Multiplexers("<Empty>").Send 1
        PrintToOutputWindow VBTab&VBTab&"Sending Message: " & SymbolName
    End Sub

'*****************************************************************************/
'*
'*  Waits for an icoming message
'*  
'*      This funtion waits for the reception of an incoming message that
'*      matches the symbol ID defined in this instance. When such a message
'*      is never returned, this method waits for one second and returns a
'*      timeout error after that. This can be considered a failed test step
'*      then.
'*
'*  Returns: True (sucessful) or False (failed)
'*
'*****************************************************************************/     
    Public Function Receive()
        Dim StartTime
        Dim EndTime
        Dim Found
        Dim Success
        StartTime = Timer()
        Found = False
        Success = True
        Dim msg
        While Found = False
            For Each msg In Connections.ReceiveMessages
                If msg.Symbol = SymbolName Then
                    If CheckData(msg.Symbol.Multiplexers("<Empty>").Variables) = True Then
                        PrintToOutputWindow VBTab&VBTab&"Receiving Message: " & SymbolName
                        PrintToOutputWindow VBTab&VBTab&"Data check successful"
                        Found = True
                    End If
                End If
            Next
            EndTime = Timer()
            If EndTime > StartTime + 1 Then
                Found = True
                Success = False
                PrintToOutputWindow VBTab&VBTab&"Timeout for message: " & SymbolName
            End If
        Wend
        Receive = Success
    End Function
End Class


'*****************************************************************************/
'*
'*  Test step class
'*  
'*      An instance of this class represents a single test step. Each step 
'*      consists of several incoming and outgoing CAN messages and an ID that
'*      should match the oficial ID of the test step.
'*
'*****************************************************************************/

Class TestStep
    Private Id            ' ID of the test step
    Private TxMessages    ' Transmit message queue
    Private RxMessages    ' Receive message queue

'*****************************************************************************/
'*
'*  Constructor of the class
'*  
'*      This function initializes the arrays representing the message queues.
'*
'*****************************************************************************/    
    Private Sub Class_Initialize
        TxMessages = Array()
        RxMessages = Array()
    End Sub

'*****************************************************************************/
'*
'*  Sets the step ID
'*  
'*      This function sets the ID of the test step. The ID should match the
'*      one in the offcial test plan.
'*
'*****************************************************************************/
    Public Sub SetId(i)
        Id = i
    End Sub

'*****************************************************************************/
'*
'*  Adds message to transmit queue
'*  
'*      This function adds a message to the transmit queue.
'*
'*****************************************************************************/
    Public Sub AddTxMessage(message)
        Redim Preserve TxMessages(UBound(TxMessages)+1)
        Set TxMessages(UBound(TxMessages)) = message
    End Sub

'*****************************************************************************/
'*
'*  Adds message to receive queue
'*  
'*      This function adds a message to the receive queue.
'*
'*****************************************************************************/
    Public Sub AddRxMessage(message)
        Redim Preserve RxMessages(UBound(RxMessages)+1)
        Set RxMessages(UBound(RxMessages)) = message
    End Sub

'*****************************************************************************/
'*
'*  Executes the test step
'*  
'*      This function executes the test. First, It clears the message buffer. 
'*      After that, it sends CAN messages to the slave board and receives the
'*      responses. Then it checks the incoming data values for correctness.
'*
'*  Returns: True (sucessful) or False (failed)
'*
'*****************************************************************************/
    Public Function Execute()
        Dim Success
        Dim Temp
        Success = True
        PrintToOutputWindow VBTab&"Starting test step: " & Id
        Connections.TransmitMessages.clear
        Connections.ReceiveMessages.clear
        For Each Message In TxMessages
            Message.Transmit
        Next
        For Each Message In RxMessages
            Temp = Message.Receive
            If Temp = False Then
                Success = False
            End If
        Next      
        WaitSeconds 1
        If UBound(RxMessages)+1 < Connections.ReceiveMessages.Count Then
            PrintToOutputWindow VBTab&VBTab&"Found unexpected message"
            Success = False
        End If
        If Success = True Then
            PrintToOutputWindow VBTab&"Finished test step successfully: " & Id
        Else
            ErrorCount = ErrorCount + 1
            PrintToOutputWindow VBTab&"Finished test step with error: " & Id
        End If
        Execute = Success
    End Function
End Class


'*****************************************************************************/
'*
'*  Test case class
'*  
'*      An instance of this class represents a single test case. Each case 
'*      consists of several test steps and an ID that should match the oficial
'*      ID of the test case.
'*
'*****************************************************************************/

Class TestCase
    Private Id           ' ID of the test case
    Private TestSteps    ' Queue of test steps

'*****************************************************************************/
'*
'*  Constructor of the class
'*  
'*      This function initializes the array containing the test steps.
'*
'*****************************************************************************/     
    Private Sub Class_Initialize
        TestSteps = Array()
    End Sub    

'*****************************************************************************/
'*
'*  Sets the case ID
'*  
'*      This function sets the ID of the case step. The ID should match the
'*      one in the offcial test plan.
'*
'*****************************************************************************/
    Public Sub SetId(i)
        Id = i
    End Sub

'*****************************************************************************/
'*
'*  Adds test step to the queue
'*  
'*      This function adds a test step to execution queue.
'*
'*****************************************************************************/
    Public Sub AddTestStep(step)
        Redim Preserve TestSteps(UBound(TestSteps)+1)
        Set TestSteps(UBound(TestSteps)) = step
    End Sub

'*****************************************************************************/
'*
'*  Executes the test case
'*  
'*      This function executes the test. It simplay calls the execution
'*      function of each test step in the queue.
'*
'*****************************************************************************/    
    Public Sub Execute()
        Dim Success
        Success = True
        PrintToOutputWindow "Starting test case: " & Id
        For Each Step In TestSteps
            If Step.Execute = False Then
                Success = False
            End If
        Next
        If Success = True Then
            PrintToOutputWindow "Finished test case successfully: " & Id
        Else
            PrintToOutputWindow "Finished test case with error: " & Id
        End If
    End Sub  
End Class


'*****************************************************************************/
'*
'*  Converts negative hex variable
'*  
'*      This function converts a negative 16 bit value into a positive one.
'*      This is necessary, because VBScript interprets 16 bit long hexadecimal
'*      numbers with the MSB set to one as negative numbers.
'*
'*****************************************************************************/

Private Function uHex16(sHex16)
    uHex16 = sHex16 + &H10000
End Function


'*****************************************************************************/
'*
'*  Busy waiting for some seconds
'*  
'*      This function performs busy waiting for a specified number of seconds.
'*      This method is required because the current version of VBScript does
'*      not support passive sleeping.
'*
'*****************************************************************************/

Private Function WaitSeconds(seconds)
    Dim StartTime
    Dim StopTime
    StartTime = Timer()
    Do
        StopTime = Timer()
    Loop While StopTime < StartTime + seconds
End Function


'*****************************************************************************/
'*
'*  Initializes the slave board
'*  
'*      This function has to be started before any test step is executed. It
'*      basically sends initialization messages to the slave system  under
'*      test.
'*
'*****************************************************************************/

Private Sub InitTests(symbol, target)
    SymbolCollection = symbol
    TargetBoard = target
    PrintToOutputWindow "Initializing slave system"
End Sub


'*****************************************************************************/
'*
'*  Prints number of error
'*  
'*      This function should be called after the tests are finished. It prints
'*      the number of errors that occured during the testing procedure.
'*
'*****************************************************************************/

Private Sub FinishTests()
    PrintToOutputWindow "Test result: " & ErrorCount & " test(s) failed"
End Sub
