'*****************************************************************************/
'*  File: BuildSymbols.pem
'* 
'*  Brief: Build PCAN Symbol File for Leica Slave Boards
'*
'*  Version: 0.1
'*  Date:    24.01.2011
'*  Author:  Andreas Menge
'*
'*  Description:
'*
'*      This VBS script generates a symbol file for the PCAN explorer based
'*      on a set of template and configuration files. It can build symbol
'*      files for a single slave board, a collection of slave boards, or
'*      all slave boards in a product.
'*
'*      A product specification file must exist in the symbols/template 
'*      directory of the PCAN project. This configuration file must contain 
'*      the specification for each slave board of a product. The following 
'*      informations must be specified for every board:
'*      
'*      - Boardname
'*      - NodeType of the board
'*      - NodeIndex of the board
'*      - List of software modules:instances pairs
'*      
'*      The configuration file name must be equal to the product name with 
'*      the file extension cfg (e.g. Colorado.cfg). Beside this, a template
'*      file and a CAN ID lookup file must exist for each software module.
'*      The template files are PCAN symbol files for a software module,
'*      which contain control characters, which are replaced during the
'*      build process. The CAN IDs are specified in symbolic form and will
'*      be replaced by the numbers from the matching CAN ID lookup file,
'*      adapted according to the NodeType, NodeIndex and Channel. The
'*      CAN ID lookup file contains pairs of CAN-ID names:numbers.
'*
'*  Company:
'*
'*       Leica Biosystems Nussloch GmbH
'* 
'*  (C) Copyright 2010 by Leica Biosystems Nussloch GmbH. All rights reserved.
'*  This is unpublished proprietary source code of Leica. The copyright notice 
'*  does not evidence any actual or intended publication.
'*
'****************************************************************************/

'------------------------------------------------------------------------------
'FILE DESCRIPTION: Build Symbol Files for Leica Slave Boards
'------------------------------------------------------------------------------

FormatVersion=5.0

'*****************************************************************************/
'* Private Constants 
'*****************************************************************************/

' Constants used by system calls
Const ForReading = 1, ForWriting = 2, ForAppending = 8

' Indices for the board descriptor arrays
const idxBoardName = 0
const idxNodeType  = 1
const idxNodeIndex = 2
const idxModules   = 3
const idxModule    = 0
const idxInstances = 1

' Identifier to request file/path names
const idFileBoardConfig = 0
const idFileTemplate = 1
const idFileCanIDs = 2
const idFileSymbols = 3

' Identifier to flag module states
const idModulePresent = 0
const idCanIdsLoaded = 1
const idModSymLoaded = 2


'*****************************************************************************/
'* Global Variables 
'*****************************************************************************/

dim Boards, Modules, CanIds, Sections
dim OutputWindowOpen
dim NumberOfErrors
dim Expression
dim fso

' Section identifiers in pcan symbol files
Sections = Array("{ENUMS}", "{SEND}", "{RECEIVE}", "{SENDRECEIVE}")


'*****************************************************************************/
'* Private Type Definitions 
'*****************************************************************************/

' Structure to specify a board
class CBoard
    dim Name            ' Name of the board
    dim NodeType        ' Node type
    dim NodeIndex       ' Node index
    dim Modules         ' Modules on this board (collection)
end class

' Structure to specify a software module
class CModule
    dim Name            ' Module name (short name)
    dim Instance        ' Module instance(s)
    dim Channel         ' Channel number
end class


'*****************************************************************************/
'*
'*  Build new symbol file
'*
'*      This is the main procedure of the symbol file builder. It creates
'*      all global objects and calls BuildSymbolFile() to do the build.
'*      If finished successfully, the newly created symbol file is loaded 
'*      into PCAN-Explorer and activated (applied). In case of an error,
'*      an error message is displayed.
'*      
'*  Returns: Nothing
'*
'*****************************************************************************/

sub BuildNewSymbolFile

    CurrentDirectory = "$(PrjDir)"
    NumberOfErrors   = 0

    ' Create global objects
    set fso     = CreateObject("Scripting.FileSystemObject")
    set Boards  = CreateObject("Scripting.Dictionary")
    set Modules = CreateObject("Scripting.Dictionary")
    set CanIds  = CreateObject("Scripting.Dictionary")   

    ProductName = BuildSymbolFile
    
    ' Load and apply created symbol file
    if (ProductName <> "") then 
        if (NumberOfErrors = 0) then    		
            SymbolFilename = GetPathName(idFileSymbols, ProductName)    
            if not (Documents(SymbolFilename) is Nothing) then      
                Documents(SymbolFilename).Close peSaveChangesNo     
            end if
            if (Documents(SymbolFilename) is Nothing) then
                Documents.Open SymbolFilename, "Auto"
            end if
                    
            if not (Documents(SymbolFilename) is Nothing) then
                Documents(SymbolFilename).IsActive = True
                ExecuteCommand "FileApply"
                Documents(SymbolFilename).Close
            end if
            MsgText = "Symbol file '" & ProductName & ".sym' created."
        end if

        if (NumberOfErrors <> 0) then
            MsgText = "Symbol file creation failed (" & NumberOfErrors & _
                " errors). See macro output window for details."            
        end if
        PrintString MsgText
        MsgBox MsgText, vbInformation
    end if
end sub


'*****************************************************************************/
'*
'*  Build symbol file
'*
'*      Opens an input dialog and asks the user to input the product name
'*      and optional a list of boards. The product name is used to identify
'*      the product configuration file. If this file exists, it is loaded
'*      and the boards descriptors collection is created. Only those boards
'*      that are contained in the entered list of boards are taken into 
'*      account. If the list of boards is omited or contains "ALL", all 
'*      boards specified in the product configuration file are taken.
'*
'*      After verifying the board parameters, the CAN ID lookup files of all 
'*      required modules are loaded into the CanIds collection. Then, the 
'*      symbol file is generated by calling 'CreateSymbolFile'.
'*
'*  Returns: Product name string
'*
'*****************************************************************************/

private function BuildSymbolFile

    const Prompt = "Please enter product and board name list:"
    dim ProductName
    
    BoardList = InputBox (Prompt, "Boardnames", "Himalaya ALL") 
    if (BoardList = "") then
        BuildSymbolFile = ""
        exit function
    end if
    
    set Matches = SearchPattern(BoardList, "(\w+[^, ])")   
    if (Matches.Count > 0) then
        ProductName = Matches(0)
   		PrintString "Creating symbol file for '" & ProductName & "'..."
   		
        BoardsPathname = GetPathName (idFileBoardConfig, ProductName)
        if (fso.FileExists(BoardsPathname)) then
            
            Count = LoadBoardDescriptors (ProductName, Matches) 
            if (Count > 0) then
                if (VerifyBoardDescriptors(Boards)) then
                    PrintBoardDescriptors (Boards)
                    
                    if (LoadCanIdentifiers() > 0) then
                        CreateSymbolFile ProductName, Boards        
                    else
                        PrintString "No CAN identifiers specified"
                    end if
                end if
            else
                PrintError "No Board selected or selection not part of product", BoardList
            end if
        else            
            PrintError "Boards config. file not found", BoardsPathname
        end if
    end if
    BuildSymbolFile = ProductName
end function


'*****************************************************************************/
'*
'*  Create symbol file
'*
'*      Creates a symbol file by reading in a template file for each module
'*      instance on each board and customizing the template by replacing
'*      keywords with board/module/instance dependent values. The boards
'*      to consider are taken from the ''Boards' collection. Each board
'*      descriptor includes a module collection, containing all modules
'*      of this board. Each module descriptor contains the module name
'*      and the number of instances of this module.
'*
'*  Parameter:
'*
'*      - Product = Name of the product (e.g. Colorado)
'*      - Boards  = Boards collection
'*
'*  Returns: True if successful, False if not
'*
'*****************************************************************************/

private function CreateSymbolFile (Product, Boards)

    dim Board, Boardname, BoardModule, Module, Instance
    dim Filename, SectionID, Stream
    CreateSymbolFile = False

    Filename = GetPathName(idFileSymbols, Product)  
    set Stream = fso.OpenTextFile(Filename, ForWriting, True)
    set Module = new CModule
    
    Stream.WriteLine StandardSymbolFileHeader(Product) & vbNewline

    for SectionID = 0 to UBound(Sections)
        Stream.WriteLine vbNewline & Sections(SectionID) & vbNewline
        
        ' Create symbols for each board in the collection
        for each Boardname in Boards
            set Board = Boards(Boardname)           
            Module.Channel = 0

            ' Create symbols for each software module
            for i = 0 to UBound(Board.Modules) - 1
                BoardModule = Board.Modules(i)
                
                ' Create symbols for each module instance
                for Instance = 0 to BoardModule(idxInstances) - 1
                    Module.Name     = BoardModule(idxModule)
                    Module.Instance = Instance          
                            
                    CopyAndExpandSection SectionID, Board, Module, Stream
                    
                    Module.Channel = Module.Channel + 1
                next 'Instance
            next 'Module
        next 'Board
    next 'Section
    CreateSymbolFile = True
end function


'*****************************************************************************/
'*
'*  Copies section from template to symbol file
'*
'*      Writes the symbol file section specified by 'SectionID' for the 
'*      module instance specified by 'Module' on the board specified by 
'*      Board. The data is taken from a module specific template file. 
'*      Only the selected section from the template file is copied to
'*      the output file specified by 'oStream'. The template data is
'*      adopted according to the board and module by replacing place-
'*      holders with customized data. See 'ExpandSymbolString' for more.
'*
'*  Parameter:
'*
'*      - SectionID = Section identifier
'*      - Board     = Board structure
'*      - Module    = Module structure
'*      - oStream   = Stream of symbol file
'*
'*  Returns: Nothing
'*
'*****************************************************************************/

private sub CopyAndExpandSection (SectionID, Board, Module, oStream)

    dim Buffer, ActualSectionID, BlankLines
    
    ActualSectionID = -1
    BlankLines = 1
    inSection  = 0

    Pathname = GetPathName(idFileTemplate, Module.Name) 
    set iStream = fso.OpenTextFile (Pathname, ForReading, FALSE)    
                    
    if (SectionID > 0 OR Modules(Module.Name) < idModSymLoaded) then
    
        while (iStream.AtEndOfStream = False)
            Buffer = iStream.ReadLine

            ' Search section in template file
            set Matches = SearchPattern (Buffer, "^\{(\w+)\}")      
            if (Matches.Count = 1) then
                for i = 0 to UBound(Sections)
                    if (Matches(0) = Sections(i)) then
                        ActualSectionID = i
                        exit for
                    end if
                next
                Modules(Module.Name) = idModSymLoaded

            ' Copy section to output file
            elseif (SectionID = ActualSectionID) then
                if (Trim(Buffer) = "") then
                    BlankLines = BlankLines + 1
                else
                    BlankLines = 0
                end if
                if (BlankLines < 2) then
                    oStream.WriteLine _
                        ExpandSymbolString (Board, Module, Buffer)
                end if
            end if
        wend
    end if
end sub


'*****************************************************************************/
'*
'*  Expands variables in a text line
'*
'*      Replaces all macros in the string contained in 'Buffer' and returns
'*      the resulting string. The following macros are handled:
'*      
'*      - Board name ($B)
'*      - Module instance ($I)
'*      - CAN identifier ($<SymbolicID>)
'*
'*      The symbolic CAN IDs are translated to numeric IDs by using the
'*      CanIds collection. The resulting numeric CAN ID is merged with 
'*      the node type, node index, and channel number from the 'Board'
'*      and 'Module' structure. 
'*
'*  Parameter:
'*
'*      - Board  = Board structure
'*      - Module = Module structure
'*      - Buffer = String buffer
'*
'*  Returns: Expanded string
'*
'*****************************************************************************/

private function ExpandSymbolString (Board, Module, Buffer)

    dim CanID, CanIdName, CanIdStr, Matches, regExp

    if (Left(Buffer, 4) = "ID=$") then
    
        set regExp = New RegExp         
        regExp.Pattern = "^ID=\$(\w+)"      
        
        set Matches = regExp.Execute(Buffer)   
        if (Matches.Count = 1) then
            CanIdName = Matches(0).SubMatches(0)

            if (CanIds.Exists(CanIdName)) then
                CanID  = CanIds(CanIdName)
                CanID  = CanID AND NOT &H7FFE
                CanID  = CanID OR (Board.NodeType * 2 + Board.NodeIndex * 256)
                CanID  = CanID OR (Module.Channel * &H1000)
                Buffer = regExp.Replace (Buffer, "ID=" + Hex(CanID) + "h")  
            else
                PrintError "CAN ID undefiniert", CanIdName
            end if              
        end if
    end if
    
    Buffer = replace (Buffer, "$B", Board.Name) 
    Buffer = replace (Buffer, "$I", Module.Instance+1)
    ExpandSymbolString = Buffer
end function


'*****************************************************************************/
'*
'*  Load CAN identifiers
'*
'*      Loads the CAN identifiers from external lookup files into the global
'*      CanIds collection for later lookup. Each module is assumed to have a
'*      separate file in the 'symbols/template' directory. The filenames are 
'*      generic and have the format 'Module<xx>.cid', where <xx> is the name 
'*      of the function module. 
'*
'*      Lookup  files are text files containing lines of symbolic:numeric 
'*      CAN identifier pairs. If a CAN ID is doubly defined, a warning
'*      message is printed.
'*
'*  Returns: Number of CAN-IDs in the collection
'*
'*****************************************************************************/

private function LoadCanIdentifiers 

    const Pattern = "^#define\s(\w+)\s+(&H?[0-9a-fA-F]+)"   
    dim Buffer, Pathname, Matches, iStream
    dim Name, Value

    for each Module in Modules
        Pathname = GetPathName(idFileCanIDs, Module)
        if (fso.FileExists (Pathname)) then
            set iStream = fso.OpenTextFile(Pathname, 1, FALSE)  
    
            while Not iStream.AtEndOfStream 
                Buffer = iStream.ReadLine
                Buffer = replace (Buffer, "0x", "&H")
            
                set Matches = SearchPattern(Buffer, Pattern)   
                if (Matches.Count = 1) then
                    Name  = Matches(0).SubMatches(0)
                    Value = Matches(0).SubMatches(1)
                    if (CanIds.Exists(Name)) then
                        PrintString "Symbol double defined: " + Name
                    else
                        CanIds.Add Name, Value
                    end if  
                end if
            wend
            Modules(Module) = idCanIdsLoaded    
            iStream.Close
        end if
    next
    LoadCanIdentifiers = CanIds.Count
end function


'*****************************************************************************/
'*
'*  Load board descriptors
'*
'*      Loads the product configuration file, filters the contained board
'*      descriptors according to the supplied 'Selection' filter list,
'*      and adds all selected boards to the global 'Boards' collection.
'*      Additionally, all modules are added to the global 'Modules'
'*      collection and marked as 'Present'. 
'*
'*      See 'isBoardSelected' for more information regarding the filtering 
'*      of boards in the configuration file. Returns the number of boards
'*      added to the boards collection
'*
'*  Parameter:
'*
'*      - Product   = Name of the product
'*      - Selection = Filter list of board names
'*
'*  Returns: Number of boards added to the boards collection
'*
'*****************************************************************************/

private function LoadBoardDescriptors (Product, Selection)

    dim Pathname, Stream, Buffer, Matches
    dim Board, bModules()
    
    Pathname   = GetPathName (idFileBoardConfig, Product)
    set Stream = fso.OpenTextFile(Pathname, ForReading, FALSE)

    while Not Stream.AtEndOfStream 
        Buffer = Trim(Stream.ReadLine)  
        Buffer = Replace (Buffer, "0x", "&H")   
        
        if (Left(Buffer,2) <> "//") then
            set Matches = SearchPattern (Buffer, "([&\w:]+)")

            if (Matches.Count >= 3) then                                
                if (isBoardSelected(Matches(0), Selection)) then
                    ReDim bModules(Matches.Count-3)
                    Set Board = new CBoard
                    
                    Board.Name      = Matches(idxBoardName)
                    Board.NodeType  = Matches(idxNodeType)
                    Board.NodeIndex = Matches(idxNodeIndex)

                    for i = 0 to UBound(bModules)-1
                        bModules(i) = Split (UCase(Matches(idxModules+i)), ":")
                        ModuleName  = bModules(i)(idxModule)
                        if (not Modules.Exists(ModuleName)) then
                            Modules.Add ModuleName, idModulePresent
                        end if
                    next
                    Board.Modules = bModules    
                    
                    if (not Boards.Exists(Board.Name)) then
                        Boards.Add Board.Name, Board
                    end if
                end if
            end if
        end if
    wend
    Stream.Close
    LoadBoardDescriptors = Boards.Count
end function


'*****************************************************************************/
'*
'*  Verify board descriptors
'*
'*      Checks the board descriptor parameters of the supplied 'Boards' for
'*      validity. The following parameters are verified:
'*      
'*      - Node type of board (must be 0...127)
'*      - Node index of board (must be 0...15)
'*      - All module parameters
'*
'*      The module parameters are checked by calling VerifyModuleDescriptors.
'*
'*      If any error is detected, an error message is printed and the global
'*      error counter incremented. Returns true if everything is ok, or false
'*      in case of a parameter violation.
'*
'*  Parameter:
'*
'*      - Boards  = Collection of all boards
'*
'*  Returns: True if parameters ok, false if error detected
'*
'*****************************************************************************/

private function VerifyBoardDescriptors (Boards)
    
    dim Board, BoardName, oldErrors 
    oldErrors = NumberOfErrors
    
    for each BoardName in Boards

        set Board = Boards(BoardName)

        ' Check if node type parameter is correct
        if (isNumeric (Board.NodeType) <> True) then
            PrintError "Node type must be numeric", Board.NodeType
        elseif (Board.NodeType < 0 OR Board.NodeType > 127) then
            PrintError "Node type out of range", Board.NodeType
        end if
        
        ' Check if node index parameter is correct
        if (isNumeric (Board.NodeIndex) <> True) then
            PrintError "Node index must be numeric", Board.NodeType
        elseif (Board.NodeIndex < 0 OR Board.NodeIndex > 15) then
            PrintError "Node index out of range", Board.NodeIndex
        end if
    
        VerifyModuleDescriptors(Board)      
    next
    VerifyBoardDescriptors = (NumberOfErrors = oldErrors)
end function


'*****************************************************************************/
'*
'*  Verify module descriptors of a board
'*
'*      Checks the module descriptor parameters of the supplied 'Board' for
'*      validity. The folowing parameters are verified:
'*      
'*      - Module name
'*      - Module instance count (must be 0...127)
'*      - Number of channels (must be 0...127)
'*
'*      Beside this the existence of the symbol template files for all
'*      modules on this board are checked. 
'*
'*      If any error is detected, an error message is printed and the global
'*      error counter incremented. Returns true if everything is ok, or false
'*      in case of a parameter violation.
'*
'*  Parameter:
'*
'*      - Board  = Board information structure
'*
'*  Returns: True if parameters ok, false if error detected
'*
'*****************************************************************************/

private function VerifyModuleDescriptors (Board)
    
    dim ModulName, Instances, Channel, Pathname, oldErrors
    oldErrors = NumberOfErrors
    Channel = 0
    
    for i = 0 to UBound(Board.Modules) - 1

        Instances = Board.Modules(i)(idxInstances)
        ModulName = Board.Modules(i)(idxModule)

        ' Check if module template file exists
        Pathname = GetPathName(idFileTemplate, ModulName)       
        if (Not fso.FileExists(Pathname)) then
            PrintError "No template file for module", Pathname
        end if              

        ' Check if module instance count parameter is correct
        if (isNumeric (Instances) <> True) then
            PrintError "Module instance must be numeric", Instances
        elseif (Instances < 0 OR Instances > 127) then
            PrintError "Module Instances out of range", Instances
        elseif (ModulName = "BM" and Instances <> 1) then
            PrintError "Base module can have only 1 instance", Instances
        else        
            Channel = Channel + Instances
        end if
    next

    if (Channel > 127) then
        PrintError "Too many instances (channel > 127)", Channel
    end if
    VerifyModuleDescriptors = (NumberOfErrors = oldErrors)
end function


'*****************************************************************************/
'*
'*  Print board descriptor
'*
'*      Prints all board decriptors from the 'Boards' collection on the
'*      macro output window. The following infos are printed:
'*
'*      - Name of the board
'*      - Node type of the board
'*      - Node index of the board
'*      - Name and instance count of each module on the board
'*
'*  Parameter:
'*
'*      - Boards  = Boards information collection
'*
'*  Returns: Nothing
'*
'*****************************************************************************/

private sub PrintBoardDescriptors (Boards)

    dim Board, Module, BoardName
    
    for each BoardName in Boards
        set Board = Boards(BoardName)
        
        PrintString "Boardname: " & Board.Name     
        PrintString Space(3) & "NodeType: "  & Board.NodeType
        PrintString Space(3) & "NodeIndex: " & Board.NodeIndex
        
        for i = 0 to UBound(Board.Modules)-1        
	        Instances = Board.Modules(i)(idxInstances)
    	    ModulName = Board.Modules(i)(idxModule)
        
            PrintString Space(6) & _
                "Module: " & ModulName & " ( Instances: " & Instances & ")"
        next
    next
    PrintString "End of Board Descriptors"  
end sub


'*****************************************************************************/
'*
'*  Check if board is selected
'*
'*      The user can select, which of the boards specified in a product 
'*      configuration file are taken into account for symbol file creation.
'*      This allows to create a symbol file for a single board, a subset
'*      of boards, or all boards of a product. 
'*
'*      This function returns true if the supplied 'Boardname' is contained
'*      in the 'Selection' array, or false if not. If 'Selection' is empty
'*      or contains 'ALL', all boards of the product are selected. The
'*      comparision is not case sensitive.
'*
'*  Parameter:
'*
'*      - Boardname = Name of the board to check
'*      - Selection = Array of selected board names
'*
'*  Returns: Nothing
'*
'*****************************************************************************/

private function isBoardSelected (Boardname, Selection)

    Boardname = UCase(Boardname)
    
    ' No board list specified: all boards are selected
    if (Selection.Count = 1) then
        isBoardSelected = True
        exit function
    end if
    
    ' Search board name in board list
    for i = 1 to Selection.Count-1
        iFilter = UCase(Selection(i))
        if (Boardname = iFilter OR iFilter = "ALL") then
            isBoardSelected = True
            exit function
        end if
    next
    isBoardSelected = False
end function


'*****************************************************************************/
'*
'*  Returns standard symbol file header
'*
'*      Returns the header contained in each symbol file
'*
'*  Parameter:
'*
'*      Product = Name of the product (e.g. Colorado)
'*
'*  Returns: Symbol file header string
'*
'*****************************************************************************/

private function StandardSymbolFileHeader (Product)

    SymbolFileHeader = _
        "FormatVersion=5.0" & vbNewline & "Title=""Symbol File for $P"""

    StandardSymbolFileHeader = replace(SymbolFileHeader, "$P", Product)
end function


'*****************************************************************************/
'*
'*  Get pathname to a file
'*
'*      Returns the pathname to a file selected by the logical identifier
'*      'PathnameID'. The pathname is comprised of a fixed part which
'*      depends on PathnameID, and a variable part which is taken from
'*      'Variable'. The following pathnames can be requested:
'*      
'*      - Boards configuration file
'*      - Module symbol file template
'*      - Module CAN-ID lookup file
'*      - Symbol file
'*
'*  Parameter:
'*
'*      - PathnameID = Logical pathname ID
'*      - Variable   = Variable part of the pathname
'*
'*  Returns: Pathname
'*
'*****************************************************************************/

private function GetPathName (PathnameID, Variable)

    dim Pathname
    Variable = Trim(Variable)
    
    select case (PathnameID)
        case idFileBoardConfig  
            Pathname = "../Symbols/" & Variable & ".cfg"
        case idFileTemplate
            Pathname = "../Symbols/Templates/Module" & Variable & ".sym"
        case idFileCanIDs
            Pathname = "../Symbols/Templates/Module" & Variable & ".cid"            
        case idFileSymbols
            Pathname = "../Symbols/" & Variable & ".sym"            
    end select
    GetPathName = Pathname
end function


'*****************************************************************************/
'*
'*  Search pattern in string
'*
'*      Creates a regular expression object and searches the 'inString'
'*      for the supplied regular expression 'Pattern'. The result is
'*      returned as a reference to the matches collection.
'*
'*      To speed up operation a static regular expression object is used.
'*      This has the side effect that a new call of this funtion over-
'*      writes previous results.
'*
'*  Parameter:
'*
'*      - inString = String to search
'*      - Pattern  = Regular expression pattern
'*
'*  Returns: Matches collection
'*
'*****************************************************************************/

private function SearchPattern (inString, Pattern)
 
    dim Match, Matches  
   
    if (isEmpty(Expression)) then
        set Expression = new RegExp   
    end if
    Expression.Pattern = Pattern  
    Expression.Global  = True
     
    set SearchPattern = Expression.Execute(inString)  
end function


'*****************************************************************************/
'*
'*  Print string to output window
'*
'*      Prints the supplied 'Message' string to the macro output window.
'*      If the output window is not visible, it is autom. activated.
'*
'*  Parameter:
'*
'*      - Message = Text string to print
'*
'*  Returns: Nothing
'*
'*****************************************************************************/

private sub PrintString (Message)

    on error resume next
    
    if (isEmpty(OutputWindowOpen)) then
        ExecuteCommand "ActivateOutputWindow"
        OutputWindowOpen = True
    end if
    PrintToOutputWindow Message
end sub


'*****************************************************************************/
'*
'*  Print error message 
'*
'*      Prints the supplied 'ErrorText' and additional info 'AddInfo' into
'*      the macro output window and increments the global error counter
'*
'*  Parameter:
'*
'*      - ErrorText = Error string to print
'*      - AddInfo   = Additional info string
'*
'*  Returns: Nothing
'*
'*****************************************************************************/

private sub PrintError (ErrorText, AddInfo)

    NumberOfErrors = NumberOfErrors + 1
    
    if (AddInfo <> "") then
        ErrorText = ErrorText & ": '" & AddInfo & "'"
    end if  
    PrintString "ERROR: " & ErrorText   
end sub


'*****************************************************************************/
